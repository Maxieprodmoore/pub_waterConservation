// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"fcvSp":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "bed887d14d6bcbeb";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"gLLPy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _lodash = require("lodash");
var _lodashDefault = parcelHelpers.interopDefault(_lodash);
var _splide = require("@splidejs/splide");
var _splideDefault = parcelHelpers.interopDefault(_splide);
var _shoelace = require("@shoelace-style/shoelace/dist/shoelace");
var _drawerJs = require("@shoelace-style/shoelace/dist/components/drawer/drawer.js");
/*------Sticky Navigation------*/ window.onscroll = function() {
    myFunction();
};
var navbar = document.getElementById("navbar");
var sticky = navbar.offsetTop;
function myFunction() {
    if (window.pageYOffset >= sticky) navbar.classList.add("sticky");
    else navbar.classList.remove("sticky");
}
/*--------Creating Modal images for How Water sustains nature Collage-------*/ //Get Overlay
var overlay = document.querySelectorAll(".collageOverlay");
//Get image. 
var collageImg = document.querySelectorAll(".ws-collagePic");
//Get overlay to be active on clicking on image
Array.from(collageImg).forEach(function(collageImgArray, i) {
    collageImgArray.addEventListener('click', function() {
        overlay[i].style.display = "block";
    });
});
//Get icon button (x) that closes Overlay
var overlayClose = document.querySelectorAll(".overlay-CloseBtn");
// When the user clicks on icon button (x), close the overlay
Array.from(overlayClose).forEach(function(overlayCloseArray, i) {
    overlayCloseArray.addEventListener('click', function() {
        overlay[i].style.display = "none";
    });
});
/*--------Setting up Slider for Uses of Water --------*/ var slideWaterUses = new _splideDefault.default('#slide_waterUses', {
    type: 'fade',
    perPage: 1,
    padding: 0,
    rewind: true,
    heightRatio: 0.4,
    drag: true,
    cover: true
});
document.addEventListener('DOMContentLoaded', function() {
    slideWaterUses.mount();
});
/*--------Setting up Slider for Water Available --------*/ var slidesWaterAvail = new _splideDefault.default('#slider-waterAvail', {
    type: 'fade',
    perPage: 1,
    padding: 0,
    rewind: true,
    heightRatio: 0.4,
    drag: true,
    cover: true
}).mount();
document.addEventListener('DOMContentLoaded', function() {
    slidesWaterAvail.mount();
});

},{"lodash":"3qBDj","@splidejs/splide":"5CJev","@shoelace-style/shoelace/dist/shoelace":"6TTGm","@shoelace-style/shoelace/dist/components/drawer/drawer.js":"1eEuu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qBDj":[function(require,module,exports) {
var global = arguments[3];
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = '4.17.21';
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function', INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            'ary',
            WRAP_ARY_FLAG
        ],
        [
            'bind',
            WRAP_BIND_FLAG
        ],
        [
            'bindKey',
            WRAP_BIND_KEY_FLAG
        ],
        [
            'curry',
            WRAP_CURRY_FLAG
        ],
        [
            'curryRight',
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            'flip',
            WRAP_FLIP_FLAG
        ],
        [
            'partial',
            WRAP_PARTIAL_FLAG
        ],
        [
            'partialRight',
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            'rearg',
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    /** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
        rsNonAstral + rsCombo + '?',
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join('|') + ')';
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, 'g');
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
            rsBreak,
            rsUpper + rsMiscLower,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
    };
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
    };
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',
        '\xc1': 'A',
        '\xc2': 'A',
        '\xc3': 'A',
        '\xc4': 'A',
        '\xc5': 'A',
        '\xe0': 'a',
        '\xe1': 'a',
        '\xe2': 'a',
        '\xe3': 'a',
        '\xe4': 'a',
        '\xe5': 'a',
        '\xc7': 'C',
        '\xe7': 'c',
        '\xd0': 'D',
        '\xf0': 'd',
        '\xc8': 'E',
        '\xc9': 'E',
        '\xca': 'E',
        '\xcb': 'E',
        '\xe8': 'e',
        '\xe9': 'e',
        '\xea': 'e',
        '\xeb': 'e',
        '\xcc': 'I',
        '\xcd': 'I',
        '\xce': 'I',
        '\xcf': 'I',
        '\xec': 'i',
        '\xed': 'i',
        '\xee': 'i',
        '\xef': 'i',
        '\xd1': 'N',
        '\xf1': 'n',
        '\xd2': 'O',
        '\xd3': 'O',
        '\xd4': 'O',
        '\xd5': 'O',
        '\xd6': 'O',
        '\xd8': 'O',
        '\xf2': 'o',
        '\xf3': 'o',
        '\xf4': 'o',
        '\xf5': 'o',
        '\xf6': 'o',
        '\xf8': 'o',
        '\xd9': 'U',
        '\xda': 'U',
        '\xdb': 'U',
        '\xdc': 'U',
        '\xf9': 'u',
        '\xfa': 'u',
        '\xfb': 'u',
        '\xfc': 'u',
        '\xdd': 'Y',
        '\xfd': 'y',
        '\xff': 'y',
        '\xc6': 'Ae',
        '\xe6': 'ae',
        '\xde': 'Th',
        '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010a': 'C',
        '\u010c': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010b': 'c',
        '\u010d': 'c',
        '\u010e': 'D',
        '\u0110': 'D',
        '\u010f': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011a': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011b': 'e',
        '\u011c': 'G',
        '\u011e': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011d': 'g',
        '\u011f': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012a': 'I',
        '\u012c': 'I',
        '\u012e': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012b': 'i',
        '\u012d': 'i',
        '\u012f': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013b': 'L',
        '\u013d': 'L',
        '\u013f': 'L',
        '\u0141': 'L',
        '\u013a': 'l',
        '\u013c': 'l',
        '\u013e': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014a': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014b': 'n',
        '\u014c': 'O',
        '\u014e': 'O',
        '\u0150': 'O',
        '\u014d': 'o',
        '\u014f': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015a': 'S',
        '\u015c': 'S',
        '\u015e': 'S',
        '\u0160': 'S',
        '\u015b': 's',
        '\u015d': 's',
        '\u015f': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016a': 'U',
        '\u016c': 'U',
        '\u016e': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016b': 'u',
        '\u016d': 'u',
        '\u016f': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017b': 'Z',
        '\u017d': 'Z',
        '\u017a': 'z',
        '\u017c': 'z',
        '\u017e': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017f': 's'
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
    /** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {
        }
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty('length');
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split('');
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection1, predicate, eachFunc) {
        var result;
        eachFunc(collection1, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection2, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection2, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while((index--) && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext1 = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context['__core-js_shared__'];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object, 'defineProperty');
                func({
                }, '', {
                });
                return func;
            } catch (e) {
            }
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {
        };
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, '__wrapped__')) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {
            }
            return function(proto) {
                if (!isObject(proto)) return {
                };
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'escape': reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'evaluate': reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'interpolate': reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ 'variable': '',
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ 'imports': {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ '_': lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while((length--) && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {
            };
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash,
                'map': new (Map || ListCache),
                'string': new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection3, setter, iteratee, accumulator) {
            baseEach(collection3, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) defineProperty(object, key, {
                'configurable': true,
                'enumerable': true,
                'value': value,
                'writable': true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key1, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key1, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {
                    } : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {
                    };
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection4, predicate) {
            var result = true;
            baseEach(collection4, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection5, predicate) {
            var result = [];
            baseEach(collection5, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object1, setter, iteratee, accumulator) {
            baseForOwn(object1, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent1(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') return value;
            if (value == null) return identity;
            if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection6, iteratee) {
            var index = -1, result = isArrayLike(collection6) ? Array(collection6.length) : [];
            baseEach(collection6, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {
            };
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n)
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values1(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values1(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === '__proto__' || key === 'constructor' || key === 'prototype') return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {
                    };
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values1(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection7, predicate) {
            var result;
            baseEach(collection7, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent1(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) result2 = result2.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result2);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {
            };
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
            };
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {
            });
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {
                };
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index1 = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index1--){
                    var func = funcs[index1];
                    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') var wrapper = new LodashWrapper([], true);
                }
                index1 = wrapper ? index1 : length;
                while(++index1 < length){
                    func = funcs[index1];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {
                });
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue1 = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + '';
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee1;
            result = result === iteratee1 ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {
            }
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case 'drop':
                        start += size;
                        break;
                    case 'dropRight':
                        end -= size;
                        break;
                    case 'take':
                        end = nativeMin(end, start + size);
                        break;
                    case 'takeRight':
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {
            };
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent1(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') return;
            if (key == '__proto__') return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) return value;
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return func + '';
                } catch (e1) {
                }
            }
            return '';
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = '_.' + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {
            };
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf1(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain1(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [
                    interceptor
                ],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain1(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [
                        reverse
                    ],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map1(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes1(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values1(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map1(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size1(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary1(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary1(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone1(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values1;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object2, iteratee) {
            var result = {
            };
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object2, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object3, iteratee) {
            var result = {
            };
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object3, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {
            };
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {
            } : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {
            };
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result1(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set1(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform1(object4, iteratee, accumulator) {
            var isArr = isArray(object4), isArrLike = isArr || isBuffer(object4) || isTypedArray(object4);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object4 && object4.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object4)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object4)) : {
                };
                else accumulator = {
                };
            }
            (isArrLike ? arrayEach : baseForOwn)(object4, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values1(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst('toLowerCase');
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({
            }, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({
            }, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, 'variable') && options.variable;
            if (!variable) source = 'with (obj) {\n' + source + '\n}\n';
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            // Frame code as the function body.
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, '');
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst('toUpperCase');
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee1(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            'func': func,
                            'args': arguments,
                            'thisArg': object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {
            };
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return '';
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound('ceil');
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound('floor');
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound('round');
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary1;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain1;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee1;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map1;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set1;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform1;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values1;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone1;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes1;
        lodash.indexOf = indexOf1;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result1;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size1;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {
            };
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            'chain': false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            'drop',
            'take'
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                });
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            'head',
            'last'
        ], function(methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            'initial',
            'tail'
        ], function(methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == 'function') return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value1 = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value1 instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value1);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value1 = onlyLazy ? value1 : new LazyWrapper(this);
                    var result3 = func.apply(value1, args);
                    result3.__actions__.push({
                        'func': thru,
                        'args': [
                            interceptor
                        ],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result3, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result3 = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result3.value()[0] : result3.value() : result3;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '';
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                'name': 'wrapper',
                'func': undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext1();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

},{}],"5CJev":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLASSES", ()=>CLASSES
);
parcelHelpers.export(exports, "CLASS_ACTIVE", ()=>CLASS_ACTIVE
);
parcelHelpers.export(exports, "CLASS_ARROW", ()=>CLASS_ARROW
);
parcelHelpers.export(exports, "CLASS_ARROWS", ()=>CLASS_ARROWS
);
parcelHelpers.export(exports, "CLASS_ARROW_NEXT", ()=>CLASS_ARROW_NEXT
);
parcelHelpers.export(exports, "CLASS_ARROW_PREV", ()=>CLASS_ARROW_PREV
);
parcelHelpers.export(exports, "CLASS_AUTOPLAY", ()=>CLASS_AUTOPLAY
);
parcelHelpers.export(exports, "CLASS_CLONE", ()=>CLASS_CLONE
);
parcelHelpers.export(exports, "CLASS_CONTAINER", ()=>CLASS_CONTAINER
);
parcelHelpers.export(exports, "CLASS_INITIALIZED", ()=>CLASS_INITIALIZED
);
parcelHelpers.export(exports, "CLASS_LIST", ()=>CLASS_LIST
);
parcelHelpers.export(exports, "CLASS_LOADING", ()=>CLASS_LOADING
);
parcelHelpers.export(exports, "CLASS_NEXT", ()=>CLASS_NEXT
);
parcelHelpers.export(exports, "CLASS_PAGINATION", ()=>CLASS_PAGINATION
);
parcelHelpers.export(exports, "CLASS_PAGINATION_PAGE", ()=>CLASS_PAGINATION_PAGE
);
parcelHelpers.export(exports, "CLASS_PAUSE", ()=>CLASS_PAUSE
);
parcelHelpers.export(exports, "CLASS_PLAY", ()=>CLASS_PLAY
);
parcelHelpers.export(exports, "CLASS_PREV", ()=>CLASS_PREV
);
parcelHelpers.export(exports, "CLASS_PROGRESS", ()=>CLASS_PROGRESS
);
parcelHelpers.export(exports, "CLASS_PROGRESS_BAR", ()=>CLASS_PROGRESS_BAR
);
parcelHelpers.export(exports, "CLASS_ROOT", ()=>CLASS_ROOT
);
parcelHelpers.export(exports, "CLASS_SLIDE", ()=>CLASS_SLIDE
);
parcelHelpers.export(exports, "CLASS_SLIDER", ()=>CLASS_SLIDER
);
parcelHelpers.export(exports, "CLASS_SPINNER", ()=>CLASS_SPINNER
);
parcelHelpers.export(exports, "CLASS_TRACK", ()=>CLASS_TRACK
);
parcelHelpers.export(exports, "CLASS_VISIBLE", ()=>CLASS_VISIBLE
);
parcelHelpers.export(exports, "EVENT_ACTIVE", ()=>EVENT_ACTIVE
);
parcelHelpers.export(exports, "EVENT_ARROWS_MOUNTED", ()=>EVENT_ARROWS_MOUNTED
);
parcelHelpers.export(exports, "EVENT_ARROWS_UPDATED", ()=>EVENT_ARROWS_UPDATED
);
parcelHelpers.export(exports, "EVENT_AUTOPLAY_PAUSE", ()=>EVENT_AUTOPLAY_PAUSE
);
parcelHelpers.export(exports, "EVENT_AUTOPLAY_PLAY", ()=>EVENT_AUTOPLAY_PLAY
);
parcelHelpers.export(exports, "EVENT_AUTOPLAY_PLAYING", ()=>EVENT_AUTOPLAY_PLAYING
);
parcelHelpers.export(exports, "EVENT_CLICK", ()=>EVENT_CLICK
);
parcelHelpers.export(exports, "EVENT_DESTROY", ()=>EVENT_DESTROY
);
parcelHelpers.export(exports, "EVENT_DRAG", ()=>EVENT_DRAG
);
parcelHelpers.export(exports, "EVENT_DRAGGED", ()=>EVENT_DRAGGED
);
parcelHelpers.export(exports, "EVENT_DRAGGING", ()=>EVENT_DRAGGING
);
parcelHelpers.export(exports, "EVENT_HIDDEN", ()=>EVENT_HIDDEN
);
parcelHelpers.export(exports, "EVENT_INACTIVE", ()=>EVENT_INACTIVE
);
parcelHelpers.export(exports, "EVENT_LAZYLOAD_LOADED", ()=>EVENT_LAZYLOAD_LOADED
);
parcelHelpers.export(exports, "EVENT_MOUNTED", ()=>EVENT_MOUNTED
);
parcelHelpers.export(exports, "EVENT_MOVE", ()=>EVENT_MOVE
);
parcelHelpers.export(exports, "EVENT_MOVED", ()=>EVENT_MOVED
);
parcelHelpers.export(exports, "EVENT_NAVIGATION_MOUNTED", ()=>EVENT_NAVIGATION_MOUNTED
);
parcelHelpers.export(exports, "EVENT_PAGINATION_MOUNTED", ()=>EVENT_PAGINATION_MOUNTED
);
parcelHelpers.export(exports, "EVENT_PAGINATION_UPDATED", ()=>EVENT_PAGINATION_UPDATED
);
parcelHelpers.export(exports, "EVENT_READY", ()=>EVENT_READY
);
parcelHelpers.export(exports, "EVENT_REFRESH", ()=>EVENT_REFRESH
);
parcelHelpers.export(exports, "EVENT_REPOSITIONED", ()=>EVENT_REPOSITIONED
);
parcelHelpers.export(exports, "EVENT_RESIZE", ()=>EVENT_RESIZE
);
parcelHelpers.export(exports, "EVENT_RESIZED", ()=>EVENT_RESIZED
);
parcelHelpers.export(exports, "EVENT_SCROLL", ()=>EVENT_SCROLL
);
parcelHelpers.export(exports, "EVENT_SCROLLED", ()=>EVENT_SCROLLED
);
parcelHelpers.export(exports, "EVENT_SHIFTED", ()=>EVENT_SHIFTED
);
parcelHelpers.export(exports, "EVENT_SLIDE_KEYDOWN", ()=>EVENT_SLIDE_KEYDOWN
);
parcelHelpers.export(exports, "EVENT_UPDATED", ()=>EVENT_UPDATED
);
parcelHelpers.export(exports, "EVENT_VISIBLE", ()=>EVENT_VISIBLE
);
parcelHelpers.export(exports, "EventBus", ()=>EventBus
);
parcelHelpers.export(exports, "EventInterface", ()=>EventInterface
);
parcelHelpers.export(exports, "RequestInterval", ()=>RequestInterval
);
parcelHelpers.export(exports, "STATUS_CLASSES", ()=>STATUS_CLASSES
);
parcelHelpers.export(exports, "Splide", ()=>Splide
);
parcelHelpers.export(exports, "SplideRenderer", ()=>SplideRenderer
);
parcelHelpers.export(exports, "State", ()=>State
);
parcelHelpers.export(exports, "Throttle", ()=>Throttle
);
parcelHelpers.export(exports, "default", ()=>Splide
);
/*!
 * Splide.js
 * Version  : 3.6.9
 * License  : MIT
 * Copyright: 2021 Naotoshi Fujita
 */ const PROJECT_CODE = "splide";
const DATA_ATTRIBUTE = `data-${PROJECT_CODE}`;
const CREATED = 1;
const MOUNTED = 2;
const IDLE = 3;
const MOVING = 4;
const DESTROYED = 5;
const STATES = {
    CREATED,
    MOUNTED,
    IDLE,
    MOVING,
    DESTROYED
};
const DEFAULT_EVENT_PRIORITY = 10;
const DEFAULT_USER_EVENT_PRIORITY = 20;
function empty(array) {
    array.length = 0;
}
function isObject(subject) {
    return !isNull(subject) && typeof subject === "object";
}
function isArray(subject) {
    return Array.isArray(subject);
}
function isFunction(subject) {
    return typeof subject === "function";
}
function isString(subject) {
    return typeof subject === "string";
}
function isUndefined(subject) {
    return typeof subject === "undefined";
}
function isNull(subject) {
    return subject === null;
}
function isHTMLElement(subject) {
    return subject instanceof HTMLElement;
}
function toArray(value) {
    return isArray(value) ? value : [
        value
    ];
}
function forEach(values, iteratee) {
    toArray(values).forEach(iteratee);
}
function includes(array, value) {
    return array.indexOf(value) > -1;
}
function push(array, items) {
    array.push(...toArray(items));
    return array;
}
const arrayProto = Array.prototype;
function slice(arrayLike, start, end) {
    return arrayProto.slice.call(arrayLike, start, end);
}
function find(arrayLike, predicate) {
    return slice(arrayLike).filter(predicate)[0];
}
function toggleClass(elm, classes, add) {
    if (elm) forEach(classes, (name)=>{
        if (name) elm.classList[add ? "add" : "remove"](name);
    });
}
function addClass(elm, classes) {
    toggleClass(elm, isString(classes) ? classes.split(" ") : classes, true);
}
function append(parent, children1) {
    forEach(children1, parent.appendChild.bind(parent));
}
function before(nodes, ref) {
    forEach(nodes, (node)=>{
        const parent = ref.parentNode;
        if (parent) parent.insertBefore(node, ref);
    });
}
function matches(elm, selector) {
    return isHTMLElement(elm) && (elm["msMatchesSelector"] || elm.matches).call(elm, selector);
}
function children(parent, selector) {
    return parent ? slice(parent.children).filter((child1)=>matches(child1, selector)
    ) : [];
}
function child(parent, selector) {
    return selector ? children(parent, selector)[0] : parent.firstElementChild;
}
function forOwn(object, iteratee, right) {
    if (object) {
        let keys = Object.keys(object);
        keys = right ? keys.reverse() : keys;
        for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            if (key !== "__proto__") {
                if (iteratee(object[key], key) === false) break;
            }
        }
    }
    return object;
}
function assign(object) {
    slice(arguments, 1).forEach((source)=>{
        forOwn(source, (value, key)=>{
            object[key] = source[key];
        });
    });
    return object;
}
function merge(object, source) {
    forOwn(source, (value, key)=>{
        if (isArray(value)) object[key] = value.slice();
        else if (isObject(value)) object[key] = merge(isObject(object[key]) ? object[key] : {
        }, value);
        else object[key] = value;
    });
    return object;
}
function removeAttribute(elm, attrs) {
    if (elm) forEach(attrs, (attr)=>{
        elm.removeAttribute(attr);
    });
}
function setAttribute(elm, attrs, value) {
    if (isObject(attrs)) forOwn(attrs, (value2, name)=>{
        setAttribute(elm, name, value2);
    });
    else isNull(value) ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));
}
function create(tag, attrs, parent) {
    const elm = document.createElement(tag);
    if (attrs) isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);
    parent && append(parent, elm);
    return elm;
}
function style(elm, prop, value) {
    if (isUndefined(value)) return getComputedStyle(elm)[prop];
    if (!isNull(value)) {
        const { style: style2  } = elm;
        value = `${value}`;
        if (style2[prop] !== value) style2[prop] = value;
    }
}
function display(elm, display2) {
    style(elm, "display", display2);
}
function focus(elm) {
    elm["setActive"] && elm["setActive"]() || elm.focus({
        preventScroll: true
    });
}
function getAttribute(elm, attr) {
    return elm.getAttribute(attr);
}
function hasClass(elm, className) {
    return elm && elm.classList.contains(className);
}
function rect(target) {
    return target.getBoundingClientRect();
}
function remove(nodes) {
    forEach(nodes, (node)=>{
        if (node && node.parentNode) node.parentNode.removeChild(node);
    });
}
function measure(parent, value) {
    if (isString(value)) {
        const div = create("div", {
            style: `width: ${value}; position: absolute;`
        }, parent);
        value = rect(div).width;
        remove(div);
    }
    return value;
}
function parseHtml(html) {
    return child(new DOMParser().parseFromString(html, "text/html").body);
}
function prevent(e, stopPropagation) {
    e.preventDefault();
    if (stopPropagation) {
        e.stopPropagation();
        e.stopImmediatePropagation();
    }
}
function query(parent, selector) {
    return parent && parent.querySelector(selector);
}
function queryAll(parent, selector) {
    return slice(parent.querySelectorAll(selector));
}
function removeClass(elm, classes) {
    toggleClass(elm, classes, false);
}
function unit(value) {
    return isString(value) ? value : value ? `${value}px` : "";
}
function assert(condition, message = "") {
    if (!condition) throw new Error(`[${PROJECT_CODE}] ${message}`);
}
function nextTick(callback) {
    setTimeout(callback);
}
const noop = ()=>{
};
function raf(func) {
    return requestAnimationFrame(func);
}
const { min , max , floor , ceil , abs  } = Math;
function approximatelyEqual(x, y, epsilon) {
    return abs(x - y) < epsilon;
}
function between(number, minOrMax, maxOrMin, exclusive) {
    const minimum = min(minOrMax, maxOrMin);
    const maximum = max(minOrMax, maxOrMin);
    return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;
}
function clamp(number, x, y) {
    const minimum = min(x, y);
    const maximum = max(x, y);
    return min(max(minimum, number), maximum);
}
function sign(x) {
    return +(x > 0) - +(x < 0);
}
function camelToKebab(string) {
    return string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
}
function format(string, replacements) {
    forEach(replacements, (replacement)=>{
        string = string.replace("%s", `${replacement}`);
    });
    return string;
}
function pad(number) {
    return number < 10 ? `0${number}` : `${number}`;
}
const ids = {
};
function uniqueId(prefix) {
    return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;
}
function EventBus() {
    let handlers = {
    };
    function on(events, callback, key, priority = DEFAULT_EVENT_PRIORITY) {
        forEachEvent(events, (event, namespace)=>{
            handlers[event] = handlers[event] || [];
            push(handlers[event], {
                _event: event,
                _callback: callback,
                _namespace: namespace,
                _priority: priority,
                _key: key
            }).sort((handler1, handler2)=>handler1._priority - handler2._priority
            );
        });
    }
    function off(events, key) {
        forEachEvent(events, (event, namespace)=>{
            const eventHandlers = handlers[event];
            handlers[event] = eventHandlers && eventHandlers.filter((handler)=>{
                return handler._key ? handler._key !== key : key || handler._namespace !== namespace;
            });
        });
    }
    function offBy(key) {
        forOwn(handlers, (eventHandlers, event)=>{
            off(event, key);
        });
    }
    function emit(event) {
        (handlers[event] || []).forEach((handler)=>{
            handler._callback.apply(handler, slice(arguments, 1));
        });
    }
    function destroy() {
        handlers = {
        };
    }
    function forEachEvent(events, iteratee) {
        toArray(events).join(" ").split(" ").forEach((eventNS)=>{
            const fragments = eventNS.split(".");
            iteratee(fragments[0], fragments[1]);
        });
    }
    return {
        on,
        off,
        offBy,
        emit,
        destroy
    };
}
const EVENT_MOUNTED = "mounted";
const EVENT_READY = "ready";
const EVENT_MOVE = "move";
const EVENT_MOVED = "moved";
const EVENT_SHIFTED = "shifted";
const EVENT_CLICK = "click";
const EVENT_ACTIVE = "active";
const EVENT_INACTIVE = "inactive";
const EVENT_VISIBLE = "visible";
const EVENT_HIDDEN = "hidden";
const EVENT_SLIDE_KEYDOWN = "slide:keydown";
const EVENT_REFRESH = "refresh";
const EVENT_UPDATED = "updated";
const EVENT_RESIZE = "resize";
const EVENT_RESIZED = "resized";
const EVENT_REPOSITIONED = "repositioned";
const EVENT_DRAG = "drag";
const EVENT_DRAGGING = "dragging";
const EVENT_DRAGGED = "dragged";
const EVENT_SCROLL = "scroll";
const EVENT_SCROLLED = "scrolled";
const EVENT_DESTROY = "destroy";
const EVENT_ARROWS_MOUNTED = "arrows:mounted";
const EVENT_ARROWS_UPDATED = "arrows:updated";
const EVENT_PAGINATION_MOUNTED = "pagination:mounted";
const EVENT_PAGINATION_UPDATED = "pagination:updated";
const EVENT_NAVIGATION_MOUNTED = "navigation:mounted";
const EVENT_AUTOPLAY_PLAY = "autoplay:play";
const EVENT_AUTOPLAY_PLAYING = "autoplay:playing";
const EVENT_AUTOPLAY_PAUSE = "autoplay:pause";
const EVENT_LAZYLOAD_LOADED = "lazyload:loaded";
function EventInterface(Splide2) {
    const { event  } = Splide2;
    const key = {
    };
    let listeners = [];
    function on(events, callback, priority) {
        event.on(events, callback, key, priority);
    }
    function off(events) {
        event.off(events, key);
    }
    function bind(targets, events, callback, options) {
        forEachEvent(targets, events, (target, event2)=>{
            listeners.push([
                target,
                event2,
                callback,
                options
            ]);
            target.addEventListener(event2, callback, options);
        });
    }
    function unbind(targets, events, callback) {
        forEachEvent(targets, events, (target, event2)=>{
            listeners = listeners.filter((listener)=>{
                if (listener[0] === target && listener[1] === event2 && (!callback || listener[2] === callback)) {
                    target.removeEventListener(event2, listener[2], listener[3]);
                    return false;
                }
                return true;
            });
        });
    }
    function forEachEvent(targets, events, iteratee) {
        forEach(targets, (target)=>{
            if (target) events.split(" ").forEach(iteratee.bind(null, target));
        });
    }
    function destroy() {
        listeners = listeners.filter((data)=>unbind(data[0], data[1])
        );
        event.offBy(key);
    }
    event.on(EVENT_DESTROY, destroy, key);
    return {
        on,
        off,
        emit: event.emit,
        bind,
        unbind,
        destroy
    };
}
function RequestInterval(interval, onInterval, onUpdate, limit) {
    const { now  } = Date;
    let startTime;
    let rate = 0;
    let id;
    let paused = true;
    let count = 0;
    function update() {
        if (!paused) {
            const elapsed = now() - startTime;
            if (elapsed >= interval) {
                rate = 1;
                startTime = now();
            } else rate = elapsed / interval;
            if (onUpdate) onUpdate(rate);
            if (rate === 1) {
                onInterval();
                if (limit && ++count >= limit) return pause();
            }
            raf(update);
        }
    }
    function start(resume) {
        !resume && cancel();
        startTime = now() - (resume ? rate * interval : 0);
        paused = false;
        raf(update);
    }
    function pause() {
        paused = true;
    }
    function rewind() {
        startTime = now();
        rate = 0;
        if (onUpdate) onUpdate(rate);
    }
    function cancel() {
        cancelAnimationFrame(id);
        rate = 0;
        id = 0;
        paused = true;
    }
    function set(time) {
        interval = time;
    }
    function isPaused() {
        return paused;
    }
    return {
        start,
        rewind,
        pause,
        cancel,
        set,
        isPaused
    };
}
function State(initialState) {
    let state = initialState;
    function set(value) {
        state = value;
    }
    function is(states) {
        return includes(toArray(states), state);
    }
    return {
        set,
        is
    };
}
function Throttle(func, duration) {
    let interval;
    function throttled() {
        if (!interval) {
            interval = RequestInterval(duration || 0, ()=>{
                func.apply(this, arguments);
                interval = null;
            }, null, 1);
            interval.start();
        }
    }
    return throttled;
}
function Options(Splide2, Components2, options) {
    const throttledObserve = Throttle(observe);
    let initialOptions;
    let points;
    let currPoint;
    function setup() {
        try {
            merge(options, JSON.parse(getAttribute(Splide2.root, DATA_ATTRIBUTE)));
        } catch (e) {
            assert(false, e.message);
        }
        initialOptions = merge({
        }, options);
        const { breakpoints  } = options;
        if (breakpoints) {
            const isMin = options.mediaQuery === "min";
            points = Object.keys(breakpoints).sort((n, m)=>isMin ? +m - +n : +n - +m
            ).map((point)=>[
                    point,
                    matchMedia(`(${isMin ? "min" : "max"}-width:${point}px)`)
                ]
            );
            observe();
        }
    }
    function mount() {
        if (points) addEventListener("resize", throttledObserve);
    }
    function destroy(completely) {
        if (completely) removeEventListener("resize", throttledObserve);
    }
    function observe() {
        const item = find(points, (item2)=>item2[1].matches
        ) || [];
        if (item[0] !== currPoint) onMatch(currPoint = item[0]);
    }
    function onMatch(point) {
        const newOptions = options.breakpoints[point] || initialOptions;
        if (newOptions.destroy) {
            Splide2.options = initialOptions;
            Splide2.destroy(newOptions.destroy === "completely");
        } else {
            if (Splide2.state.is(DESTROYED)) {
                destroy(true);
                Splide2.mount();
            }
            Splide2.options = newOptions;
        }
    }
    return {
        setup,
        mount,
        destroy
    };
}
const RTL = "rtl";
const TTB = "ttb";
const ORIENTATION_MAP = {
    marginRight: [
        "marginBottom",
        "marginLeft"
    ],
    autoWidth: [
        "autoHeight"
    ],
    fixedWidth: [
        "fixedHeight"
    ],
    paddingLeft: [
        "paddingTop",
        "paddingRight"
    ],
    paddingRight: [
        "paddingBottom",
        "paddingLeft"
    ],
    width: [
        "height"
    ],
    left: [
        "top",
        "right"
    ],
    right: [
        "bottom",
        "left"
    ],
    x: [
        "y"
    ],
    X: [
        "Y"
    ],
    Y: [
        "X"
    ],
    ArrowLeft: [
        "ArrowUp",
        "ArrowRight"
    ],
    ArrowRight: [
        "ArrowDown",
        "ArrowLeft"
    ]
};
function Direction(Splide2, Components2, options) {
    function resolve(prop, axisOnly) {
        const { direction  } = options;
        const index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;
        return ORIENTATION_MAP[prop][index] || prop;
    }
    function orient(value) {
        return value * (options.direction === RTL ? 1 : -1);
    }
    return {
        resolve,
        orient
    };
}
const CLASS_ROOT = PROJECT_CODE;
const CLASS_SLIDER = `${PROJECT_CODE}__slider`;
const CLASS_TRACK = `${PROJECT_CODE}__track`;
const CLASS_LIST = `${PROJECT_CODE}__list`;
const CLASS_SLIDE = `${PROJECT_CODE}__slide`;
const CLASS_CLONE = `${CLASS_SLIDE}--clone`;
const CLASS_CONTAINER = `${CLASS_SLIDE}__container`;
const CLASS_ARROWS = `${PROJECT_CODE}__arrows`;
const CLASS_ARROW = `${PROJECT_CODE}__arrow`;
const CLASS_ARROW_PREV = `${CLASS_ARROW}--prev`;
const CLASS_ARROW_NEXT = `${CLASS_ARROW}--next`;
const CLASS_PAGINATION = `${PROJECT_CODE}__pagination`;
const CLASS_PAGINATION_PAGE = `${CLASS_PAGINATION}__page`;
const CLASS_PROGRESS = `${PROJECT_CODE}__progress`;
const CLASS_PROGRESS_BAR = `${CLASS_PROGRESS}__bar`;
const CLASS_AUTOPLAY = `${PROJECT_CODE}__autoplay`;
const CLASS_PLAY = `${PROJECT_CODE}__play`;
const CLASS_PAUSE = `${PROJECT_CODE}__pause`;
const CLASS_SPINNER = `${PROJECT_CODE}__spinner`;
const CLASS_INITIALIZED = "is-initialized";
const CLASS_ACTIVE = "is-active";
const CLASS_PREV = "is-prev";
const CLASS_NEXT = "is-next";
const CLASS_VISIBLE = "is-visible";
const CLASS_LOADING = "is-loading";
const STATUS_CLASSES = [
    CLASS_ACTIVE,
    CLASS_VISIBLE,
    CLASS_PREV,
    CLASS_NEXT,
    CLASS_LOADING
];
const CLASSES = {
    slide: CLASS_SLIDE,
    clone: CLASS_CLONE,
    arrows: CLASS_ARROWS,
    arrow: CLASS_ARROW,
    prev: CLASS_ARROW_PREV,
    next: CLASS_ARROW_NEXT,
    pagination: CLASS_PAGINATION,
    page: CLASS_PAGINATION_PAGE,
    spinner: CLASS_SPINNER
};
function Elements(Splide2, Components2, options) {
    const { on  } = EventInterface(Splide2);
    const { root  } = Splide2;
    const elements = {
    };
    const slides = [];
    let classes;
    let slider;
    let track;
    let list;
    function setup() {
        collect();
        identify();
        addClass(root, classes = getClasses());
    }
    function mount() {
        on(EVENT_REFRESH, refresh, DEFAULT_EVENT_PRIORITY - 2);
        on(EVENT_UPDATED, update);
    }
    function destroy() {
        [
            root,
            track,
            list
        ].forEach((elm)=>{
            removeAttribute(elm, "style");
        });
        empty(slides);
        removeClass(root, classes);
    }
    function refresh() {
        destroy();
        setup();
    }
    function update() {
        removeClass(root, classes);
        addClass(root, classes = getClasses());
    }
    function collect() {
        slider = child(root, `.${CLASS_SLIDER}`);
        track = query(root, `.${CLASS_TRACK}`);
        list = child(track, `.${CLASS_LIST}`);
        assert(track && list, "A track/list element is missing.");
        push(slides, children(list, `.${CLASS_SLIDE}:not(.${CLASS_CLONE})`));
        const autoplay = find1(`.${CLASS_AUTOPLAY}`);
        const arrows = find1(`.${CLASS_ARROWS}`);
        assign(elements, {
            root,
            slider,
            track,
            list,
            slides,
            arrows,
            autoplay,
            prev: query(arrows, `.${CLASS_ARROW_PREV}`),
            next: query(arrows, `.${CLASS_ARROW_NEXT}`),
            bar: query(find1(`.${CLASS_PROGRESS}`), `.${CLASS_PROGRESS_BAR}`),
            play: query(autoplay, `.${CLASS_PLAY}`),
            pause: query(autoplay, `.${CLASS_PAUSE}`)
        });
    }
    function identify() {
        const id = root.id || uniqueId(PROJECT_CODE);
        root.id = id;
        track.id = track.id || `${id}-track`;
        list.id = list.id || `${id}-list`;
    }
    function find1(selector) {
        return child(root, selector) || child(slider, selector);
    }
    function getClasses() {
        return [
            `${CLASS_ROOT}--${options.type}`,
            `${CLASS_ROOT}--${options.direction}`,
            options.drag && `${CLASS_ROOT}--draggable`,
            options.isNavigation && `${CLASS_ROOT}--nav`,
            CLASS_ACTIVE
        ];
    }
    return assign(elements, {
        setup,
        mount,
        destroy
    });
}
const ROLE = "role";
const ARIA_CONTROLS = "aria-controls";
const ARIA_CURRENT = "aria-current";
const ARIA_LABEL = "aria-label";
const ARIA_HIDDEN = "aria-hidden";
const TAB_INDEX = "tabindex";
const DISABLED = "disabled";
const ARIA_ORIENTATION = "aria-orientation";
const ALL_ATTRIBUTES = [
    ROLE,
    ARIA_CONTROLS,
    ARIA_CURRENT,
    ARIA_LABEL,
    ARIA_HIDDEN,
    ARIA_ORIENTATION,
    TAB_INDEX,
    DISABLED
];
const SLIDE = "slide";
const LOOP = "loop";
const FADE = "fade";
function Slide$1(Splide2, index, slideIndex, slide) {
    const { on , emit , bind , destroy: destroyEvents  } = EventInterface(Splide2);
    const { Components , root , options  } = Splide2;
    const { isNavigation , updateOnMove  } = options;
    const { resolve  } = Components.Direction;
    const styles = getAttribute(slide, "style");
    const isClone = slideIndex > -1;
    const container = child(slide, `.${CLASS_CONTAINER}`);
    const focusableNodes = options.focusableNodes && queryAll(slide, options.focusableNodes);
    let destroyed;
    function mount() {
        if (!isClone) slide.id = `${root.id}-slide${pad(index + 1)}`;
        bind(slide, "click keydown", (e)=>{
            emit(e.type === "click" ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, self, e);
        });
        on([
            EVENT_REFRESH,
            EVENT_REPOSITIONED,
            EVENT_SHIFTED,
            EVENT_MOVED,
            EVENT_SCROLLED
        ], update);
        on(EVENT_NAVIGATION_MOUNTED, initNavigation);
        if (updateOnMove) on(EVENT_MOVE, onMove);
    }
    function destroy() {
        destroyed = true;
        destroyEvents();
        removeClass(slide, STATUS_CLASSES);
        removeAttribute(slide, ALL_ATTRIBUTES);
        setAttribute(slide, "style", styles);
    }
    function initNavigation() {
        const idx = isClone ? slideIndex : index;
        const label = format(options.i18n.slideX, idx + 1);
        const controls = Splide2.splides.map((target)=>target.splide.root.id
        ).join(" ");
        setAttribute(slide, ARIA_LABEL, label);
        setAttribute(slide, ARIA_CONTROLS, controls);
        setAttribute(slide, ROLE, "menuitem");
        updateActivity(isActive());
    }
    function onMove() {
        if (!destroyed) update();
    }
    function update() {
        if (!destroyed) {
            const { index: currIndex  } = Splide2;
            updateActivity(isActive());
            updateVisibility(isVisible());
            toggleClass(slide, CLASS_PREV, index === currIndex - 1);
            toggleClass(slide, CLASS_NEXT, index === currIndex + 1);
        }
    }
    function updateActivity(active) {
        if (active !== hasClass(slide, CLASS_ACTIVE)) {
            toggleClass(slide, CLASS_ACTIVE, active);
            if (isNavigation) setAttribute(slide, ARIA_CURRENT, active || null);
            emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, self);
        }
    }
    function updateVisibility(visible) {
        const hidden = !visible && (!isActive() || isClone);
        setAttribute(slide, ARIA_HIDDEN, hidden || null);
        setAttribute(slide, TAB_INDEX, !hidden && options.slideFocus ? 0 : null);
        if (focusableNodes) focusableNodes.forEach((node)=>{
            setAttribute(node, TAB_INDEX, hidden ? -1 : null);
        });
        if (visible !== hasClass(slide, CLASS_VISIBLE)) {
            toggleClass(slide, CLASS_VISIBLE, visible);
            emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, self);
        }
    }
    function style$1(prop, value, useContainer) {
        style(useContainer && container || slide, prop, value);
    }
    function isActive() {
        const { index: curr  } = Splide2;
        return curr === index || options.cloneStatus && curr === slideIndex;
    }
    function isVisible() {
        if (Splide2.is(FADE)) return isActive();
        const trackRect = rect(Components.Elements.track);
        const slideRect = rect(slide);
        const left = resolve("left");
        const right = resolve("right");
        return floor(trackRect[left]) <= ceil(slideRect[left]) && floor(slideRect[right]) <= ceil(trackRect[right]);
    }
    function isWithin(from, distance) {
        let diff = abs(from - index);
        if (!isClone && (options.rewind || Splide2.is(LOOP))) diff = min(diff, Splide2.length - diff);
        return diff <= distance;
    }
    const self = {
        index,
        slideIndex,
        slide,
        container,
        isClone,
        mount,
        destroy,
        update,
        style: style$1,
        isWithin
    };
    return self;
}
function Slides(Splide2, Components2, options) {
    const { on , emit , bind  } = EventInterface(Splide2);
    const { slides , list  } = Components2.Elements;
    const Slides2 = [];
    function mount() {
        init();
        on(EVENT_REFRESH, refresh);
        on([
            EVENT_MOUNTED,
            EVENT_REFRESH
        ], ()=>{
            Slides2.sort((Slide1, Slide2)=>Slide1.index - Slide2.index
            );
        });
    }
    function init() {
        slides.forEach((slide, index)=>{
            register(slide, index, -1);
        });
    }
    function destroy() {
        forEach$1((Slide2)=>{
            Slide2.destroy();
        });
        empty(Slides2);
    }
    function refresh() {
        destroy();
        init();
    }
    function update() {
        forEach$1((Slide2)=>{
            Slide2.update();
        });
    }
    function register(slide, index, slideIndex) {
        const object = Slide$1(Splide2, index, slideIndex, slide);
        object.mount();
        Slides2.push(object);
    }
    function get(excludeClones) {
        return excludeClones ? filter((Slide2)=>!Slide2.isClone
        ) : Slides2;
    }
    function getIn(page) {
        const { Controller: Controller1  } = Components2;
        const index = Controller1.toIndex(page);
        const max1 = Controller1.hasFocus() ? 1 : options.perPage;
        return filter((Slide2)=>between(Slide2.index, index, index + max1 - 1)
        );
    }
    function getAt(index) {
        return filter(index)[0];
    }
    function add(items, index) {
        forEach(items, (slide)=>{
            if (isString(slide)) slide = parseHtml(slide);
            if (isHTMLElement(slide)) {
                const ref = slides[index];
                ref ? before(slide, ref) : append(list, slide);
                addClass(slide, options.classes.slide);
                observeImages(slide, emit.bind(null, EVENT_RESIZE));
            }
        });
        emit(EVENT_REFRESH);
    }
    function remove$1(matcher) {
        remove(filter(matcher).map((Slide2)=>Slide2.slide
        ));
        emit(EVENT_REFRESH);
    }
    function forEach$1(iteratee, excludeClones) {
        get(excludeClones).forEach(iteratee);
    }
    function filter(matcher) {
        return Slides2.filter(isFunction(matcher) ? matcher : (Slide2)=>isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index)
        );
    }
    function style1(prop, value, useContainer) {
        forEach$1((Slide2)=>{
            Slide2.style(prop, value, useContainer);
        });
    }
    function observeImages(elm, callback) {
        const images = queryAll(elm, "img");
        let { length  } = images;
        if (length) images.forEach((img)=>{
            bind(img, "load error", ()=>{
                if (!--length) callback();
            });
        });
        else callback();
    }
    function getLength(excludeClones) {
        return excludeClones ? slides.length : Slides2.length;
    }
    function isEnough() {
        return Slides2.length > options.perPage;
    }
    return {
        mount,
        destroy,
        update,
        register,
        get,
        getIn,
        getAt,
        add,
        remove: remove$1,
        forEach: forEach$1,
        filter,
        style: style1,
        getLength,
        isEnough
    };
}
function Layout(Splide2, Components2, options) {
    const { on , bind , emit  } = EventInterface(Splide2);
    const { Slides: Slides1  } = Components2;
    const { resolve  } = Components2.Direction;
    const { root , track , list  } = Components2.Elements;
    const { getAt  } = Slides1;
    let vertical;
    let rootRect;
    function mount() {
        init();
        bind(window, "resize load", Throttle(emit.bind(this, EVENT_RESIZE)));
        on([
            EVENT_UPDATED,
            EVENT_REFRESH
        ], init);
        on(EVENT_RESIZE, resize);
    }
    function init() {
        rootRect = null;
        vertical = options.direction === TTB;
        style(root, "maxWidth", unit(options.width));
        style(track, resolve("paddingLeft"), cssPadding(false));
        style(track, resolve("paddingRight"), cssPadding(true));
        resize();
    }
    function resize() {
        const newRect = rect(root);
        if (!rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height) {
            style(track, "height", cssTrackHeight());
            Slides1.style(resolve("marginRight"), unit(options.gap));
            Slides1.style("width", cssSlideWidth() || null);
            setSlidesHeight();
            rootRect = newRect;
            emit(EVENT_RESIZED);
        }
    }
    function setSlidesHeight() {
        Slides1.style("height", cssSlideHeight() || null, true);
    }
    function cssPadding(right) {
        const { padding  } = options;
        const prop = resolve(right ? "right" : "left");
        return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || "0px";
    }
    function cssTrackHeight() {
        let height = "";
        if (vertical) {
            height = cssHeight();
            assert(height, "height or heightRatio is missing.");
            height = `calc(${height} - ${cssPadding(false)} - ${cssPadding(true)})`;
        }
        return height;
    }
    function cssHeight() {
        return unit(options.height || rect(list).width * options.heightRatio);
    }
    function cssSlideWidth() {
        return options.autoWidth ? "" : unit(options.fixedWidth) || (vertical ? "" : cssSlideSize());
    }
    function cssSlideHeight() {
        return unit(options.fixedHeight) || (vertical ? options.autoHeight ? "" : cssSlideSize() : cssHeight());
    }
    function cssSlideSize() {
        const gap = unit(options.gap);
        return `calc((100%${gap && ` + ${gap}`})/${options.perPage || 1}${gap && ` - ${gap}`})`;
    }
    function listSize() {
        return rect(list)[resolve("width")];
    }
    function slideSize(index, withoutGap) {
        const Slide1 = getAt(index || 0);
        return Slide1 ? rect(Slide1.slide)[resolve("width")] + (withoutGap ? 0 : getGap()) : 0;
    }
    function totalSize(index, withoutGap) {
        const Slide2 = getAt(index);
        if (Slide2) {
            const right = rect(Slide2.slide)[resolve("right")];
            const left = rect(list)[resolve("left")];
            return abs(right - left) + (withoutGap ? 0 : getGap());
        }
        return 0;
    }
    function sliderSize() {
        return totalSize(Splide2.length - 1, true) - totalSize(-1, true);
    }
    function getGap() {
        const Slide3 = getAt(0);
        return Slide3 && parseFloat(style(Slide3.slide, resolve("marginRight"))) || 0;
    }
    function getPadding(right) {
        return parseFloat(style(track, resolve(`padding${right ? "Right" : "Left"}`))) || 0;
    }
    return {
        mount,
        listSize,
        slideSize,
        sliderSize,
        totalSize,
        getPadding
    };
}
function Clones(Splide2, Components2, options) {
    const { on , emit  } = EventInterface(Splide2);
    const { Elements: Elements1 , Slides: Slides2  } = Components2;
    const { resolve  } = Components2.Direction;
    const clones = [];
    let cloneCount;
    function mount() {
        init();
        on(EVENT_REFRESH, refresh);
        on([
            EVENT_UPDATED,
            EVENT_RESIZE
        ], observe);
    }
    function init() {
        if (cloneCount = computeCloneCount()) {
            generate(cloneCount);
            emit(EVENT_RESIZE);
        }
    }
    function destroy() {
        remove(clones);
        empty(clones);
    }
    function refresh() {
        destroy();
        init();
    }
    function observe() {
        if (cloneCount < computeCloneCount()) emit(EVENT_REFRESH);
    }
    function generate(count) {
        const slides = Slides2.get().slice();
        const { length  } = slides;
        if (length) {
            while(slides.length < count)push(slides, slides);
            push(slides.slice(-count), slides.slice(0, count)).forEach((Slide4, index)=>{
                const isHead = index < count;
                const clone = cloneDeep(Slide4.slide, index);
                isHead ? before(clone, slides[0].slide) : append(Elements1.list, clone);
                push(clones, clone);
                Slides2.register(clone, index - count + (isHead ? 0 : length), Slide4.index);
            });
        }
    }
    function cloneDeep(elm, index) {
        const clone = elm.cloneNode(true);
        addClass(clone, options.classes.clone);
        clone.id = `${Splide2.root.id}-clone${pad(index + 1)}`;
        return clone;
    }
    function computeCloneCount() {
        let { clones: clones2  } = options;
        if (!Splide2.is(LOOP)) clones2 = 0;
        else if (!clones2) {
            const fixedSize = measure(Elements1.list, options[resolve("fixedWidth")]);
            const fixedCount = fixedSize && ceil(rect(Elements1.track)[resolve("width")] / fixedSize);
            const baseCount = fixedCount || options[resolve("autoWidth")] && Splide2.length || options.perPage;
            clones2 = baseCount * (options.drag ? (options.flickMaxPages || 1) + 1 : 2);
        }
        return clones2;
    }
    return {
        mount,
        destroy
    };
}
function Move(Splide2, Components2, options) {
    const { on , emit  } = EventInterface(Splide2);
    const { slideSize , getPadding , totalSize , listSize , sliderSize  } = Components2.Layout;
    const { resolve , orient  } = Components2.Direction;
    const { list , track  } = Components2.Elements;
    let Transition;
    function mount() {
        Transition = Components2.Transition;
        on([
            EVENT_MOUNTED,
            EVENT_RESIZED,
            EVENT_UPDATED,
            EVENT_REFRESH
        ], reposition);
    }
    function destroy() {
        removeAttribute(list, "style");
    }
    function reposition() {
        if (!isBusy()) {
            Components2.Scroll.cancel();
            jump(Splide2.index);
            emit(EVENT_REPOSITIONED);
        }
    }
    function move(dest, index, prev, callback) {
        if (!isBusy()) {
            const { set  } = Splide2.state;
            const position = getPosition();
            if (dest !== index) {
                Transition.cancel();
                translate(shift(position, dest > index), true);
            }
            set(MOVING);
            emit(EVENT_MOVE, index, prev, dest);
            Transition.start(index, ()=>{
                set(IDLE);
                emit(EVENT_MOVED, index, prev, dest);
                if (options.trimSpace === "move" && dest !== prev && position === getPosition()) Components2.Controller.go(dest > prev ? ">" : "<", false, callback);
                else callback && callback();
            });
        }
    }
    function jump(index) {
        translate(toPosition(index, true));
    }
    function translate(position, preventLoop) {
        if (!Splide2.is(FADE)) {
            const destination = preventLoop ? position : loop(position);
            list.style.transform = `translate${resolve("X")}(${destination}px)`;
            position !== destination && emit(EVENT_SHIFTED);
        }
    }
    function loop(position) {
        if (Splide2.is(LOOP)) {
            const diff = orient(position - getPosition());
            const exceededMin = exceededLimit(false, position) && diff < 0;
            const exceededMax = exceededLimit(true, position) && diff > 0;
            if (exceededMin || exceededMax) position = shift(position, exceededMax);
        }
        return position;
    }
    function shift(position, backwards) {
        const excess = position - getLimit(backwards);
        const size = sliderSize();
        position -= orient(size * (ceil(abs(excess) / size) || 1)) * (backwards ? 1 : -1);
        return position;
    }
    function cancel() {
        translate(getPosition());
        Transition.cancel();
    }
    function toIndex(position) {
        const Slides3 = Components2.Slides.get();
        let index = 0;
        let minDistance = Infinity;
        for(let i = 0; i < Slides3.length; i++){
            const slideIndex = Slides3[i].index;
            const distance = abs(toPosition(slideIndex, true) - position);
            if (distance <= minDistance) {
                minDistance = distance;
                index = slideIndex;
            } else break;
        }
        return index;
    }
    function toPosition(index, trimming) {
        const position = orient(totalSize(index - 1) - offset(index));
        return trimming ? trim(position) : position;
    }
    function getPosition() {
        const left = resolve("left");
        return rect(list)[left] - rect(track)[left] + orient(getPadding(false));
    }
    function trim(position) {
        if (options.trimSpace && Splide2.is(SLIDE)) position = clamp(position, 0, orient(sliderSize() - listSize()));
        return position;
    }
    function offset(index) {
        const { focus: focus1  } = options;
        return focus1 === "center" ? (listSize() - slideSize(index, true)) / 2 : +focus1 * slideSize(index) || 0;
    }
    function getLimit(max2) {
        return toPosition(max2 ? Components2.Controller.getEnd() : 0, !!options.trimSpace);
    }
    function isBusy() {
        return Splide2.state.is(MOVING) && options.waitForTransition;
    }
    function exceededLimit(max3, position) {
        position = isUndefined(position) ? getPosition() : position;
        const exceededMin = max3 !== true && orient(position) < orient(getLimit(false));
        const exceededMax = max3 !== false && orient(position) > orient(getLimit(true));
        return exceededMin || exceededMax;
    }
    return {
        mount,
        destroy,
        move,
        jump,
        translate,
        shift,
        cancel,
        toIndex,
        toPosition,
        getPosition,
        getLimit,
        isBusy,
        exceededLimit
    };
}
function Controller(Splide2, Components2, options) {
    const { on  } = EventInterface(Splide2);
    const { Move: Move1  } = Components2;
    const { getPosition , getLimit  } = Move1;
    const { isEnough , getLength  } = Components2.Slides;
    const isLoop = Splide2.is(LOOP);
    const isSlide = Splide2.is(SLIDE);
    let currIndex = options.start || 0;
    let prevIndex = currIndex;
    let slideCount;
    let perMove;
    let perPage;
    function mount() {
        init();
        on([
            EVENT_UPDATED,
            EVENT_REFRESH
        ], init, DEFAULT_EVENT_PRIORITY - 1);
    }
    function init() {
        slideCount = getLength(true);
        perMove = options.perMove;
        perPage = options.perPage;
        currIndex = clamp(currIndex, 0, slideCount - 1);
    }
    function go(control, allowSameIndex, callback) {
        const dest = parse(control);
        if (options.useScroll) scroll(dest, true, true, options.speed, callback);
        else {
            const index = loop(dest);
            if (index > -1 && !Move1.isBusy() && (allowSameIndex || index !== currIndex)) {
                setIndex(index);
                Move1.move(dest, index, prevIndex, callback);
            }
        }
    }
    function scroll(destination, useIndex, snap, duration, callback) {
        const dest = useIndex ? destination : toDest(destination);
        Components2.Scroll.scroll(useIndex || snap ? Move1.toPosition(dest, true) : destination, duration, ()=>{
            setIndex(Move1.toIndex(Move1.getPosition()));
            callback && callback();
        });
    }
    function parse(control) {
        let index = currIndex;
        if (isString(control)) {
            const [, indicator, number] = control.match(/([+\-<>])(\d+)?/) || [];
            if (indicator === "+" || indicator === "-") index = computeDestIndex(currIndex + +`${indicator}${+number || 1}`, currIndex, true);
            else if (indicator === ">") index = number ? toIndex(+number) : getNext(true);
            else if (indicator === "<") index = getPrev(true);
        } else index = isLoop ? control : clamp(control, 0, getEnd());
        return index;
    }
    function getNext(destination) {
        return getAdjacent(false, destination);
    }
    function getPrev(destination) {
        return getAdjacent(true, destination);
    }
    function getAdjacent(prev, destination) {
        const number = perMove || (hasFocus() ? 1 : perPage);
        const dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex);
        if (dest === -1 && isSlide) {
            if (!approximatelyEqual(getPosition(), getLimit(!prev), 1)) return prev ? 0 : getEnd();
        }
        return destination ? dest : loop(dest);
    }
    function computeDestIndex(dest, from, incremental) {
        if (isEnough()) {
            const end = getEnd();
            if (dest < 0 || dest > end) {
                if (between(0, dest, from, true) || between(end, from, dest, true)) dest = toIndex(toPage(dest));
                else {
                    if (isLoop) dest = perMove || hasFocus() ? dest : dest < 0 ? -(slideCount % perPage || perPage) : slideCount;
                    else if (options.rewind) dest = dest < 0 ? end : 0;
                    else dest = -1;
                }
            } else if (!incremental && dest !== from) dest = perMove ? dest : toIndex(toPage(from) + (dest < from ? -1 : 1));
        } else dest = -1;
        return dest;
    }
    function getEnd() {
        let end = slideCount - perPage;
        if (hasFocus() || isLoop && perMove) end = slideCount - 1;
        return max(end, 0);
    }
    function loop(index) {
        if (isLoop) return isEnough() ? index % slideCount + (index < 0 ? slideCount : 0) : -1;
        return index;
    }
    function toIndex(page) {
        return clamp(hasFocus() ? page : perPage * page, 0, getEnd());
    }
    function toPage(index) {
        if (!hasFocus()) {
            index = between(index, slideCount - perPage, slideCount - 1) ? slideCount - 1 : index;
            index = floor(index / perPage);
        }
        return index;
    }
    function toDest(destination) {
        const closest = Move1.toIndex(destination);
        return isSlide ? clamp(closest, 0, getEnd()) : closest;
    }
    function setIndex(index) {
        if (index !== currIndex) {
            prevIndex = currIndex;
            currIndex = index;
        }
    }
    function getIndex(prev) {
        return prev ? prevIndex : currIndex;
    }
    function hasFocus() {
        return !isUndefined(options.focus) || options.isNavigation;
    }
    return {
        mount,
        go,
        scroll,
        getNext,
        getPrev,
        getAdjacent,
        getEnd,
        setIndex,
        getIndex,
        toIndex,
        toPage,
        toDest,
        hasFocus
    };
}
const XML_NAME_SPACE = "http://www.w3.org/2000/svg";
const PATH = "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";
const SIZE = 40;
function Arrows(Splide2, Components2, options) {
    const { on , bind , emit  } = EventInterface(Splide2);
    const { classes , i18n  } = options;
    const { Elements: Elements2 , Controller: Controller2  } = Components2;
    let wrapper = Elements2.arrows;
    let prev = Elements2.prev;
    let next = Elements2.next;
    let created;
    const arrows = {
    };
    function mount() {
        init();
        on(EVENT_UPDATED, init);
    }
    function init() {
        if (options.arrows) {
            if (!prev || !next) createArrows();
        }
        if (prev && next) {
            if (!arrows.prev) {
                const { id  } = Elements2.track;
                setAttribute(prev, ARIA_CONTROLS, id);
                setAttribute(next, ARIA_CONTROLS, id);
                arrows.prev = prev;
                arrows.next = next;
                listen();
                emit(EVENT_ARROWS_MOUNTED, prev, next);
            } else display(wrapper, options.arrows === false ? "none" : "");
        }
    }
    function destroy() {
        if (created) remove(wrapper);
        else {
            removeAttribute(prev, ALL_ATTRIBUTES);
            removeAttribute(next, ALL_ATTRIBUTES);
        }
    }
    function listen() {
        const { go  } = Controller2;
        on([
            EVENT_MOUNTED,
            EVENT_MOVED,
            EVENT_UPDATED,
            EVENT_REFRESH,
            EVENT_SCROLLED
        ], update);
        bind(next, "click", ()=>{
            go(">", true);
        });
        bind(prev, "click", ()=>{
            go("<", true);
        });
    }
    function createArrows() {
        wrapper = create("div", classes.arrows);
        prev = createArrow(true);
        next = createArrow(false);
        created = true;
        append(wrapper, [
            prev,
            next
        ]);
        before(wrapper, child(options.arrows === "slider" && Elements2.slider || Splide2.root));
    }
    function createArrow(prev2) {
        const arrow = `<button class="${classes.arrow} ${prev2 ? classes.prev : classes.next}" type="button"><svg xmlns="${XML_NAME_SPACE}" viewBox="0 0 ${SIZE} ${SIZE}" width="${SIZE}" height="${SIZE}"><path d="${options.arrowPath || PATH}" />`;
        return parseHtml(arrow);
    }
    function update() {
        const index = Splide2.index;
        const prevIndex = Controller2.getPrev();
        const nextIndex = Controller2.getNext();
        const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;
        const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;
        prev.disabled = prevIndex < 0;
        next.disabled = nextIndex < 0;
        setAttribute(prev, ARIA_LABEL, prevLabel);
        setAttribute(next, ARIA_LABEL, nextLabel);
        emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);
    }
    return {
        arrows,
        mount,
        destroy
    };
}
const INTERVAL_DATA_ATTRIBUTE = `${DATA_ATTRIBUTE}-interval`;
function Autoplay(Splide2, Components2, options) {
    const { on , bind , emit  } = EventInterface(Splide2);
    const interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, ">"), update);
    const { isPaused  } = interval;
    const { Elements: Elements3  } = Components2;
    let hovered;
    let focused;
    let paused;
    function mount() {
        const { autoplay  } = options;
        if (autoplay) {
            initButton(true);
            initButton(false);
            listen();
            if (autoplay !== "pause") play();
        }
    }
    function initButton(forPause) {
        const prop = forPause ? "pause" : "play";
        const button = Elements3[prop];
        if (button) {
            setAttribute(button, ARIA_CONTROLS, Elements3.track.id);
            setAttribute(button, ARIA_LABEL, options.i18n[prop]);
            bind(button, "click", forPause ? pause : play);
        }
    }
    function listen() {
        const { root  } = Elements3;
        if (options.pauseOnHover) bind(root, "mouseenter mouseleave", (e)=>{
            hovered = e.type === "mouseenter";
            autoToggle();
        });
        if (options.pauseOnFocus) bind(root, "focusin focusout", (e)=>{
            focused = e.type === "focusin";
            autoToggle();
        });
        on([
            EVENT_MOVE,
            EVENT_SCROLL,
            EVENT_REFRESH
        ], interval.rewind);
        on(EVENT_MOVE, updateInterval);
    }
    function play() {
        if (isPaused() && Components2.Slides.isEnough()) {
            interval.start(!options.resetProgress);
            focused = hovered = paused = false;
            emit(EVENT_AUTOPLAY_PLAY);
        }
    }
    function pause(manual = true) {
        if (!isPaused()) {
            interval.pause();
            emit(EVENT_AUTOPLAY_PAUSE);
        }
        paused = manual;
    }
    function autoToggle() {
        if (!paused) {
            if (!hovered && !focused) play();
            else pause(false);
        }
    }
    function update(rate) {
        const { bar  } = Elements3;
        bar && style(bar, "width", `${rate * 100}%`);
        emit(EVENT_AUTOPLAY_PLAYING, rate);
    }
    function updateInterval() {
        const Slide5 = Components2.Slides.getAt(Splide2.index);
        interval.set(Slide5 && +getAttribute(Slide5.slide, INTERVAL_DATA_ATTRIBUTE) || options.interval);
    }
    return {
        mount,
        destroy: interval.cancel,
        play,
        pause,
        isPaused
    };
}
function Cover(Splide2, Components2, options) {
    const { on  } = EventInterface(Splide2);
    function mount() {
        if (options.cover) {
            on(EVENT_LAZYLOAD_LOADED, (img, Slide6)=>{
                toggle(true, img, Slide6);
            });
            on([
                EVENT_MOUNTED,
                EVENT_UPDATED,
                EVENT_REFRESH
            ], apply.bind(null, true));
        }
    }
    function destroy() {
        apply(false);
    }
    function apply(cover) {
        Components2.Slides.forEach((Slide7)=>{
            const img = child(Slide7.container || Slide7.slide, "img");
            if (img && img.src) toggle(cover, img, Slide7);
        });
    }
    function toggle(cover, img, Slide8) {
        Slide8.style("background", cover ? `center/cover no-repeat url("${img.src}")` : "", true);
        display(img, cover ? "none" : "");
    }
    return {
        mount,
        destroy
    };
}
const BOUNCE_DIFF_THRESHOLD = 10;
const BOUNCE_DURATION = 600;
const FRICTION_FACTOR = 0.6;
const BASE_VELOCITY = 1.5;
const MIN_DURATION = 800;
function Scroll(Splide2, Components2, options) {
    const { on , emit  } = EventInterface(Splide2);
    const { Move: Move2  } = Components2;
    const { getPosition , getLimit , exceededLimit  } = Move2;
    let interval;
    let scrollCallback;
    function mount() {
        on(EVENT_MOVE, clear);
        on([
            EVENT_UPDATED,
            EVENT_REFRESH
        ], cancel);
    }
    function scroll(destination, duration, callback, suppressConstraint) {
        const start = getPosition();
        let friction = 1;
        duration = duration || computeDuration(abs(destination - start));
        scrollCallback = callback;
        clear();
        interval = RequestInterval(duration, onScrolled, (rate)=>{
            const position = getPosition();
            const target = start + (destination - start) * easing(rate);
            const diff = (target - getPosition()) * friction;
            Move2.translate(position + diff);
            if (Splide2.is(SLIDE) && !suppressConstraint && exceededLimit()) {
                friction *= FRICTION_FACTOR;
                if (abs(diff) < BOUNCE_DIFF_THRESHOLD) bounce(exceededLimit(false));
            }
        }, 1);
        emit(EVENT_SCROLL);
        interval.start();
    }
    function bounce(backwards) {
        scroll(getLimit(!backwards), BOUNCE_DURATION, null, true);
    }
    function onScrolled() {
        const position = getPosition();
        const index = Move2.toIndex(position);
        if (!between(index, 0, Splide2.length - 1)) Move2.translate(Move2.shift(position, index > 0), true);
        scrollCallback && scrollCallback();
        emit(EVENT_SCROLLED);
    }
    function computeDuration(distance) {
        return max(distance / BASE_VELOCITY, MIN_DURATION);
    }
    function clear() {
        if (interval) interval.cancel();
    }
    function cancel() {
        if (interval && !interval.isPaused()) {
            clear();
            onScrolled();
        }
    }
    function easing(t) {
        const { easingFunc  } = options;
        return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);
    }
    return {
        mount,
        destroy: clear,
        scroll,
        cancel
    };
}
const SCROLL_LISTENER_OPTIONS = {
    passive: false,
    capture: true
};
const FRICTION = 5;
const LOG_INTERVAL = 200;
const POINTER_DOWN_EVENTS = "touchstart mousedown";
const POINTER_MOVE_EVENTS = "touchmove mousemove";
const POINTER_UP_EVENTS = "touchend touchcancel mouseup";
function Drag(Splide2, Components2, options) {
    const { on , emit , bind , unbind  } = EventInterface(Splide2);
    const { Move: Move3 , Scroll: Scroll1 , Controller: Controller3  } = Components2;
    const { track  } = Components2.Elements;
    const { resolve , orient  } = Components2.Direction;
    const { getPosition , exceededLimit  } = Move3;
    let basePosition;
    let baseEvent;
    let prevBaseEvent;
    let lastEvent;
    let isFree;
    let dragging;
    let hasExceeded = false;
    let clickPrevented;
    let disabled;
    let target;
    function mount() {
        bind(track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS);
        bind(track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS);
        bind(track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS);
        bind(track, "click", onClick, {
            capture: true
        });
        bind(track, "dragstart", prevent);
        on([
            EVENT_MOUNTED,
            EVENT_UPDATED
        ], init);
    }
    function init() {
        const { drag  } = options;
        disable(!drag);
        isFree = drag === "free";
    }
    function onPointerDown(e) {
        if (!disabled) {
            const { noDrag  } = options;
            const isTouch = isTouchEvent(e);
            const isDraggable = !noDrag || !matches(e.target, noDrag);
            clickPrevented = false;
            if (isDraggable && (isTouch || !e.button)) {
                if (!Move3.isBusy()) {
                    target = isTouch ? track : window;
                    prevBaseEvent = null;
                    lastEvent = null;
                    bind(target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS);
                    bind(target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS);
                    Move3.cancel();
                    Scroll1.cancel();
                    save(e);
                } else prevent(e, true);
            }
        }
    }
    function onPointerMove(e) {
        if (!lastEvent) emit(EVENT_DRAG);
        lastEvent = e;
        if (e.cancelable) {
            const diff = coordOf(e) - coordOf(baseEvent);
            if (dragging) {
                Move3.translate(basePosition + constrain(diff));
                const expired = timeOf(e) - timeOf(baseEvent) > LOG_INTERVAL;
                const exceeded = hasExceeded !== (hasExceeded = exceededLimit());
                if (expired || exceeded) save(e);
                emit(EVENT_DRAGGING);
                clickPrevented = true;
                prevent(e);
            } else {
                let { dragMinThreshold: thresholds  } = options;
                thresholds = isObject(thresholds) ? thresholds : {
                    mouse: 0,
                    touch: +thresholds || 10
                };
                dragging = abs(diff) > (isTouchEvent(e) ? thresholds.touch : thresholds.mouse);
                if (isSliderDirection()) prevent(e);
            }
        }
    }
    function onPointerUp(e) {
        unbind(target, POINTER_MOVE_EVENTS, onPointerMove);
        unbind(target, POINTER_UP_EVENTS, onPointerUp);
        const { index  } = Splide2;
        if (lastEvent) {
            if (dragging || e.cancelable && isSliderDirection()) {
                const velocity = computeVelocity(e);
                const destination = computeDestination(velocity);
                if (isFree) Controller3.scroll(destination);
                else if (Splide2.is(FADE)) Controller3.go(index + orient(sign(velocity)));
                else Controller3.go(Controller3.toDest(destination), true);
                prevent(e);
            }
            emit(EVENT_DRAGGED);
        } else if (!isFree && getPosition() !== Move3.toPosition(index)) Controller3.go(index, true);
        dragging = false;
    }
    function save(e) {
        prevBaseEvent = baseEvent;
        baseEvent = e;
        basePosition = getPosition();
    }
    function onClick(e) {
        if (!disabled && clickPrevented) prevent(e, true);
    }
    function isSliderDirection() {
        const diffX = abs(coordOf(lastEvent) - coordOf(baseEvent));
        const diffY = abs(coordOf(lastEvent, true) - coordOf(baseEvent, true));
        return diffX > diffY;
    }
    function computeVelocity(e) {
        if (Splide2.is(LOOP) || !hasExceeded) {
            const base = baseEvent === lastEvent && prevBaseEvent || baseEvent;
            const diffCoord = coordOf(lastEvent) - coordOf(base);
            const diffTime = timeOf(e) - timeOf(base);
            const isFlick = timeOf(e) - timeOf(lastEvent) < LOG_INTERVAL;
            if (diffTime && isFlick) return diffCoord / diffTime;
        }
        return 0;
    }
    function computeDestination(velocity) {
        return getPosition() + sign(velocity) * min(abs(velocity) * (options.flickPower || 600), isFree ? Infinity : Components2.Layout.listSize() * (options.flickMaxPages || 1));
    }
    function coordOf(e, orthogonal) {
        return (isTouchEvent(e) ? e.touches[0] : e)[`page${resolve(orthogonal ? "Y" : "X")}`];
    }
    function timeOf(e) {
        return e.timeStamp;
    }
    function constrain(diff) {
        return diff / (hasExceeded && Splide2.is(SLIDE) ? FRICTION : 1);
    }
    function isTouchEvent(e) {
        return typeof TouchEvent !== "undefined" && e instanceof TouchEvent;
    }
    function isDragging() {
        return dragging;
    }
    function disable(value) {
        disabled = value;
    }
    return {
        mount,
        disable,
        isDragging
    };
}
const IE_ARROW_KEYS = [
    "Left",
    "Right",
    "Up",
    "Down"
];
const KEYBOARD_EVENT = "keydown";
function Keyboard(Splide2, Components2, options) {
    const { on , bind , unbind  } = EventInterface(Splide2);
    const { root  } = Splide2;
    const { resolve  } = Components2.Direction;
    let target;
    let disabled;
    function mount() {
        init();
        on(EVENT_UPDATED, onUpdated);
        on(EVENT_MOVE, onMove);
    }
    function init() {
        const { keyboard  } = options;
        if (keyboard) {
            if (keyboard === "focused") {
                target = root;
                setAttribute(root, TAB_INDEX, 0);
            } else target = window;
            bind(target, KEYBOARD_EVENT, onKeydown);
        }
    }
    function destroy() {
        unbind(target, KEYBOARD_EVENT);
        if (isHTMLElement(target)) removeAttribute(target, TAB_INDEX);
    }
    function disable(value) {
        disabled = value;
    }
    function onMove() {
        const _disabled = disabled;
        disabled = true;
        nextTick(()=>{
            disabled = _disabled;
        });
    }
    function onUpdated() {
        destroy();
        init();
    }
    function onKeydown(e) {
        if (!disabled) {
            const { key  } = e;
            const normalizedKey = includes(IE_ARROW_KEYS, key) ? `Arrow${key}` : key;
            if (normalizedKey === resolve("ArrowLeft")) Splide2.go("<");
            else if (normalizedKey === resolve("ArrowRight")) Splide2.go(">");
        }
    }
    return {
        mount,
        destroy,
        disable
    };
}
const SRC_DATA_ATTRIBUTE = `${DATA_ATTRIBUTE}-lazy`;
const SRCSET_DATA_ATTRIBUTE = `${SRC_DATA_ATTRIBUTE}-srcset`;
const IMAGE_SELECTOR = `[${SRC_DATA_ATTRIBUTE}], [${SRCSET_DATA_ATTRIBUTE}]`;
function LazyLoad(Splide2, Components2, options) {
    const { on , off , bind , emit  } = EventInterface(Splide2);
    const isSequential = options.lazyLoad === "sequential";
    let images = [];
    let index = 0;
    function mount() {
        if (options.lazyLoad) {
            init();
            on(EVENT_REFRESH, refresh);
            if (!isSequential) on([
                EVENT_MOUNTED,
                EVENT_REFRESH,
                EVENT_MOVED,
                EVENT_SCROLLED
            ], observe);
        }
    }
    function refresh() {
        destroy();
        init();
    }
    function init() {
        Components2.Slides.forEach((_Slide)=>{
            queryAll(_Slide.slide, IMAGE_SELECTOR).forEach((_img)=>{
                const src = getAttribute(_img, SRC_DATA_ATTRIBUTE);
                const srcset = getAttribute(_img, SRCSET_DATA_ATTRIBUTE);
                if (src !== _img.src || srcset !== _img.srcset) {
                    const className = options.classes.spinner;
                    const parent = _img.parentElement;
                    const _spinner = child(parent, `.${className}`) || create("span", className, parent);
                    setAttribute(_spinner, ROLE, "presentation");
                    images.push({
                        _img,
                        _Slide,
                        src,
                        srcset,
                        _spinner
                    });
                    !_img.src && display(_img, "none");
                }
            });
        });
        if (isSequential) loadNext();
    }
    function destroy() {
        index = 0;
        images = [];
    }
    function observe() {
        images = images.filter((data)=>{
            const distance = options.perPage * ((options.preloadPages || 1) + 1) - 1;
            if (data._Slide.isWithin(Splide2.index, distance)) return load(data);
            return true;
        });
        if (!images.length) off(EVENT_MOVED);
    }
    function load(data) {
        const { _img  } = data;
        addClass(data._Slide.slide, CLASS_LOADING);
        bind(_img, "load error", (e)=>{
            onLoad(data, e.type === "error");
        });
        [
            "src",
            "srcset"
        ].forEach((name)=>{
            if (data[name]) {
                setAttribute(_img, name, data[name]);
                removeAttribute(_img, name === "src" ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE);
            }
        });
    }
    function onLoad(data, error) {
        const { _Slide  } = data;
        removeClass(_Slide.slide, CLASS_LOADING);
        if (!error) {
            remove(data._spinner);
            display(data._img, "");
            emit(EVENT_LAZYLOAD_LOADED, data._img, _Slide);
            emit(EVENT_RESIZE);
        }
        if (isSequential) loadNext();
    }
    function loadNext() {
        if (index < images.length) load(images[index++]);
    }
    return {
        mount,
        destroy
    };
}
function Pagination(Splide2, Components2, options) {
    const { on , emit , bind , unbind  } = EventInterface(Splide2);
    const { Slides: Slides4 , Elements: Elements4 , Controller: Controller4  } = Components2;
    const { hasFocus , getIndex  } = Controller4;
    const items = [];
    let list;
    function mount() {
        init();
        on([
            EVENT_UPDATED,
            EVENT_REFRESH
        ], init);
        on([
            EVENT_MOVE,
            EVENT_SCROLLED
        ], update);
    }
    function init() {
        destroy();
        if (options.pagination && Slides4.isEnough()) {
            createPagination();
            emit(EVENT_PAGINATION_MOUNTED, {
                list,
                items
            }, getAt(Splide2.index));
            update();
        }
    }
    function destroy() {
        if (list) {
            remove(list);
            items.forEach((item)=>{
                unbind(item.button, "click");
            });
            empty(items);
            list = null;
        }
    }
    function createPagination() {
        const { length  } = Splide2;
        const { classes , i18n , perPage  } = options;
        const parent = options.pagination === "slider" && Elements4.slider || Elements4.root;
        const max4 = hasFocus() ? length : ceil(length / perPage);
        list = create("ul", classes.pagination, parent);
        for(let i = 0; i < max4; i++){
            const li = create("li", null, list);
            const button = create("button", {
                class: classes.page,
                type: "button"
            }, li);
            const controls = Slides4.getIn(i).map((Slide9)=>Slide9.slide.id
            );
            const text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;
            bind(button, "click", onClick.bind(null, i));
            setAttribute(button, ARIA_CONTROLS, controls.join(" "));
            setAttribute(button, ARIA_LABEL, format(text, i + 1));
            items.push({
                li,
                button,
                page: i
            });
        }
    }
    function onClick(page) {
        Controller4.go(`>${page}`, true, ()=>{
            const Slide10 = Slides4.getAt(Controller4.toIndex(page));
            Slide10 && focus(Slide10.slide);
        });
    }
    function getAt(index) {
        return items[Controller4.toPage(index)];
    }
    function update() {
        const prev = getAt(getIndex(true));
        const curr = getAt(getIndex());
        if (prev) {
            removeClass(prev.button, CLASS_ACTIVE);
            removeAttribute(prev.button, ARIA_CURRENT);
        }
        if (curr) {
            addClass(curr.button, CLASS_ACTIVE);
            setAttribute(curr.button, ARIA_CURRENT, true);
        }
        emit(EVENT_PAGINATION_UPDATED, {
            list,
            items
        }, prev, curr);
    }
    return {
        items,
        mount,
        destroy,
        getAt,
        update
    };
}
const TRIGGER_KEYS = [
    " ",
    "Enter",
    "Spacebar"
];
function Sync(Splide2, Components2, options) {
    const { list  } = Components2.Elements;
    const events = [];
    function mount() {
        Splide2.splides.forEach((target)=>{
            !target.isParent && sync(target.splide);
        });
        if (options.isNavigation) navigate();
    }
    function destroy() {
        removeAttribute(list, ALL_ATTRIBUTES);
        events.forEach((event)=>{
            event.destroy();
        });
        empty(events);
    }
    function remount() {
        destroy();
        mount();
    }
    function sync(splide) {
        [
            Splide2,
            splide
        ].forEach((instance)=>{
            const event = EventInterface(instance);
            const target = instance === Splide2 ? splide : Splide2;
            event.on(EVENT_MOVE, (index, prev, dest)=>{
                target.go(target.is(LOOP) ? dest : index);
            });
            events.push(event);
        });
    }
    function navigate() {
        const event = EventInterface(Splide2);
        const { on  } = event;
        on(EVENT_CLICK, onClick);
        on(EVENT_SLIDE_KEYDOWN, onKeydown);
        on([
            EVENT_MOUNTED,
            EVENT_UPDATED
        ], update);
        setAttribute(list, ROLE, "menu");
        events.push(event);
        event.emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);
    }
    function update() {
        setAttribute(list, ARIA_ORIENTATION, options.direction !== TTB ? "horizontal" : null);
    }
    function onClick(Slide11) {
        Splide2.go(Slide11.index);
    }
    function onKeydown(Slide12, e) {
        if (includes(TRIGGER_KEYS, e.key)) {
            onClick(Slide12);
            prevent(e);
        }
    }
    return {
        mount,
        destroy,
        remount
    };
}
function Wheel(Splide2, Components2, options) {
    const { bind  } = EventInterface(Splide2);
    function mount() {
        if (options.wheel) bind(Components2.Elements.track, "wheel", onWheel, SCROLL_LISTENER_OPTIONS);
    }
    function onWheel(e) {
        if (e.cancelable) {
            const { deltaY  } = e;
            if (deltaY) {
                const backwards = deltaY < 0;
                Splide2.go(backwards ? "<" : ">");
                shouldPrevent(backwards) && prevent(e);
            }
        }
    }
    function shouldPrevent(backwards) {
        return !options.releaseWheel || Splide2.state.is(MOVING) || Components2.Controller.getAdjacent(backwards) !== -1;
    }
    return {
        mount
    };
}
var ComponentConstructors = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Options: Options,
    Direction: Direction,
    Elements: Elements,
    Slides: Slides,
    Layout: Layout,
    Clones: Clones,
    Move: Move,
    Controller: Controller,
    Arrows: Arrows,
    Autoplay: Autoplay,
    Cover: Cover,
    Scroll: Scroll,
    Drag: Drag,
    Keyboard: Keyboard,
    LazyLoad: LazyLoad,
    Pagination: Pagination,
    Sync: Sync,
    Wheel: Wheel
});
const I18N = {
    prev: "Previous slide",
    next: "Next slide",
    first: "Go to first slide",
    last: "Go to last slide",
    slideX: "Go to slide %s",
    pageX: "Go to page %s",
    play: "Start autoplay",
    pause: "Pause autoplay"
};
const DEFAULTS = {
    type: "slide",
    speed: 400,
    waitForTransition: true,
    perPage: 1,
    cloneStatus: true,
    arrows: true,
    pagination: true,
    interval: 5000,
    pauseOnHover: true,
    pauseOnFocus: true,
    resetProgress: true,
    keyboard: true,
    easing: "cubic-bezier(0.25, 1, 0.5, 1)",
    drag: true,
    direction: "ltr",
    slideFocus: true,
    trimSpace: true,
    focusableNodes: "a, button, textarea, input, select, iframe",
    classes: CLASSES,
    i18n: I18N
};
function Fade(Splide2, Components2, options) {
    const { on  } = EventInterface(Splide2);
    function mount() {
        on([
            EVENT_MOUNTED,
            EVENT_REFRESH
        ], ()=>{
            nextTick(()=>{
                Components2.Slides.style("transition", `opacity ${options.speed}ms ${options.easing}`);
            });
        });
    }
    function start(index, done) {
        const { track  } = Components2.Elements;
        style(track, "height", unit(rect(track).height));
        nextTick(()=>{
            done();
            style(track, "height", "");
        });
    }
    return {
        mount,
        start,
        cancel: noop
    };
}
function Slide(Splide2, Components2, options) {
    const { bind  } = EventInterface(Splide2);
    const { Move: Move4 , Controller: Controller5  } = Components2;
    const { list  } = Components2.Elements;
    let endCallback;
    function mount() {
        bind(list, "transitionend", (e)=>{
            if (e.target === list && endCallback) {
                cancel();
                endCallback();
            }
        });
    }
    function start(index, done) {
        const destination = Move4.toPosition(index, true);
        const position = Move4.getPosition();
        const speed = getSpeed(index);
        if (abs(destination - position) >= 1 && speed >= 1) {
            apply(`transform ${speed}ms ${options.easing}`);
            Move4.translate(destination, true);
            endCallback = done;
        } else {
            Move4.jump(index);
            done();
        }
    }
    function cancel() {
        apply("");
    }
    function getSpeed(index) {
        const { rewindSpeed  } = options;
        if (Splide2.is(SLIDE) && rewindSpeed) {
            const prev = Controller5.getIndex(true);
            const end = Controller5.getEnd();
            if (prev === 0 && index >= end || prev >= end && index === 0) return rewindSpeed;
        }
        return options.speed;
    }
    function apply(transition) {
        style(list, "transition", transition);
    }
    return {
        mount,
        start,
        cancel
    };
}
const _Splide = class {
    constructor(target, options){
        this.event = EventBus();
        this.Components = {
        };
        this.state = State(CREATED);
        this.splides = [];
        this._options = {
        };
        this._Extensions = {
        };
        const root = isString(target) ? query(document, target) : target;
        assert(root, `${root} is invalid.`);
        this.root = root;
        merge(DEFAULTS, _Splide.defaults);
        merge(merge(this._options, DEFAULTS), options || {
        });
    }
    mount(Extensions, Transition) {
        const { state , Components: Components2  } = this;
        assert(state.is([
            CREATED,
            DESTROYED
        ]), "Already mounted!");
        state.set(CREATED);
        this._Components = Components2;
        this._Transition = Transition || this._Transition || (this.is(FADE) ? Fade : Slide);
        this._Extensions = Extensions || this._Extensions;
        const Constructors = assign({
        }, ComponentConstructors, this._Extensions, {
            Transition: this._Transition
        });
        forOwn(Constructors, (Component, key)=>{
            const component = Component(this, Components2, this._options);
            Components2[key] = component;
            component.setup && component.setup();
        });
        forOwn(Components2, (component)=>{
            component.mount && component.mount();
        });
        this.emit(EVENT_MOUNTED);
        addClass(this.root, CLASS_INITIALIZED);
        state.set(IDLE);
        this.emit(EVENT_READY);
        return this;
    }
    sync(splide) {
        this.splides.push({
            splide
        });
        splide.splides.push({
            splide: this,
            isParent: true
        });
        if (this.state.is(IDLE)) {
            this._Components.Sync.remount();
            splide.Components.Sync.remount();
        }
        return this;
    }
    go(control) {
        this._Components.Controller.go(control);
        return this;
    }
    on(events, callback) {
        this.event.on(events, callback, null, DEFAULT_USER_EVENT_PRIORITY);
        return this;
    }
    off(events) {
        this.event.off(events);
        return this;
    }
    emit(event) {
        this.event.emit(event, ...slice(arguments, 1));
        return this;
    }
    add(slides, index) {
        this._Components.Slides.add(slides, index);
        return this;
    }
    remove(matcher) {
        this._Components.Slides.remove(matcher);
        return this;
    }
    is(type) {
        return this._options.type === type;
    }
    refresh() {
        this.emit(EVENT_REFRESH);
        return this;
    }
    destroy(completely = true) {
        const { event , state  } = this;
        if (state.is(CREATED)) event.on(EVENT_READY, this.destroy.bind(this, completely), this);
        else {
            forOwn(this._Components, (component)=>{
                component.destroy && component.destroy(completely);
            }, true);
            event.emit(EVENT_DESTROY);
            event.destroy();
            completely && empty(this.splides);
            state.set(DESTROYED);
        }
        return this;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        const { _options  } = this;
        merge(_options, options);
        if (!this.state.is(CREATED)) this.emit(EVENT_UPDATED, _options);
    }
    get length() {
        return this._Components.Slides.getLength(true);
    }
    get index() {
        return this._Components.Controller.getIndex();
    }
};
let Splide = _Splide;
Splide.defaults = {
};
Splide.STATES = STATES;
const CLASS_RENDERED = "is-rendered";
const RENDERER_DEFAULT_CONFIG = {
    listTag: "ul",
    slideTag: "li"
};
class Style {
    constructor(id, options){
        this.styles = {
        };
        this.id = id;
        this.options = options;
    }
    rule(selector, prop, value, breakpoint) {
        breakpoint = breakpoint || "default";
        const selectors = this.styles[breakpoint] = this.styles[breakpoint] || {
        };
        const styles = selectors[selector] = selectors[selector] || {
        };
        styles[prop] = value;
    }
    build() {
        let css = "";
        if (this.styles.default) css += this.buildSelectors(this.styles.default);
        Object.keys(this.styles).sort((n, m)=>this.options.mediaQuery === "min" ? +n - +m : +m - +n
        ).forEach((breakpoint)=>{
            if (breakpoint !== "default") {
                css += `@media screen and (max-width: ${breakpoint}px) {`;
                css += this.buildSelectors(this.styles[breakpoint]);
                css += `}`;
            }
        });
        return css;
    }
    buildSelectors(selectors) {
        let css = "";
        forOwn(selectors, (styles, selector)=>{
            selector = `#${this.id} ${selector}`.trim();
            css += `${selector} {`;
            forOwn(styles, (value, prop)=>{
                if (value || value === 0) css += `${prop}: ${value};`;
            });
            css += "}";
        });
        return css;
    }
}
class SplideRenderer {
    constructor(contents, options, config, defaults){
        this.slides = [];
        this.options = {
        };
        this.breakpoints = [];
        merge(DEFAULTS, defaults || {
        });
        merge(merge(this.options, DEFAULTS), options || {
        });
        this.contents = contents;
        this.config = assign({
        }, RENDERER_DEFAULT_CONFIG, config || {
        });
        this.id = this.config.id || uniqueId("splide");
        this.Style = new Style(this.id, this.options);
        this.Direction = Direction(null, null, this.options);
        assert(this.contents.length, "Provide at least 1 content.");
        this.init();
    }
    static clean(splide) {
        const { on  } = EventInterface(splide);
        const { root  } = splide;
        const clones = queryAll(root, `.${CLASS_CLONE}`);
        on(EVENT_MOUNTED, ()=>{
            remove(child(root, "style"));
        });
        remove(clones);
    }
    init() {
        this.parseBreakpoints();
        this.initSlides();
        this.registerRootStyles();
        this.registerTrackStyles();
        this.registerSlideStyles();
        this.registerListStyles();
    }
    initSlides() {
        push(this.slides, this.contents.map((content, index)=>{
            content = isString(content) ? {
                html: content
            } : content;
            content.styles = content.styles || {
            };
            content.attrs = content.attrs || {
            };
            this.cover(content);
            const classes = `${this.options.classes.slide} ${index === 0 ? CLASS_ACTIVE : ""}`;
            assign(content.attrs, {
                class: `${classes} ${content.attrs.class || ""}`.trim(),
                style: this.buildStyles(content.styles)
            });
            return content;
        }));
        if (this.isLoop()) this.generateClones(this.slides);
    }
    registerRootStyles() {
        this.breakpoints.forEach(([width, options])=>{
            this.Style.rule(" ", "max-width", unit(options.width), width);
        });
    }
    registerTrackStyles() {
        const { Style: Style2  } = this;
        const selector = `.${CLASS_TRACK}`;
        this.breakpoints.forEach(([width, options])=>{
            Style2.rule(selector, this.resolve("paddingLeft"), this.cssPadding(options, false), width);
            Style2.rule(selector, this.resolve("paddingRight"), this.cssPadding(options, true), width);
            Style2.rule(selector, "height", this.cssTrackHeight(options), width);
        });
    }
    registerListStyles() {
        const { Style: Style2  } = this;
        const selector = `.${CLASS_LIST}`;
        this.breakpoints.forEach(([width, options])=>{
            Style2.rule(selector, "transform", this.buildTranslate(options), width);
            if (!this.cssSlideHeight(options)) Style2.rule(selector, "aspect-ratio", this.cssAspectRatio(options), width);
        });
    }
    registerSlideStyles() {
        const { Style: Style2  } = this;
        const selector = `.${CLASS_SLIDE}`;
        this.breakpoints.forEach(([width, options])=>{
            Style2.rule(selector, "width", this.cssSlideWidth(options), width);
            Style2.rule(selector, "height", this.cssSlideHeight(options) || "100%", width);
            Style2.rule(selector, this.resolve("marginRight"), unit(options.gap) || "0px", width);
            Style2.rule(`${selector} > img`, "display", options.cover ? "none" : "inline", width);
        });
    }
    buildTranslate(options) {
        const { resolve , orient  } = this.Direction;
        const values = [];
        values.push(this.cssOffsetClones(options));
        values.push(this.cssOffsetGaps(options));
        if (this.isCenter(options)) {
            values.push(this.buildCssValue(orient(-50), "%"));
            values.push(...this.cssOffsetCenter(options));
        }
        return values.filter(Boolean).map((value)=>`translate${resolve("X")}(${value})`
        ).join(" ");
    }
    cssOffsetClones(options) {
        const { resolve , orient  } = this.Direction;
        const cloneCount = this.getCloneCount();
        if (this.isFixedWidth(options)) {
            const { value , unit: unit2  } = this.parseCssValue(options[resolve("fixedWidth")]);
            return this.buildCssValue(orient(value) * cloneCount, unit2);
        }
        const percent = 100 * cloneCount / options.perPage;
        return `${orient(percent)}%`;
    }
    cssOffsetCenter(options) {
        const { resolve , orient  } = this.Direction;
        if (this.isFixedWidth(options)) {
            const { value , unit: unit2  } = this.parseCssValue(options[resolve("fixedWidth")]);
            return [
                this.buildCssValue(orient(value / 2), unit2)
            ];
        }
        const values = [];
        const { perPage , gap  } = options;
        values.push(`${orient(50 / perPage)}%`);
        if (gap) {
            const { value , unit: unit2  } = this.parseCssValue(gap);
            const gapOffset = (value / perPage - value) / 2;
            values.push(this.buildCssValue(orient(gapOffset), unit2));
        }
        return values;
    }
    cssOffsetGaps(options) {
        const cloneCount = this.getCloneCount();
        if (cloneCount && options.gap) {
            const { orient  } = this.Direction;
            const { value , unit: unit2  } = this.parseCssValue(options.gap);
            if (this.isFixedWidth(options)) return this.buildCssValue(orient(value * cloneCount), unit2);
            const { perPage  } = options;
            const gaps = cloneCount / perPage;
            return this.buildCssValue(orient(gaps * value), unit2);
        }
        return "";
    }
    resolve(prop) {
        return camelToKebab(this.Direction.resolve(prop));
    }
    cssPadding(options, right) {
        const { padding  } = options;
        const prop = this.Direction.resolve(right ? "right" : "left", true);
        return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || "0px";
    }
    cssTrackHeight(options) {
        let height = "";
        if (this.isVertical()) {
            height = this.cssHeight(options);
            assert(height, '"height" is missing.');
            height = `calc(${height} - ${this.cssPadding(options, false)} - ${this.cssPadding(options, true)})`;
        }
        return height;
    }
    cssHeight(options) {
        return unit(options.height);
    }
    cssSlideWidth(options) {
        return options.autoWidth ? "" : unit(options.fixedWidth) || (this.isVertical() ? "" : this.cssSlideSize(options));
    }
    cssSlideHeight(options) {
        return unit(options.fixedHeight) || (this.isVertical() ? options.autoHeight ? "" : this.cssSlideSize(options) : this.cssHeight(options));
    }
    cssSlideSize(options) {
        const gap = unit(options.gap);
        return `calc((100%${gap && ` + ${gap}`})/${options.perPage || 1}${gap && ` - ${gap}`})`;
    }
    cssAspectRatio(options) {
        const { heightRatio  } = options;
        return heightRatio ? `${1 / heightRatio}` : "";
    }
    buildCssValue(value, unit2) {
        return `${value}${unit2}`;
    }
    parseCssValue(value) {
        if (isString(value)) {
            const number = parseFloat(value) || 0;
            const unit2 = value.replace(/\d*(\.\d*)?/, "") || "px";
            return {
                value: number,
                unit: unit2
            };
        }
        return {
            value,
            unit: "px"
        };
    }
    parseBreakpoints() {
        const { breakpoints  } = this.options;
        this.breakpoints.push([
            "default",
            this.options
        ]);
        if (breakpoints) forOwn(breakpoints, (options, width)=>{
            this.breakpoints.push([
                width,
                merge(merge({
                }, this.options), options)
            ]);
        });
    }
    isFixedWidth(options) {
        return !!options[this.Direction.resolve("fixedWidth")];
    }
    isLoop() {
        return this.options.type === LOOP;
    }
    isCenter(options) {
        if (options.focus === "center") {
            if (this.isLoop()) return true;
            if (this.options.type === SLIDE) return !this.options.trimSpace;
        }
        return false;
    }
    isVertical() {
        return this.options.direction === TTB;
    }
    buildClasses() {
        const { options  } = this;
        return [
            CLASS_ROOT,
            `${CLASS_ROOT}--${options.type}`,
            `${CLASS_ROOT}--${options.direction}`,
            options.drag && `${CLASS_ROOT}--draggable`,
            options.isNavigation && `${CLASS_ROOT}--nav`,
            CLASS_ACTIVE,
            !this.config.hidden && CLASS_RENDERED
        ].filter(Boolean).join(" ");
    }
    buildAttrs(attrs) {
        let attr = "";
        forOwn(attrs, (value, key)=>{
            attr += value ? ` ${camelToKebab(key)}="${value}"` : "";
        });
        return attr.trim();
    }
    buildStyles(styles) {
        let style2 = "";
        forOwn(styles, (value, key)=>{
            style2 += ` ${camelToKebab(key)}:${value};`;
        });
        return style2.trim();
    }
    renderSlides() {
        const { slideTag: tag  } = this.config;
        return this.slides.map((content)=>{
            return `<${tag} ${this.buildAttrs(content.attrs)}>${content.html || ""}</${tag}>`;
        }).join("");
    }
    cover(content) {
        const { styles , html =""  } = content;
        if (this.options.cover && !this.options.lazyLoad) {
            const src = html.match(/<img.*?src\s*=\s*(['"])(.+?)\1.*?>/);
            if (src && src[2]) styles.background = `center/cover no-repeat url('${src[2]}')`;
        }
    }
    generateClones(contents) {
        const { classes  } = this.options;
        const count = this.getCloneCount();
        const slides = contents.slice();
        while(slides.length < count)push(slides, slides);
        push(slides.slice(-count).reverse(), slides.slice(0, count)).forEach((content, index)=>{
            const attrs = assign({
            }, content.attrs, {
                class: `${content.attrs.class} ${classes.clone}`
            });
            const clone = assign({
            }, content, {
                attrs
            });
            index < count ? contents.unshift(clone) : contents.push(clone);
        });
    }
    getCloneCount() {
        if (this.isLoop()) {
            const { options  } = this;
            if (options.clones) return options.clones;
            const perPage = max(...this.breakpoints.map(([, options2])=>options2.perPage
            ));
            return perPage * ((options.flickMaxPages || 1) + 1);
        }
        return 0;
    }
    renderArrows() {
        let html = "";
        html += `<div class="${this.options.classes.arrows}">`;
        html += this.renderArrow(true);
        html += this.renderArrow(false);
        html += `</div>`;
        return html;
    }
    renderArrow(prev) {
        const { classes , i18n  } = this.options;
        const attrs = {
            class: `${classes.arrow} ${prev ? classes.prev : classes.next}`,
            type: "button",
            ariaLabel: prev ? i18n.prev : i18n.next
        };
        return `<button ${this.buildAttrs(attrs)}><svg xmlns="${XML_NAME_SPACE}" viewBox="0 0 ${SIZE} ${SIZE}" width="${SIZE}" height="${SIZE}"><path d="${this.options.arrowPath || PATH}" /></svg></button>`;
    }
    html() {
        const { rootClass , listTag , arrows , beforeTrack , afterTrack , slider , beforeSlider , afterSlider  } = this.config;
        let html = "";
        html += `<div id="${this.id}" class="${this.buildClasses()} ${rootClass || ""}">`;
        html += `<style>${this.Style.build()}</style>`;
        if (slider) {
            html += beforeSlider || "";
            html += `<div class="splide__slider">`;
        }
        html += beforeTrack || "";
        if (arrows) html += this.renderArrows();
        html += `<div class="splide__track">`;
        html += `<${listTag} class="splide__list">`;
        html += this.renderSlides();
        html += `</${listTag}>`;
        html += `</div>`;
        html += afterTrack || "";
        if (slider) {
            html += `</div>`;
            html += afterSlider || "";
        }
        html += `</div>`;
        return html;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"6TTGm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlAlert", ()=>_chunkOOIQ4D22Js.SlAlert
);
parcelHelpers.export(exports, "SlAnimatedImage", ()=>_chunkGR3BL4JIJs.SlAnimatedImage
);
parcelHelpers.export(exports, "SlAnimation", ()=>_chunkH2HMKHWHJs.SlAnimation
);
parcelHelpers.export(exports, "SlAvatar", ()=>_chunkENMZKFMSJs.SlAvatar
);
parcelHelpers.export(exports, "SlBadge", ()=>_chunkBJY6LY6BJs.SlBadge
);
parcelHelpers.export(exports, "SlBreadcrumb", ()=>_chunkPKPLYXHSJs.SlBreadcrumb
);
parcelHelpers.export(exports, "SlBreadcrumbItem", ()=>_chunkNTGEJSVFJs.SlBreadcrumbItem
);
parcelHelpers.export(exports, "SlButton", ()=>_chunk5IWLS7YMJs.SlButton
);
parcelHelpers.export(exports, "SlButtonGroup", ()=>_chunkCHKRDQ2CJs.SlButtonGroup
);
parcelHelpers.export(exports, "SlCard", ()=>_chunkQNN6SHCYJs.SlCard
);
parcelHelpers.export(exports, "SlCheckbox", ()=>_chunk34X5S33VJs.SlCheckbox
);
parcelHelpers.export(exports, "SlColorPicker", ()=>_chunkE6Y7Q2OFJs.SlColorPicker
);
parcelHelpers.export(exports, "SlDetails", ()=>_chunkTUM6QOHBJs.SlDetails
);
parcelHelpers.export(exports, "SlDialog", ()=>_chunkZYIXUTR3Js.SlDialog
);
parcelHelpers.export(exports, "SlDivider", ()=>_chunkUEM7GD4FJs.SlDivider
);
parcelHelpers.export(exports, "SlDrawer", ()=>_chunk5PGDTRSWJs.SlDrawer
);
parcelHelpers.export(exports, "SlDropdown", ()=>_chunkU5LHPAAMJs.SlDropdown
);
parcelHelpers.export(exports, "SlFormatBytes", ()=>_chunk2XK3KP4SJs.SlFormatBytes
);
parcelHelpers.export(exports, "SlFormatDate", ()=>_chunkOWTE6SBAJs.SlFormatDate
);
parcelHelpers.export(exports, "SlFormatNumber", ()=>_chunk5WKATBURJs.SlFormatNumber
);
parcelHelpers.export(exports, "SlIcon", ()=>_chunkIBSPWXHKJs.SlIcon
);
parcelHelpers.export(exports, "SlIconButton", ()=>_chunkQSLHMB3EJs.SlIconButton
);
parcelHelpers.export(exports, "SlImageComparer", ()=>_chunkHB3M7MDBJs.SlImageComparer
);
parcelHelpers.export(exports, "SlInclude", ()=>_chunkPYPBGG36Js.SlInclude
);
parcelHelpers.export(exports, "SlInput", ()=>_chunkOZRKVGGHJs.SlInput
);
parcelHelpers.export(exports, "SlMenu", ()=>_chunkXVLGZ4X3Js.SlMenu
);
parcelHelpers.export(exports, "SlMenuItem", ()=>_chunk3YCAREL4Js.SlMenuItem
);
parcelHelpers.export(exports, "SlMenuLabel", ()=>_chunkP5232U24Js.SlMenuLabel
);
parcelHelpers.export(exports, "SlMutationObserver", ()=>_chunkVWLJ7FK6Js.SlMutationObserver
);
parcelHelpers.export(exports, "SlProgressBar", ()=>_chunkUGKRZBBBJs.SlProgressBar
);
parcelHelpers.export(exports, "SlProgressRing", ()=>_chunkFFFIC4PPJs.SlProgressRing
);
parcelHelpers.export(exports, "SlQrCode", ()=>_chunkVAMZ5LPUJs.SlQrCode
);
parcelHelpers.export(exports, "SlRadio", ()=>_chunkPJVT7J2ZJs.SlRadio
);
parcelHelpers.export(exports, "SlRadioGroup", ()=>_chunk6RNVJEU7Js.SlRadioGroup
);
parcelHelpers.export(exports, "SlRange", ()=>_chunkCGJIY3DQJs.SlRange
);
parcelHelpers.export(exports, "SlRating", ()=>_chunkNKX6EUWBJs.SlRating
);
parcelHelpers.export(exports, "SlRelativeTime", ()=>_chunk2S5JF73MJs.SlRelativeTime
);
parcelHelpers.export(exports, "SlResizeObserver", ()=>_chunkNHU33QYAJs.SlResizeObserver
);
parcelHelpers.export(exports, "SlResponsiveMedia", ()=>_chunkXMTXH3DKJs.SlResponsiveMedia
);
parcelHelpers.export(exports, "SlSelect", ()=>_chunkJZZRD643Js.SlSelect
);
parcelHelpers.export(exports, "SlSkeleton", ()=>_chunkXUQGVVOOJs.SlSkeleton
);
parcelHelpers.export(exports, "SlSpinner", ()=>_chunkZNDHS74KJs.SlSpinner
);
parcelHelpers.export(exports, "SlSplitPanel", ()=>_chunkO4DEQ7W6Js.SlSplitPanel
);
parcelHelpers.export(exports, "SlSwitch", ()=>_chunkJEOVVW2QJs.SlSwitch
);
parcelHelpers.export(exports, "SlTab", ()=>_chunkZ73GCS7XJs.SlTab
);
parcelHelpers.export(exports, "SlTabGroup", ()=>_chunkBI66FINLJs.SlTabGroup
);
parcelHelpers.export(exports, "SlTabPanel", ()=>_chunk4SFIXTCNJs.SlTabPanel
);
parcelHelpers.export(exports, "SlTag", ()=>_chunkUWKCXTJ6Js.SlTag
);
parcelHelpers.export(exports, "SlTextarea", ()=>_chunkYRGFYV5PJs.SlTextarea
);
parcelHelpers.export(exports, "SlTooltip", ()=>_chunk3O6HBCDCJs.SlTooltip
);
parcelHelpers.export(exports, "SlVisuallyHidden", ()=>_chunkKRVEJCV5Js.SlVisuallyHidden
);
parcelHelpers.export(exports, "getAnimationNames", ()=>_chunk437GBGKRJs.getAnimationNames
);
parcelHelpers.export(exports, "getBasePath", ()=>_chunkNFF2HMITJs.getBasePath
);
parcelHelpers.export(exports, "getEasingNames", ()=>_chunk437GBGKRJs.getEasingNames
);
parcelHelpers.export(exports, "registerIconLibrary", ()=>_chunkL4IDTG64Js.registerIconLibrary
);
parcelHelpers.export(exports, "setBasePath", ()=>_chunkNFF2HMITJs.setBasePath
);
parcelHelpers.export(exports, "unregisterIconLibrary", ()=>_chunkL4IDTG64Js.unregisterIconLibrary
);
var _chunkHAL7R4WTJs = require("./chunks/chunk.HAL7R4WT.js");
var _chunkQL5C2XOWJs = require("./chunks/chunk.QL5C2XOW.js");
var _chunkKRVEJCV5Js = require("./chunks/chunk.KRVEJCV5.js");
var _chunk4SFIXTCNJs = require("./chunks/chunk.4SFIXTCN.js");
var _chunkYRGFYV5PJs = require("./chunks/chunk.YRGFYV5P.js");
var _chunk36NATOJSJs = require("./chunks/chunk.36NATOJS.js");
var _chunk3O6HBCDCJs = require("./chunks/chunk.3O6HBCDC.js");
var _chunkV2N6BIOEJs = require("./chunks/chunk.V2N6BIOE.js");
var _chunk65XWAMRWJs = require("./chunks/chunk.65XWAMRW.js");
var _chunkO4DEQ7W6Js = require("./chunks/chunk.O4DEQ7W6.js");
var _chunkJEOVVW2QJs = require("./chunks/chunk.JEOVVW2Q.js");
var _chunkMC6A6AKPJs = require("./chunks/chunk.MC6A6AKP.js");
var _chunkZ73GCS7XJs = require("./chunks/chunk.Z73GCS7X.js");
var _chunk7O2OK7EMJs = require("./chunks/chunk.7O2OK7EM.js");
var _chunkBI66FINLJs = require("./chunks/chunk.BI66FINL.js");
var _chunkJZCWPHAUJs = require("./chunks/chunk.JZCWPHAU.js");
var _chunkKMV7CIIKJs = require("./chunks/chunk.KMV7CIIK.js");
var _chunkXMTXH3DKJs = require("./chunks/chunk.XMTXH3DK.js");
var _chunkJZZRD643Js = require("./chunks/chunk.JZZRD643.js");
var _chunkUWKCXTJ6Js = require("./chunks/chunk.UWKCXTJ6.js");
var _chunkES6UDUT4Js = require("./chunks/chunk.ES6UDUT4.js");
var _chunkJ3OIITR5Js = require("./chunks/chunk.J3OIITR5.js");
var _chunkXUQGVVOOJs = require("./chunks/chunk.XUQGVVOO.js");
var _chunkJ665TFKFJs = require("./chunks/chunk.J665TFKF.js");
var _chunk4THV7FKBJs = require("./chunks/chunk.4THV7FKB.js");
var _chunkCGJIY3DQJs = require("./chunks/chunk.CGJIY3DQ.js");
var _chunkIIZXV6ZDJs = require("./chunks/chunk.IIZXV6ZD.js");
var _chunkNKX6EUWBJs = require("./chunks/chunk.NKX6EUWB.js");
var _chunkO4RIR5QUJs = require("./chunks/chunk.O4RIR5QU.js");
var _chunk2S5JF73MJs = require("./chunks/chunk.2S5JF73M.js");
var _chunkNHU33QYAJs = require("./chunks/chunk.NHU33QYA.js");
var _chunkLAHGKIFCJs = require("./chunks/chunk.LAHGKIFC.js");
var _chunk5PUW23M6Js = require("./chunks/chunk.5PUW23M6.js");
var _chunkFFFIC4PPJs = require("./chunks/chunk.FFFIC4PP.js");
var _chunkYPEVBWRRJs = require("./chunks/chunk.YPEVBWRR.js");
var _chunkVAMZ5LPUJs = require("./chunks/chunk.VAMZ5LPU.js");
var _chunkTVINGWXDJs = require("./chunks/chunk.TVINGWXD.js");
var _chunkPJVT7J2ZJs = require("./chunks/chunk.PJVT7J2Z.js");
var _chunkK6ZGLWCAJs = require("./chunks/chunk.K6ZGLWCA.js");
var _chunk6RNVJEU7Js = require("./chunks/chunk.6RNVJEU7.js");
var _chunkZQO5EFLYJs = require("./chunks/chunk.ZQO5EFLY.js");
var _chunk3YCAREL4Js = require("./chunks/chunk.3YCAREL4.js");
var _chunkXIW4B2T3Js = require("./chunks/chunk.XIW4B2T3.js");
var _chunkP5232U24Js = require("./chunks/chunk.P5232U24.js");
var _chunkNHYPQ5NUJs = require("./chunks/chunk.NHYPQ5NU.js");
var _chunkVWLJ7FK6Js = require("./chunks/chunk.VWLJ7FK6.js");
var _chunk6D7VQJJDJs = require("./chunks/chunk.6D7VQJJD.js");
var _chunkUGKRZBBBJs = require("./chunks/chunk.UGKRZBBB.js");
var _chunk3CC35VHZJs = require("./chunks/chunk.3CC35VHZ.js");
var _chunkHB3M7MDBJs = require("./chunks/chunk.HB3M7MDB.js");
var _chunkPYPBGG36Js = require("./chunks/chunk.PYPBGG36.js");
var _chunkF4APDX5BJs = require("./chunks/chunk.F4APDX5B.js");
var _chunkVHNS4GLLJs = require("./chunks/chunk.VHNS4GLL.js");
var _chunkXVLGZ4X3Js = require("./chunks/chunk.XVLGZ4X3.js");
var _chunk6VMJHXFCJs = require("./chunks/chunk.6VMJHXFC.js");
var _chunk5LT34KCUJs = require("./chunks/chunk.5LT34KCU.js");
var _chunk5PGDTRSWJs = require("./chunks/chunk.5PGDTRSW.js");
var _chunkZXQWYC2KJs = require("./chunks/chunk.ZXQWYC2K.js");
var _chunk2XK3KP4SJs = require("./chunks/chunk.2XK3KP4S.js");
var _chunkOWTE6SBAJs = require("./chunks/chunk.OWTE6SBA.js");
var _chunk5WKATBURJs = require("./chunks/chunk.5WKATBUR.js");
var _chunkE6Y7Q2OFJs = require("./chunks/chunk.E6Y7Q2OF.js");
var _chunkT56CG5BMJs = require("./chunks/chunk.T56CG5BM.js");
var _chunkDIYFVAUNJs = require("./chunks/chunk.DIYFVAUN.js");
var _chunkOZRKVGGHJs = require("./chunks/chunk.OZRKVGGH.js");
var _chunkA7SZ5Z2OJs = require("./chunks/chunk.A7SZ5Z2O.js");
var _chunkP2AL2I6LJs = require("./chunks/chunk.P2AL2I6L.js");
var _chunkU5LHPAAMJs = require("./chunks/chunk.U5LHPAAM.js");
var _chunkMMVA6LRDJs = require("./chunks/chunk.MMVA6LRD.js");
var _chunk5FSRBGWTJs = require("./chunks/chunk.5FSRBGWT.js");
var _chunkCCTU25PVJs = require("./chunks/chunk.CCTU25PV.js");
var _chunkXGZZXZ23Js = require("./chunks/chunk.XGZZXZ23.js");
var _chunkTUM6QOHBJs = require("./chunks/chunk.TUM6QOHB.js");
var _chunkHCWNSG4VJs = require("./chunks/chunk.HCWNSG4V.js");
var _chunkZYIXUTR3Js = require("./chunks/chunk.ZYIXUTR3.js");
var _chunkSXNB3LL3Js = require("./chunks/chunk.SXNB3LL3.js");
var _chunkDTSUHNT6Js = require("./chunks/chunk.DTSUHNT6.js");
var _chunkST4GEPNZJs = require("./chunks/chunk.ST4GEPNZ.js");
var _chunkDREYVBRRJs = require("./chunks/chunk.DREYVBRR.js");
var _chunkUEM7GD4FJs = require("./chunks/chunk.UEM7GD4F.js");
var _chunkIDWMMLZBJs = require("./chunks/chunk.IDWMMLZB.js");
var _chunkCHKRDQ2CJs = require("./chunks/chunk.CHKRDQ2C.js");
var _chunkTQAMNUHMJs = require("./chunks/chunk.TQAMNUHM.js");
var _chunk5IWLS7YMJs = require("./chunks/chunk.5IWLS7YM.js");
var _chunkZNDHS74KJs = require("./chunks/chunk.ZNDHS74K.js");
var _chunk2G6AZSJBJs = require("./chunks/chunk.2G6AZSJB.js");
var _chunkNTBOGFL4Js = require("./chunks/chunk.NTBOGFL4.js");
var _chunkQNN6SHCYJs = require("./chunks/chunk.QNN6SHCY.js");
var _chunkSYKJSKOBJs = require("./chunks/chunk.SYKJSKOB.js");
var _chunk34X5S33VJs = require("./chunks/chunk.34X5S33V.js");
var _chunkGPPFFSGRJs = require("./chunks/chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunks/chunk.4654KI5L.js");
var _chunkB3QJZERKJs = require("./chunks/chunk.B3QJZERK.js");
var _chunkENMZKFMSJs = require("./chunks/chunk.ENMZKFMS.js");
var _chunkLLDC53GLJs = require("./chunks/chunk.LLDC53GL.js");
var _chunkBJY6LY6BJs = require("./chunks/chunk.BJY6LY6B.js");
var _chunkLX3FJWTQJs = require("./chunks/chunk.LX3FJWTQ.js");
var _chunkPKPLYXHSJs = require("./chunks/chunk.PKPLYXHS.js");
var _chunkSGGKF7FJJs = require("./chunks/chunk.SGGKF7FJ.js");
var _chunkNTGEJSVFJs = require("./chunks/chunk.NTGEJSVF.js");
var _chunk5TL5QPK4Js = require("./chunks/chunk.5TL5QPK4.js");
var _chunk5NXHIG6MJs = require("./chunks/chunk.5NXHIG6M.js");
var _chunkH2HMKHWHJs = require("./chunks/chunk.H2HMKHWH.js");
var _chunkPSXSU6WUJs = require("./chunks/chunk.PSXSU6WU.js");
var _chunk437GBGKRJs = require("./chunks/chunk.437GBGKR.js");
var _chunkOOIQ4D22Js = require("./chunks/chunk.OOIQ4D22.js");
var _chunkQSLHMB3EJs = require("./chunks/chunk.QSLHMB3E.js");
var _chunkWCAFNYXWJs = require("./chunks/chunk.WCAFNYXW.js");
var _chunk6JY65IM5Js = require("./chunks/chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunks/chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunks/chunk.W2WMQSCE.js");
var _chunkAN2XMPAVJs = require("./chunks/chunk.AN2XMPAV.js");
var _chunkOTIAUNPCJs = require("./chunks/chunk.OTIAUNPC.js");
var _chunkGR3BL4JIJs = require("./chunks/chunk.GR3BL4JI.js");
var _chunkIBSPWXHKJs = require("./chunks/chunk.IBSPWXHK.js");
var _chunkL4IDTG64Js = require("./chunks/chunk.L4IDTG64.js");
var _chunkC7PPQWMAJs = require("./chunks/chunk.C7PPQWMA.js");
var _chunkNFF2HMITJs = require("./chunks/chunk.NFF2HMIT.js");
var _chunkHEOUBJ7TJs = require("./chunks/chunk.HEOUBJ7T.js");
var _chunkUJSH3WGMJs = require("./chunks/chunk.UJSH3WGM.js");
var _chunk4KUWHA33Js = require("./chunks/chunk.4KUWHA33.js");
var _chunkKJOCH52QJs = require("./chunks/chunk.KJOCH52Q.js");
var _chunk2JQPDYNAJs = require("./chunks/chunk.2JQPDYNA.js");
var _chunkBD26TKS4Js = require("./chunks/chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunks/chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunks/chunk.5PPINAFI.js");
var _chunkXXINH6FVJs = require("./chunks/chunk.XXINH6FV.js");
var _chunkFGQFMRZUJs = require("./chunks/chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunks/chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunks/chunk.4M3HOXYQ.js");

},{"./chunks/chunk.HAL7R4WT.js":"3OEZr","./chunks/chunk.QL5C2XOW.js":"b8hiA","./chunks/chunk.KRVEJCV5.js":"hfHSC","./chunks/chunk.4SFIXTCN.js":"ltQbx","./chunks/chunk.YRGFYV5P.js":"3RN9m","./chunks/chunk.36NATOJS.js":"7oQ3H","./chunks/chunk.3O6HBCDC.js":"bxfJL","./chunks/chunk.V2N6BIOE.js":"e9KlZ","./chunks/chunk.65XWAMRW.js":"eBxSx","./chunks/chunk.O4DEQ7W6.js":"ij9x2","./chunks/chunk.JEOVVW2Q.js":"keFBh","./chunks/chunk.MC6A6AKP.js":"hqIGK","./chunks/chunk.Z73GCS7X.js":"bC632","./chunks/chunk.7O2OK7EM.js":"lMIIV","./chunks/chunk.BI66FINL.js":"2TVnS","./chunks/chunk.JZCWPHAU.js":"jNzoO","./chunks/chunk.KMV7CIIK.js":"fIvnX","./chunks/chunk.XMTXH3DK.js":"hxCEx","./chunks/chunk.JZZRD643.js":"7oTcs","./chunks/chunk.UWKCXTJ6.js":"6gees","./chunks/chunk.ES6UDUT4.js":"9fLV2","./chunks/chunk.J3OIITR5.js":"a0wAB","./chunks/chunk.XUQGVVOO.js":"jF5dU","./chunks/chunk.J665TFKF.js":"k2qhw","./chunks/chunk.4THV7FKB.js":"ekfFu","./chunks/chunk.CGJIY3DQ.js":"4LeFO","./chunks/chunk.IIZXV6ZD.js":"6qZwA","./chunks/chunk.NKX6EUWB.js":"7X6a4","./chunks/chunk.O4RIR5QU.js":"dyySB","./chunks/chunk.2S5JF73M.js":"eOn8b","./chunks/chunk.NHU33QYA.js":"9rUuA","./chunks/chunk.LAHGKIFC.js":"8HF2a","./chunks/chunk.5PUW23M6.js":"9fPQ6","./chunks/chunk.FFFIC4PP.js":"es6HX","./chunks/chunk.YPEVBWRR.js":"5FDDv","./chunks/chunk.VAMZ5LPU.js":"etRwm","./chunks/chunk.TVINGWXD.js":"cWUYS","./chunks/chunk.PJVT7J2Z.js":"4AuE4","./chunks/chunk.K6ZGLWCA.js":"fCDJc","./chunks/chunk.6RNVJEU7.js":"8heq6","./chunks/chunk.ZQO5EFLY.js":"e7Coz","./chunks/chunk.3YCAREL4.js":"dQH5f","./chunks/chunk.XIW4B2T3.js":"5iFK0","./chunks/chunk.P5232U24.js":"6sIuf","./chunks/chunk.NHYPQ5NU.js":"41Ju4","./chunks/chunk.VWLJ7FK6.js":"7sI8M","./chunks/chunk.6D7VQJJD.js":"j0iGT","./chunks/chunk.UGKRZBBB.js":"fkzjD","./chunks/chunk.3CC35VHZ.js":"4S5t5","./chunks/chunk.HB3M7MDB.js":"ewttw","./chunks/chunk.PYPBGG36.js":"g2qBQ","./chunks/chunk.F4APDX5B.js":"fm9pt","./chunks/chunk.VHNS4GLL.js":"6UezC","./chunks/chunk.XVLGZ4X3.js":"amP93","./chunks/chunk.6VMJHXFC.js":"5KFV5","./chunks/chunk.5LT34KCU.js":"3VLMm","./chunks/chunk.5PGDTRSW.js":"i9chM","./chunks/chunk.ZXQWYC2K.js":"luWMM","./chunks/chunk.2XK3KP4S.js":"48xqd","./chunks/chunk.OWTE6SBA.js":"64mIH","./chunks/chunk.5WKATBUR.js":"g6qif","./chunks/chunk.E6Y7Q2OF.js":"30fXD","./chunks/chunk.T56CG5BM.js":"5yofy","./chunks/chunk.DIYFVAUN.js":"gJHLQ","./chunks/chunk.OZRKVGGH.js":"9ovDH","./chunks/chunk.A7SZ5Z2O.js":"3gOK5","./chunks/chunk.P2AL2I6L.js":"4a66x","./chunks/chunk.U5LHPAAM.js":"h0TfW","./chunks/chunk.MMVA6LRD.js":"gVisE","./chunks/chunk.5FSRBGWT.js":"byf0G","./chunks/chunk.CCTU25PV.js":"dUPzH","./chunks/chunk.XGZZXZ23.js":"lWraZ","./chunks/chunk.TUM6QOHB.js":"hrctM","./chunks/chunk.HCWNSG4V.js":"iOasC","./chunks/chunk.ZYIXUTR3.js":"FlqbK","./chunks/chunk.SXNB3LL3.js":"cN7v8","./chunks/chunk.DTSUHNT6.js":"a7RTw","./chunks/chunk.ST4GEPNZ.js":"ao9ex","./chunks/chunk.DREYVBRR.js":"jLpn7","./chunks/chunk.UEM7GD4F.js":"bnIja","./chunks/chunk.IDWMMLZB.js":"cNUUD","./chunks/chunk.CHKRDQ2C.js":"l7CRU","./chunks/chunk.TQAMNUHM.js":"7wsuv","./chunks/chunk.5IWLS7YM.js":"98Wo8","./chunks/chunk.ZNDHS74K.js":"9L9Hz","./chunks/chunk.2G6AZSJB.js":"7xhPc","./chunks/chunk.NTBOGFL4.js":"45eD3","./chunks/chunk.QNN6SHCY.js":"9EyI7","./chunks/chunk.SYKJSKOB.js":"d9cu7","./chunks/chunk.34X5S33V.js":"kvLJw","./chunks/chunk.GPPFFSGR.js":"cl2mB","./chunks/chunk.4654KI5L.js":"3AQaY","./chunks/chunk.B3QJZERK.js":"Iy7So","./chunks/chunk.ENMZKFMS.js":"haGFF","./chunks/chunk.LLDC53GL.js":"a2Diq","./chunks/chunk.BJY6LY6B.js":"9bGyV","./chunks/chunk.LX3FJWTQ.js":"3OBBm","./chunks/chunk.PKPLYXHS.js":"1qy7P","./chunks/chunk.SGGKF7FJ.js":"tUqLP","./chunks/chunk.NTGEJSVF.js":"l2n45","./chunks/chunk.5TL5QPK4.js":"akO45","./chunks/chunk.5NXHIG6M.js":"lzVZW","./chunks/chunk.H2HMKHWH.js":"fr9xc","./chunks/chunk.PSXSU6WU.js":"gMTYr","./chunks/chunk.437GBGKR.js":"bwWOC","./chunks/chunk.OOIQ4D22.js":"6PNgQ","./chunks/chunk.QSLHMB3E.js":"2Tw6u","./chunks/chunk.WCAFNYXW.js":"9Qo42","./chunks/chunk.6JY65IM5.js":"d40Fl","./chunks/chunk.UTEQRIIY.js":"h4h4P","./chunks/chunk.W2WMQSCE.js":"9o2tn","./chunks/chunk.AN2XMPAV.js":"2bW2A","./chunks/chunk.OTIAUNPC.js":"gM4yc","./chunks/chunk.GR3BL4JI.js":"9aVv6","./chunks/chunk.IBSPWXHK.js":"bRaa7","./chunks/chunk.L4IDTG64.js":"5bB1j","./chunks/chunk.C7PPQWMA.js":"szhSB","./chunks/chunk.NFF2HMIT.js":"fX0do","./chunks/chunk.HEOUBJ7T.js":"3YVet","./chunks/chunk.UJSH3WGM.js":"7vHmo","./chunks/chunk.4KUWHA33.js":"69rgo","./chunks/chunk.KJOCH52Q.js":"e6TXF","./chunks/chunk.2JQPDYNA.js":"4Ri6Y","./chunks/chunk.BD26TKS4.js":"1j2NX","./chunks/chunk.I4TE3TJV.js":"i4CGq","./chunks/chunk.5PPINAFI.js":"a2lYY","./chunks/chunk.XXINH6FV.js":"kuIR9","./chunks/chunk.FGQFMRZU.js":"9cs7U","./chunks/chunk.2VBMOEKG.js":"jJ4XN","./chunks/chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OEZr":[function(require,module,exports) {

},{}],"b8hiA":[function(require,module,exports) {

},{}],"hfHSC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlVisuallyHidden", ()=>SlVisuallyHidden
);
var _chunk65XWAMRWJs = require("./chunk.65XWAMRW.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/visually-hidden/visually-hidden.ts
var SlVisuallyHidden = class extends _chunk2VBMOEKGJs.s {
    render() {
        return _chunk2VBMOEKGJs.$` <slot></slot> `;
    }
};
SlVisuallyHidden.styles = _chunk65XWAMRWJs.visually_hidden_styles_default;
SlVisuallyHidden = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-visually-hidden")
], SlVisuallyHidden);

},{"./chunk.65XWAMRW.js":"eBxSx","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eBxSx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "visually_hidden_styles_default", ()=>visually_hidden_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/visually-hidden/visually-hidden.styles.ts
var visually_hidden_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host(:not(:focus-within)) {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    clip: rect(0 0 0 0) !important;
    clip-path: inset(50%) !important;
    border: none !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cs7U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "component_styles_default", ()=>component_styles_default
);
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/styles/utility.styles.ts
var utility_styles_default = _chunk2VBMOEKGJs.r`
  .sl-scroll-lock {
    overflow: hidden !important;
  }

  .sl-toast-stack {
    position: fixed;
    top: 0;
    right: 0;
    z-index: var(--sl-z-index-toast);
    width: 28rem;
    max-width: 100%;
    max-height: 100%;
    overflow: auto;
  }

  .sl-toast-stack sl-alert {
    --box-shadow: var(--sl-shadow-large);
    margin: var(--sl-spacing-medium);
  }
`;
// src/styles/component.styles.ts
var component_styles_default = _chunk2VBMOEKGJs.r`
  :host {
    box-sizing: border-box;
  }

  :host *,
  :host *::before,
  :host *::after {
    box-sizing: inherit;
  }

  [hidden] {
    display: none !important;
  }
`;
var style = document.createElement("style");
style.textContent = utility_styles_default.toString();
document.head.append(style);

},{"./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJ4XN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>$
) /**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */  /**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
parcelHelpers.export(exports, "y", ()=>y
);
parcelHelpers.export(exports, "b", ()=>b
);
parcelHelpers.export(exports, "w", ()=>w
);
parcelHelpers.export(exports, "o", ()=>o2
);
parcelHelpers.export(exports, "r", ()=>r2
);
parcelHelpers.export(exports, "s", ()=>s4
);
// node_modules/lit-html/lit-html.js
var t;
var i = globalThis.trustedTypes;
var s = i ? i.createPolicy("lit-html", {
    createHTML: (t4)=>t4
}) : void 0;
var e = `lit$${(Math.random() + "").slice(9)}$`;
var o = "?" + e;
var n = `<${o}>`;
var l = document;
var h = (t4 = "")=>l.createComment(t4)
;
var r = (t4)=>t4 === null || typeof t4 != "object" && typeof t4 != "function"
;
var d = Array.isArray;
var u = (t4)=>{
    var i4;
    return d(t4) || typeof ((i4 = t4) === null || i4 === void 0 ? void 0 : i4[Symbol.iterator]) == "function";
};
var c = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var v = /-->/g;
var a = />/g;
var f = />|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g;
var _ = /'/g;
var m = /"/g;
var g = /^(?:script|style|textarea)$/i;
var p = (t4)=>(i4, ...s7)=>({
            _$litType$: t4,
            strings: i4,
            values: s7
        })
;
var $ = p(1);
var y = p(2);
var b = Symbol.for("lit-noChange");
var w = Symbol.for("lit-nothing");
var T = /* @__PURE__ */ new WeakMap();
var x = (t4, i4, s7)=>{
    var e6, o7;
    const n7 = (e6 = s7 == null ? void 0 : s7.renderBefore) !== null && e6 !== void 0 ? e6 : i4;
    let l5 = n7._$litPart$;
    if (l5 === void 0) {
        const t5 = (o7 = s7 == null ? void 0 : s7.renderBefore) !== null && o7 !== void 0 ? o7 : null;
        n7._$litPart$ = l5 = new N(i4.insertBefore(h(), t5), t5, void 0, s7 != null ? s7 : {
        });
    }
    return l5._$AI(t4), l5;
};
var A = l.createTreeWalker(l, 129, null, false);
var C = (t4, i4)=>{
    const o7 = t4.length - 1, l5 = [];
    let h4, r6 = i4 === 2 ? "<svg>" : "", d2 = c;
    for(let i5 = 0; i5 < o7; i5++){
        const s7 = t4[i5];
        let o8, u3, p2 = -1, $2 = 0;
        for(; $2 < s7.length && (d2.lastIndex = $2, u3 = d2.exec(s7), u3 !== null);)$2 = d2.lastIndex, d2 === c ? u3[1] === "!--" ? d2 = v : u3[1] !== void 0 ? d2 = a : u3[2] !== void 0 ? (g.test(u3[2]) && (h4 = RegExp("</" + u3[2], "g")), d2 = f) : u3[3] !== void 0 && (d2 = f) : d2 === f ? u3[0] === ">" ? (d2 = h4 != null ? h4 : c, p2 = -1) : u3[1] === void 0 ? p2 = -2 : (p2 = d2.lastIndex - u3[2].length, o8 = u3[1], d2 = u3[3] === void 0 ? f : u3[3] === '"' ? m : _) : d2 === m || d2 === _ ? d2 = f : d2 === v || d2 === a ? d2 = c : (d2 = f, h4 = void 0);
        const y2 = d2 === f && t4[i5 + 1].startsWith("/>") ? " " : "";
        r6 += d2 === c ? s7 + n : p2 >= 0 ? (l5.push(o8), s7.slice(0, p2) + "$lit$" + s7.slice(p2) + e + y2) : s7 + e + (p2 === -2 ? (l5.push(void 0), i5) : y2);
    }
    const u2 = r6 + (t4[o7] || "<?>") + (i4 === 2 ? "</svg>" : "");
    if (!Array.isArray(t4) || !t4.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return [
        s !== void 0 ? s.createHTML(u2) : u2,
        l5
    ];
};
var E = class {
    constructor({ strings: t4 , _$litType$: s7  }, n7){
        let l5;
        this.parts = [];
        let r6 = 0, d2 = 0;
        const u2 = t4.length - 1, c2 = this.parts, [v2, a4] = C(t4, s7);
        if (this.el = E.createElement(v2, n7), A.currentNode = this.el.content, s7 === 2) {
            const t5 = this.el.content, i4 = t5.firstChild;
            i4.remove(), t5.append(...i4.childNodes);
        }
        for(; (l5 = A.nextNode()) !== null && c2.length < u2;){
            if (l5.nodeType === 1) {
                if (l5.hasAttributes()) {
                    const t5 = [];
                    for (const i4 of l5.getAttributeNames())if (i4.endsWith("$lit$") || i4.startsWith(e)) {
                        const s8 = a4[d2++];
                        if (t5.push(i4), s8 !== void 0) {
                            const t6 = l5.getAttribute(s8.toLowerCase() + "$lit$").split(e), i5 = /([.?@])?(.*)/.exec(s8);
                            c2.push({
                                type: 1,
                                index: r6,
                                name: i5[2],
                                strings: t6,
                                ctor: i5[1] === "." ? M : i5[1] === "?" ? H : i5[1] === "@" ? I : S
                            });
                        } else c2.push({
                            type: 6,
                            index: r6
                        });
                    }
                    for (const i41 of t5)l5.removeAttribute(i41);
                }
                if (g.test(l5.tagName)) {
                    const t5 = l5.textContent.split(e), s8 = t5.length - 1;
                    if (s8 > 0) {
                        l5.textContent = i ? i.emptyScript : "";
                        for(let i4 = 0; i4 < s8; i4++)l5.append(t5[i4], h()), A.nextNode(), c2.push({
                            type: 2,
                            index: ++r6
                        });
                        l5.append(t5[s8], h());
                    }
                }
            } else if (l5.nodeType === 8) {
                if (l5.data === o) c2.push({
                    type: 2,
                    index: r6
                });
                else {
                    let t5 = -1;
                    for(; (t5 = l5.data.indexOf(e, t5 + 1)) !== -1;)c2.push({
                        type: 7,
                        index: r6
                    }), t5 += e.length - 1;
                }
            }
            r6++;
        }
    }
    static createElement(t4, i4) {
        const s7 = l.createElement("template");
        return s7.innerHTML = t4, s7;
    }
};
function P(t4, i4, s7 = t4, e6) {
    var o7, n7, l5, h4;
    if (i4 === b) return i4;
    let d2 = e6 !== void 0 ? (o7 = s7._$Cl) === null || o7 === void 0 ? void 0 : o7[e6] : s7._$Cu;
    const u2 = r(i4) ? void 0 : i4._$litDirective$;
    return (d2 == null ? void 0 : d2.constructor) !== u2 && ((n7 = d2 == null ? void 0 : d2._$AO) === null || n7 === void 0 || n7.call(d2, false), u2 === void 0 ? d2 = void 0 : (d2 = new u2(t4), d2._$AT(t4, s7, e6)), e6 !== void 0 ? ((l5 = (h4 = s7)._$Cl) !== null && l5 !== void 0 ? l5 : h4._$Cl = [])[e6] = d2 : s7._$Cu = d2), d2 !== void 0 && (i4 = P(t4, d2._$AS(t4, i4.values), d2, e6)), i4;
}
var V = class {
    constructor(t4, i4){
        this.v = [], this._$AN = void 0, this._$AD = t4, this._$AM = i4;
    }
    get parentNode() {
        return this._$AM.parentNode;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    p(t4) {
        var i4;
        const { el: { content: s7  } , parts: e6  } = this._$AD, o7 = ((i4 = t4 == null ? void 0 : t4.creationScope) !== null && i4 !== void 0 ? i4 : l).importNode(s7, true);
        A.currentNode = o7;
        let n7 = A.nextNode(), h4 = 0, r6 = 0, d2 = e6[0];
        for(; d2 !== void 0;){
            if (h4 === d2.index) {
                let i5;
                d2.type === 2 ? i5 = new N(n7, n7.nextSibling, this, t4) : d2.type === 1 ? i5 = new d2.ctor(n7, d2.name, d2.strings, this, t4) : d2.type === 6 && (i5 = new L(n7, this, t4)), this.v.push(i5), d2 = e6[++r6];
            }
            h4 !== (d2 == null ? void 0 : d2.index) && (n7 = A.nextNode(), h4++);
        }
        return o7;
    }
    m(t4) {
        let i4 = 0;
        for (const s7 of this.v)s7 !== void 0 && (s7.strings !== void 0 ? (s7._$AI(t4, s7, i4), i4 += s7.strings.length - 2) : s7._$AI(t4[i4])), i4++;
    }
};
var N = class {
    constructor(t4, i4, s7, e6){
        var o7;
        this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t4, this._$AB = i4, this._$AM = s7, this.options = e6, this._$Cg = (o7 = e6 == null ? void 0 : e6.isConnected) === null || o7 === void 0 || o7;
    }
    get _$AU() {
        var t4, i4;
        return (i4 = (t4 = this._$AM) === null || t4 === void 0 ? void 0 : t4._$AU) !== null && i4 !== void 0 ? i4 : this._$Cg;
    }
    get parentNode() {
        let t4 = this._$AA.parentNode;
        const i4 = this._$AM;
        return i4 !== void 0 && t4.nodeType === 11 && (t4 = i4.parentNode), t4;
    }
    get startNode() {
        return this._$AA;
    }
    get endNode() {
        return this._$AB;
    }
    _$AI(t4, i4 = this) {
        t4 = P(this, t4, i4), r(t4) ? t4 === w || t4 == null || t4 === "" ? (this._$AH !== w && this._$AR(), this._$AH = w) : t4 !== this._$AH && t4 !== b && this.$(t4) : t4._$litType$ !== void 0 ? this.T(t4) : t4.nodeType !== void 0 ? this.S(t4) : u(t4) ? this.A(t4) : this.$(t4);
    }
    M(t4, i4 = this._$AB) {
        return this._$AA.parentNode.insertBefore(t4, i4);
    }
    S(t4) {
        this._$AH !== t4 && (this._$AR(), this._$AH = this.M(t4));
    }
    $(t4) {
        this._$AH !== w && r(this._$AH) ? this._$AA.nextSibling.data = t4 : this.S(l.createTextNode(t4)), this._$AH = t4;
    }
    T(t4) {
        var i4;
        const { values: s7 , _$litType$: e6  } = t4, o7 = typeof e6 == "number" ? this._$AC(t4) : (e6.el === void 0 && (e6.el = E.createElement(e6.h, this.options)), e6);
        if (((i4 = this._$AH) === null || i4 === void 0 ? void 0 : i4._$AD) === o7) this._$AH.m(s7);
        else {
            const t5 = new V(o7, this), i5 = t5.p(this.options);
            t5.m(s7), this.S(i5), this._$AH = t5;
        }
    }
    _$AC(t4) {
        let i4 = T.get(t4.strings);
        return i4 === void 0 && T.set(t4.strings, i4 = new E(t4)), i4;
    }
    A(t4) {
        d(this._$AH) || (this._$AH = [], this._$AR());
        const i4 = this._$AH;
        let s7, e6 = 0;
        for (const o7 of t4)e6 === i4.length ? i4.push(s7 = new N(this.M(h()), this.M(h()), this, this.options)) : s7 = i4[e6], s7._$AI(o7), e6++;
        e6 < i4.length && (this._$AR(s7 && s7._$AB.nextSibling, e6), i4.length = e6);
    }
    _$AR(t4 = this._$AA.nextSibling, i4) {
        var s7;
        for((s7 = this._$AP) === null || s7 === void 0 || s7.call(this, false, true, i4); t4 && t4 !== this._$AB;){
            const i5 = t4.nextSibling;
            t4.remove(), t4 = i5;
        }
    }
    setConnected(t4) {
        var i4;
        this._$AM === void 0 && (this._$Cg = t4, (i4 = this._$AP) === null || i4 === void 0 || i4.call(this, t4));
    }
};
var S = class {
    constructor(t4, i4, s7, e6, o7){
        this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t4, this.name = i4, this._$AM = e6, this.options = o7, s7.length > 2 || s7[0] !== "" || s7[1] !== "" ? (this._$AH = Array(s7.length - 1).fill(new String()), this.strings = s7) : this._$AH = w;
    }
    get tagName() {
        return this.element.tagName;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t4, i4 = this, s7, e6) {
        const o7 = this.strings;
        let n7 = false;
        if (o7 === void 0) t4 = P(this, t4, i4, 0), n7 = !r(t4) || t4 !== this._$AH && t4 !== b, n7 && (this._$AH = t4);
        else {
            const e7 = t4;
            let l5, h4;
            for(t4 = o7[0], l5 = 0; l5 < o7.length - 1; l5++)h4 = P(this, e7[s7 + l5], i4, l5), h4 === b && (h4 = this._$AH[l5]), n7 || (n7 = !r(h4) || h4 !== this._$AH[l5]), h4 === w ? t4 = w : t4 !== w && (t4 += (h4 != null ? h4 : "") + o7[l5 + 1]), this._$AH[l5] = h4;
        }
        n7 && !e6 && this.k(t4);
    }
    k(t4) {
        t4 === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t4 != null ? t4 : "");
    }
};
var M = class extends S {
    constructor(){
        super(...arguments), this.type = 3;
    }
    k(t4) {
        this.element[this.name] = t4 === w ? void 0 : t4;
    }
};
var k = i ? i.emptyScript : "";
var H = class extends S {
    constructor(){
        super(...arguments), this.type = 4;
    }
    k(t4) {
        t4 && t4 !== w ? this.element.setAttribute(this.name, k) : this.element.removeAttribute(this.name);
    }
};
var I = class extends S {
    constructor(t4, i4, s7, e6, o7){
        super(t4, i4, s7, e6, o7), this.type = 5;
    }
    _$AI(t4, i4 = this) {
        var s7;
        if ((t4 = (s7 = P(this, t4, i4, 0)) !== null && s7 !== void 0 ? s7 : w) === b) return;
        const e6 = this._$AH, o7 = t4 === w && e6 !== w || t4.capture !== e6.capture || t4.once !== e6.once || t4.passive !== e6.passive, n7 = t4 !== w && (e6 === w || o7);
        o7 && this.element.removeEventListener(this.name, this, e6), n7 && this.element.addEventListener(this.name, this, t4), this._$AH = t4;
    }
    handleEvent(t4) {
        var i4, s7;
        typeof this._$AH == "function" ? this._$AH.call((s7 = (i4 = this.options) === null || i4 === void 0 ? void 0 : i4.host) !== null && s7 !== void 0 ? s7 : this.element, t4) : this._$AH.handleEvent(t4);
    }
};
var L = class {
    constructor(t4, i4, s7){
        this.element = t4, this.type = 6, this._$AN = void 0, this._$AM = i4, this.options = s7;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t4) {
        P(this, t4);
    }
};
var z = window.litHtmlPolyfillSupport;
z == null || z(E, N), ((t = globalThis.litHtmlVersions) !== null && t !== void 0 ? t : globalThis.litHtmlVersions = []).push("2.1.0");
// node_modules/lit-element/node_modules/@lit/reactive-element/css-tag.js
var t2 = window.ShadowRoot && (window.ShadyCSS === void 0 || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var e2 = Symbol();
var n2 = /* @__PURE__ */ new Map();
var s2 = class {
    constructor(t4, n7){
        if (this._$cssResult$ = true, n7 !== e2) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t4;
    }
    get styleSheet() {
        let e6 = n2.get(this.cssText);
        return t2 && e6 === void 0 && (n2.set(this.cssText, e6 = new CSSStyleSheet()), e6.replaceSync(this.cssText)), e6;
    }
    toString() {
        return this.cssText;
    }
};
var o2 = (t4)=>new s2(typeof t4 == "string" ? t4 : t4 + "", e2)
;
var r2 = (t4, ...n7)=>{
    const o7 = t4.length === 1 ? t4[0] : n7.reduce((e6, n8, s7)=>e6 + ((t5)=>{
            if (t5._$cssResult$ === true) return t5.cssText;
            if (typeof t5 == "number") return t5;
            throw Error("Value passed to 'css' function must be a 'css' function result: " + t5 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
        })(n8) + t4[s7 + 1]
    , t4[0]);
    return new s2(o7, e2);
};
var i2 = (e6, n7)=>{
    t2 ? e6.adoptedStyleSheets = n7.map((t4)=>t4 instanceof CSSStyleSheet ? t4 : t4.styleSheet
    ) : n7.forEach((t4)=>{
        const n8 = document.createElement("style"), s7 = window.litNonce;
        s7 !== void 0 && n8.setAttribute("nonce", s7), n8.textContent = t4.cssText, e6.appendChild(n8);
    });
};
var S2 = t2 ? (t4)=>t4
 : (t4)=>t4 instanceof CSSStyleSheet ? ((t5)=>{
        let e6 = "";
        for (const n7 of t5.cssRules)e6 += n7.cssText;
        return o2(e6);
    })(t4) : t4
;
// node_modules/lit-element/node_modules/@lit/reactive-element/reactive-element.js
var s3;
var e3 = window.trustedTypes;
var r3 = e3 ? e3.emptyScript : "";
var h2 = window.reactiveElementPolyfillSupport;
var o3 = {
    toAttribute (t4, i4) {
        switch(i4){
            case Boolean:
                t4 = t4 ? r3 : null;
                break;
            case Object:
            case Array:
                t4 = t4 == null ? t4 : JSON.stringify(t4);
        }
        return t4;
    },
    fromAttribute (t4, i4) {
        let s7 = t4;
        switch(i4){
            case Boolean:
                s7 = t4 !== null;
                break;
            case Number:
                s7 = t4 === null ? null : Number(t4);
                break;
            case Object:
            case Array:
                try {
                    s7 = JSON.parse(t4);
                } catch (t5) {
                    s7 = null;
                }
        }
        return s7;
    }
};
var n3 = (t4, i4)=>i4 !== t4 && (i4 == i4 || t4 == t4)
;
var l2 = {
    attribute: true,
    type: String,
    converter: o3,
    reflect: false,
    hasChanged: n3
};
var a2 = class extends HTMLElement {
    constructor(){
        super(), this._$Et = /* @__PURE__ */ new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$Ei = null, this.o();
    }
    static addInitializer(t4) {
        var i4;
        (i4 = this.l) !== null && i4 !== void 0 || (this.l = []), this.l.push(t4);
    }
    static get observedAttributes() {
        this.finalize();
        const t4 = [];
        return this.elementProperties.forEach((i4, s7)=>{
            const e6 = this._$Eh(s7, i4);
            e6 !== void 0 && (this._$Eu.set(e6, s7), t4.push(e6));
        }), t4;
    }
    static createProperty(t4, i4 = l2) {
        if (i4.state && (i4.attribute = false), this.finalize(), this.elementProperties.set(t4, i4), !i4.noAccessor && !this.prototype.hasOwnProperty(t4)) {
            const s7 = typeof t4 == "symbol" ? Symbol() : "__" + t4, e6 = this.getPropertyDescriptor(t4, s7, i4);
            e6 !== void 0 && Object.defineProperty(this.prototype, t4, e6);
        }
    }
    static getPropertyDescriptor(t4, i4, s7) {
        return {
            get () {
                return this[i4];
            },
            set (e6) {
                const r6 = this[t4];
                this[i4] = e6, this.requestUpdate(t4, r6, s7);
            },
            configurable: true,
            enumerable: true
        };
    }
    static getPropertyOptions(t4) {
        return this.elementProperties.get(t4) || l2;
    }
    static finalize() {
        if (this.hasOwnProperty("finalized")) return false;
        this.finalized = true;
        const t4 = Object.getPrototypeOf(this);
        if (t4.finalize(), this.elementProperties = new Map(t4.elementProperties), this._$Eu = /* @__PURE__ */ new Map(), this.hasOwnProperty("properties")) {
            const t5 = this.properties, i4 = [
                ...Object.getOwnPropertyNames(t5),
                ...Object.getOwnPropertySymbols(t5)
            ];
            for (const s7 of i4)this.createProperty(s7, t5[s7]);
        }
        return this.elementStyles = this.finalizeStyles(this.styles), true;
    }
    static finalizeStyles(i4) {
        const s7 = [];
        if (Array.isArray(i4)) {
            const e6 = new Set(i4.flat(1 / 0).reverse());
            for (const i5 of e6)s7.unshift(S2(i5));
        } else i4 !== void 0 && s7.push(S2(i4));
        return s7;
    }
    static _$Eh(t4, i4) {
        const s7 = i4.attribute;
        return s7 === false ? void 0 : typeof s7 == "string" ? s7 : typeof t4 == "string" ? t4.toLowerCase() : void 0;
    }
    o() {
        var t4;
        this._$Ep = new Promise((t5)=>this.enableUpdating = t5
        ), this._$AL = /* @__PURE__ */ new Map(), this._$Em(), this.requestUpdate(), (t4 = this.constructor.l) === null || t4 === void 0 || t4.forEach((t5)=>t5(this)
        );
    }
    addController(t4) {
        var i4, s7;
        ((i4 = this._$Eg) !== null && i4 !== void 0 ? i4 : this._$Eg = []).push(t4), this.renderRoot !== void 0 && this.isConnected && ((s7 = t4.hostConnected) === null || s7 === void 0 || s7.call(t4));
    }
    removeController(t4) {
        var i4;
        (i4 = this._$Eg) === null || i4 === void 0 || i4.splice(this._$Eg.indexOf(t4) >>> 0, 1);
    }
    _$Em() {
        this.constructor.elementProperties.forEach((t4, i4)=>{
            this.hasOwnProperty(i4) && (this._$Et.set(i4, this[i4]), delete this[i4]);
        });
    }
    createRenderRoot() {
        var t4;
        const s7 = (t4 = this.shadowRoot) !== null && t4 !== void 0 ? t4 : this.attachShadow(this.constructor.shadowRootOptions);
        return i2(s7, this.constructor.elementStyles), s7;
    }
    connectedCallback() {
        var t4;
        this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
            var i4;
            return (i4 = t5.hostConnected) === null || i4 === void 0 ? void 0 : i4.call(t5);
        });
    }
    enableUpdating(t4) {
    }
    disconnectedCallback() {
        var t4;
        (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
            var i4;
            return (i4 = t5.hostDisconnected) === null || i4 === void 0 ? void 0 : i4.call(t5);
        });
    }
    attributeChangedCallback(t4, i4, s7) {
        this._$AK(t4, s7);
    }
    _$ES(t4, i4, s7 = l2) {
        var e6, r6;
        const h4 = this.constructor._$Eh(t4, s7);
        if (h4 !== void 0 && s7.reflect === true) {
            const n7 = ((r6 = (e6 = s7.converter) === null || e6 === void 0 ? void 0 : e6.toAttribute) !== null && r6 !== void 0 ? r6 : o3.toAttribute)(i4, s7.type);
            this._$Ei = t4, n7 == null ? this.removeAttribute(h4) : this.setAttribute(h4, n7), this._$Ei = null;
        }
    }
    _$AK(t4, i4) {
        var s7, e6, r6;
        const h4 = this.constructor, n7 = h4._$Eu.get(t4);
        if (n7 !== void 0 && this._$Ei !== n7) {
            const t5 = h4.getPropertyOptions(n7), l5 = t5.converter, a4 = (r6 = (e6 = (s7 = l5) === null || s7 === void 0 ? void 0 : s7.fromAttribute) !== null && e6 !== void 0 ? e6 : typeof l5 == "function" ? l5 : null) !== null && r6 !== void 0 ? r6 : o3.fromAttribute;
            this._$Ei = n7, this[n7] = a4(i4, t5.type), this._$Ei = null;
        }
    }
    requestUpdate(t4, i4, s7) {
        let e6 = true;
        t4 !== void 0 && (((s7 = s7 || this.constructor.getPropertyOptions(t4)).hasChanged || n3)(this[t4], i4) ? (this._$AL.has(t4) || this._$AL.set(t4, i4), s7.reflect === true && this._$Ei !== t4 && (this._$E_ === void 0 && (this._$E_ = /* @__PURE__ */ new Map()), this._$E_.set(t4, s7))) : e6 = false), !this.isUpdatePending && e6 && (this._$Ep = this._$EC());
    }
    async _$EC() {
        this.isUpdatePending = true;
        try {
            await this._$Ep;
        } catch (t5) {
            Promise.reject(t5);
        }
        const t4 = this.scheduleUpdate();
        return t4 != null && await t4, !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        var t4;
        if (!this.isUpdatePending) return;
        this.hasUpdated, this._$Et && (this._$Et.forEach((t5, i5)=>this[i5] = t5
        ), this._$Et = void 0);
        let i4 = false;
        const s7 = this._$AL;
        try {
            i4 = this.shouldUpdate(s7), i4 ? (this.willUpdate(s7), (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
                var i5;
                return (i5 = t5.hostUpdate) === null || i5 === void 0 ? void 0 : i5.call(t5);
            }), this.update(s7)) : this._$EU();
        } catch (t5) {
            throw i4 = false, this._$EU(), t5;
        }
        i4 && this._$AE(s7);
    }
    willUpdate(t4) {
    }
    _$AE(t4) {
        var i4;
        (i4 = this._$Eg) === null || i4 === void 0 || i4.forEach((t5)=>{
            var i5;
            return (i5 = t5.hostUpdated) === null || i5 === void 0 ? void 0 : i5.call(t5);
        }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t4)), this.updated(t4);
    }
    _$EU() {
        this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$Ep;
    }
    shouldUpdate(t4) {
        return true;
    }
    update(t4) {
        this._$E_ !== void 0 && (this._$E_.forEach((t5, i4)=>this._$ES(i4, this[i4], t5)
        ), this._$E_ = void 0), this._$EU();
    }
    updated(t4) {
    }
    firstUpdated(t4) {
    }
};
a2.finalized = true, a2.elementProperties = /* @__PURE__ */ new Map(), a2.elementStyles = [], a2.shadowRootOptions = {
    mode: "open"
}, h2 == null || h2({
    ReactiveElement: a2
}), ((s3 = globalThis.reactiveElementVersions) !== null && s3 !== void 0 ? s3 : globalThis.reactiveElementVersions = []).push("1.1.0");
// node_modules/lit-element/lit-element.js
var l3;
var o4;
var s4 = class extends a2 {
    constructor(){
        super(...arguments), this.renderOptions = {
            host: this
        }, this._$Dt = void 0;
    }
    createRenderRoot() {
        var t4, e6;
        const i4 = super.createRenderRoot();
        return (t4 = (e6 = this.renderOptions).renderBefore) !== null && t4 !== void 0 || (e6.renderBefore = i4.firstChild), i4;
    }
    update(t4) {
        const i4 = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t4), this._$Dt = x(i4, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
        var t4;
        super.connectedCallback(), (t4 = this._$Dt) === null || t4 === void 0 || t4.setConnected(true);
    }
    disconnectedCallback() {
        var t4;
        super.disconnectedCallback(), (t4 = this._$Dt) === null || t4 === void 0 || t4.setConnected(false);
    }
    render() {
        return b;
    }
};
s4.finalized = true, s4._$litElement$ = true, (l3 = globalThis.litElementHydrateSupport) === null || l3 === void 0 || l3.call(globalThis, {
    LitElement: s4
});
var n4 = globalThis.litElementPolyfillSupport;
n4 == null || n4({
    LitElement: s4
});
((o4 = globalThis.litElementVersions) !== null && o4 !== void 0 ? o4 : globalThis.litElementVersions = []).push("3.1.0");
// node_modules/lit/node_modules/@lit/reactive-element/css-tag.js
var t3 = window.ShadowRoot && (window.ShadyCSS === void 0 || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var e4 = Symbol();
var n5 = /* @__PURE__ */ new Map();
var s5 = class {
    constructor(t4, n7){
        if (this._$cssResult$ = true, n7 !== e4) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t4;
    }
    get styleSheet() {
        let e6 = n5.get(this.cssText);
        return t3 && e6 === void 0 && (n5.set(this.cssText, e6 = new CSSStyleSheet()), e6.replaceSync(this.cssText)), e6;
    }
    toString() {
        return this.cssText;
    }
};
var o5 = (t4)=>new s5(typeof t4 == "string" ? t4 : t4 + "", e4)
;
var i3 = (e6, n7)=>{
    t3 ? e6.adoptedStyleSheets = n7.map((t4)=>t4 instanceof CSSStyleSheet ? t4 : t4.styleSheet
    ) : n7.forEach((t4)=>{
        const n8 = document.createElement("style"), s7 = window.litNonce;
        s7 !== void 0 && n8.setAttribute("nonce", s7), n8.textContent = t4.cssText, e6.appendChild(n8);
    });
};
var S3 = t3 ? (t4)=>t4
 : (t4)=>t4 instanceof CSSStyleSheet ? ((t5)=>{
        let e6 = "";
        for (const n7 of t5.cssRules)e6 += n7.cssText;
        return o5(e6);
    })(t4) : t4
;
// node_modules/lit/node_modules/@lit/reactive-element/reactive-element.js
var s6;
var e5 = window.trustedTypes;
var r5 = e5 ? e5.emptyScript : "";
var h3 = window.reactiveElementPolyfillSupport;
var o6 = {
    toAttribute (t4, i4) {
        switch(i4){
            case Boolean:
                t4 = t4 ? r5 : null;
                break;
            case Object:
            case Array:
                t4 = t4 == null ? t4 : JSON.stringify(t4);
        }
        return t4;
    },
    fromAttribute (t4, i4) {
        let s7 = t4;
        switch(i4){
            case Boolean:
                s7 = t4 !== null;
                break;
            case Number:
                s7 = t4 === null ? null : Number(t4);
                break;
            case Object:
            case Array:
                try {
                    s7 = JSON.parse(t4);
                } catch (t5) {
                    s7 = null;
                }
        }
        return s7;
    }
};
var n6 = (t4, i4)=>i4 !== t4 && (i4 == i4 || t4 == t4)
;
var l4 = {
    attribute: true,
    type: String,
    converter: o6,
    reflect: false,
    hasChanged: n6
};
var a3 = class extends HTMLElement {
    constructor(){
        super(), this._$Et = /* @__PURE__ */ new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$Ei = null, this.o();
    }
    static addInitializer(t4) {
        var i4;
        (i4 = this.l) !== null && i4 !== void 0 || (this.l = []), this.l.push(t4);
    }
    static get observedAttributes() {
        this.finalize();
        const t4 = [];
        return this.elementProperties.forEach((i4, s7)=>{
            const e6 = this._$Eh(s7, i4);
            e6 !== void 0 && (this._$Eu.set(e6, s7), t4.push(e6));
        }), t4;
    }
    static createProperty(t4, i4 = l4) {
        if (i4.state && (i4.attribute = false), this.finalize(), this.elementProperties.set(t4, i4), !i4.noAccessor && !this.prototype.hasOwnProperty(t4)) {
            const s7 = typeof t4 == "symbol" ? Symbol() : "__" + t4, e6 = this.getPropertyDescriptor(t4, s7, i4);
            e6 !== void 0 && Object.defineProperty(this.prototype, t4, e6);
        }
    }
    static getPropertyDescriptor(t4, i4, s7) {
        return {
            get () {
                return this[i4];
            },
            set (e6) {
                const r6 = this[t4];
                this[i4] = e6, this.requestUpdate(t4, r6, s7);
            },
            configurable: true,
            enumerable: true
        };
    }
    static getPropertyOptions(t4) {
        return this.elementProperties.get(t4) || l4;
    }
    static finalize() {
        if (this.hasOwnProperty("finalized")) return false;
        this.finalized = true;
        const t4 = Object.getPrototypeOf(this);
        if (t4.finalize(), this.elementProperties = new Map(t4.elementProperties), this._$Eu = /* @__PURE__ */ new Map(), this.hasOwnProperty("properties")) {
            const t5 = this.properties, i4 = [
                ...Object.getOwnPropertyNames(t5),
                ...Object.getOwnPropertySymbols(t5)
            ];
            for (const s7 of i4)this.createProperty(s7, t5[s7]);
        }
        return this.elementStyles = this.finalizeStyles(this.styles), true;
    }
    static finalizeStyles(i4) {
        const s7 = [];
        if (Array.isArray(i4)) {
            const e6 = new Set(i4.flat(1 / 0).reverse());
            for (const i5 of e6)s7.unshift(S3(i5));
        } else i4 !== void 0 && s7.push(S3(i4));
        return s7;
    }
    static _$Eh(t4, i4) {
        const s7 = i4.attribute;
        return s7 === false ? void 0 : typeof s7 == "string" ? s7 : typeof t4 == "string" ? t4.toLowerCase() : void 0;
    }
    o() {
        var t4;
        this._$Ep = new Promise((t5)=>this.enableUpdating = t5
        ), this._$AL = /* @__PURE__ */ new Map(), this._$Em(), this.requestUpdate(), (t4 = this.constructor.l) === null || t4 === void 0 || t4.forEach((t5)=>t5(this)
        );
    }
    addController(t4) {
        var i4, s7;
        ((i4 = this._$Eg) !== null && i4 !== void 0 ? i4 : this._$Eg = []).push(t4), this.renderRoot !== void 0 && this.isConnected && ((s7 = t4.hostConnected) === null || s7 === void 0 || s7.call(t4));
    }
    removeController(t4) {
        var i4;
        (i4 = this._$Eg) === null || i4 === void 0 || i4.splice(this._$Eg.indexOf(t4) >>> 0, 1);
    }
    _$Em() {
        this.constructor.elementProperties.forEach((t4, i4)=>{
            this.hasOwnProperty(i4) && (this._$Et.set(i4, this[i4]), delete this[i4]);
        });
    }
    createRenderRoot() {
        var t4;
        const s7 = (t4 = this.shadowRoot) !== null && t4 !== void 0 ? t4 : this.attachShadow(this.constructor.shadowRootOptions);
        return i3(s7, this.constructor.elementStyles), s7;
    }
    connectedCallback() {
        var t4;
        this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
            var i4;
            return (i4 = t5.hostConnected) === null || i4 === void 0 ? void 0 : i4.call(t5);
        });
    }
    enableUpdating(t4) {
    }
    disconnectedCallback() {
        var t4;
        (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
            var i4;
            return (i4 = t5.hostDisconnected) === null || i4 === void 0 ? void 0 : i4.call(t5);
        });
    }
    attributeChangedCallback(t4, i4, s7) {
        this._$AK(t4, s7);
    }
    _$ES(t4, i4, s7 = l4) {
        var e6, r6;
        const h4 = this.constructor._$Eh(t4, s7);
        if (h4 !== void 0 && s7.reflect === true) {
            const n7 = ((r6 = (e6 = s7.converter) === null || e6 === void 0 ? void 0 : e6.toAttribute) !== null && r6 !== void 0 ? r6 : o6.toAttribute)(i4, s7.type);
            this._$Ei = t4, n7 == null ? this.removeAttribute(h4) : this.setAttribute(h4, n7), this._$Ei = null;
        }
    }
    _$AK(t4, i4) {
        var s7, e6, r6;
        const h4 = this.constructor, n7 = h4._$Eu.get(t4);
        if (n7 !== void 0 && this._$Ei !== n7) {
            const t5 = h4.getPropertyOptions(n7), l5 = t5.converter, a4 = (r6 = (e6 = (s7 = l5) === null || s7 === void 0 ? void 0 : s7.fromAttribute) !== null && e6 !== void 0 ? e6 : typeof l5 == "function" ? l5 : null) !== null && r6 !== void 0 ? r6 : o6.fromAttribute;
            this._$Ei = n7, this[n7] = a4(i4, t5.type), this._$Ei = null;
        }
    }
    requestUpdate(t4, i4, s7) {
        let e6 = true;
        t4 !== void 0 && (((s7 = s7 || this.constructor.getPropertyOptions(t4)).hasChanged || n6)(this[t4], i4) ? (this._$AL.has(t4) || this._$AL.set(t4, i4), s7.reflect === true && this._$Ei !== t4 && (this._$E_ === void 0 && (this._$E_ = /* @__PURE__ */ new Map()), this._$E_.set(t4, s7))) : e6 = false), !this.isUpdatePending && e6 && (this._$Ep = this._$EC());
    }
    async _$EC() {
        this.isUpdatePending = true;
        try {
            await this._$Ep;
        } catch (t5) {
            Promise.reject(t5);
        }
        const t4 = this.scheduleUpdate();
        return t4 != null && await t4, !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        var t4;
        if (!this.isUpdatePending) return;
        this.hasUpdated, this._$Et && (this._$Et.forEach((t5, i5)=>this[i5] = t5
        ), this._$Et = void 0);
        let i4 = false;
        const s7 = this._$AL;
        try {
            i4 = this.shouldUpdate(s7), i4 ? (this.willUpdate(s7), (t4 = this._$Eg) === null || t4 === void 0 || t4.forEach((t5)=>{
                var i5;
                return (i5 = t5.hostUpdate) === null || i5 === void 0 ? void 0 : i5.call(t5);
            }), this.update(s7)) : this._$EU();
        } catch (t5) {
            throw i4 = false, this._$EU(), t5;
        }
        i4 && this._$AE(s7);
    }
    willUpdate(t4) {
    }
    _$AE(t4) {
        var i4;
        (i4 = this._$Eg) === null || i4 === void 0 || i4.forEach((t5)=>{
            var i5;
            return (i5 = t5.hostUpdated) === null || i5 === void 0 ? void 0 : i5.call(t5);
        }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t4)), this.updated(t4);
    }
    _$EU() {
        this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$Ep;
    }
    shouldUpdate(t4) {
        return true;
    }
    update(t4) {
        this._$E_ !== void 0 && (this._$E_.forEach((t5, i4)=>this._$ES(i4, this[i4], t5)
        ), this._$E_ = void 0), this._$EU();
    }
    updated(t4) {
    }
    firstUpdated(t4) {
    }
};
a3.finalized = true, a3.elementProperties = /* @__PURE__ */ new Map(), a3.elementStyles = [], a3.shadowRootOptions = {
    mode: "open"
}, h3 == null || h3({
    ReactiveElement: a3
}), ((s6 = globalThis.reactiveElementVersions) !== null && s6 !== void 0 ? s6 : globalThis.reactiveElementVersions = []).push("1.1.0");

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2lYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "n", ()=>n
) /**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */  /**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
parcelHelpers.export(exports, "e", ()=>e
);
parcelHelpers.export(exports, "t", ()=>t
);
parcelHelpers.export(exports, "i", ()=>i2
);
parcelHelpers.export(exports, "e2", ()=>e2
);
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/lit/node_modules/@lit/reactive-element/decorators/custom-element.js
var n = (n2)=>(e3)=>typeof e3 == "function" ? ((n3, e4)=>(window.customElements.define(n3, e4), e4)
        )(n2, e3) : ((n3, e4)=>{
            const { kind: t2 , elements: i3  } = e4;
            return {
                kind: t2,
                elements: i3,
                finisher (e5) {
                    window.customElements.define(n3, e5);
                }
            };
        })(n2, e3)
;
// node_modules/lit/node_modules/@lit/reactive-element/decorators/property.js
var i = (i3, e3)=>e3.kind === "method" && e3.descriptor && !("value" in e3.descriptor) ? _chunk4M3HOXYQJs.__spreadProps(_chunk4M3HOXYQJs.__spreadValues({
    }, e3), {
        finisher (n2) {
            n2.createProperty(e3.key, i3);
        }
    }) : {
        kind: "field",
        key: Symbol(),
        placement: "own",
        descriptor: {
        },
        originalKey: e3.key,
        initializer () {
            typeof e3.initializer == "function" && (this[e3.key] = e3.initializer.call(this));
        },
        finisher (n2) {
            n2.createProperty(e3.key, i3);
        }
    }
;
function e(e3) {
    return (n2, t2)=>t2 !== void 0 ? ((i3, e4, n3)=>{
            e4.constructor.createProperty(n3, i3);
        })(e3, n2, t2) : i(e3, n2)
    ;
}
// node_modules/lit/node_modules/@lit/reactive-element/decorators/state.js
function t(t2) {
    return e(_chunk4M3HOXYQJs.__spreadProps(_chunk4M3HOXYQJs.__spreadValues({
    }, t2), {
        state: true
    }));
}
// node_modules/lit/node_modules/@lit/reactive-element/decorators/base.js
var o = ({ finisher: e3 , descriptor: t2  })=>(o2, n2)=>{
        var r;
        if (n2 === void 0) {
            const n3 = (r = o2.originalKey) !== null && r !== void 0 ? r : o2.key, i3 = t2 != null ? {
                kind: "method",
                placement: "prototype",
                key: n3,
                descriptor: t2(o2.key)
            } : _chunk4M3HOXYQJs.__spreadProps(_chunk4M3HOXYQJs.__spreadValues({
            }, o2), {
                key: n3
            });
            return e3 != null && (i3.finisher = function(t3) {
                e3(t3, n3);
            }), i3;
        }
        {
            const r2 = o2.constructor;
            t2 !== void 0 && Object.defineProperty(o2, n2, t2(n2)), e3 == null || e3(r2, n2);
        }
    }
;
// node_modules/lit/node_modules/@lit/reactive-element/decorators/query.js
function i2(i3, n2) {
    return o({
        descriptor: (o2)=>{
            const t2 = {
                get () {
                    var o3, n3;
                    return (n3 = (o3 = this.renderRoot) === null || o3 === void 0 ? void 0 : o3.querySelector(i3)) !== null && n3 !== void 0 ? n3 : null;
                },
                enumerable: true,
                configurable: true
            };
            if (n2) {
                const n3 = typeof o2 == "symbol" ? Symbol() : "__" + o2;
                t2.get = function() {
                    var o3, t3;
                    return this[n3] === void 0 && (this[n3] = (t3 = (o3 = this.renderRoot) === null || o3 === void 0 ? void 0 : o3.querySelector(i3)) !== null && t3 !== void 0 ? t3 : null), this[n3];
                };
            }
            return t2;
        }
    });
}
// node_modules/lit/node_modules/@lit/reactive-element/decorators/query-async.js
function e2(e3) {
    return o({
        descriptor: (r)=>({
                async get () {
                    var r2;
                    return await this.updateComplete, (r2 = this.renderRoot) === null || r2 === void 0 ? void 0 : r2.querySelector(e3);
                },
                enumerable: true,
                configurable: true
            })
    });
}

},{"./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BRuiO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__spreadValues", ()=>__spreadValues
);
parcelHelpers.export(exports, "__spreadProps", ()=>__spreadProps
);
parcelHelpers.export(exports, "__commonJS", ()=>__commonJS
);
parcelHelpers.export(exports, "__export", ()=>__export
);
parcelHelpers.export(exports, "__toESM", ()=>__toESM
);
parcelHelpers.export(exports, "__decorateClass", ()=>__decorateClass
);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value
;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {
    }))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) {
        for (var prop of __getOwnPropSymbols(b))if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b))
;
var __markAsModule = (target)=>__defProp(target, "__esModule", {
        value: true
    })
;
var __commonJS = (cb, mod)=>function __require() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {
            }
        }).exports, mod), mod.exports;
    }
;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __reExport = (target, module, copyDefault, desc)=>{
    if (module && typeof module === "object" || typeof module === "function") {
        for (let key of __getOwnPropNames(module))if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default")) __defProp(target, key, {
            get: ()=>module[key]
            ,
            enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
        });
    }
    return target;
};
var __toESM = (module, isNodeMode)=>{
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {
    }, "default", !isNodeMode && module && module.__esModule ? {
        get: ()=>module.default
        ,
        enumerable: true
    } : {
        value: module,
        enumerable: true
    })), module);
};
var __decorateClass = (decorators, target, key, kind)=>{
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for(var i = decorators.length - 1, decorator; i >= 0; i--)if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result) __defProp(target, key, result);
    return result;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltQbx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTabPanel", ()=>SlTabPanel
);
var _chunkKMV7CIIKJs = require("./chunk.KMV7CIIK.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/tab-panel/tab-panel.ts
var id = 0;
var SlTabPanel = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.componentId = `sl-tab-panel-${++id}`;
        this.name = "";
        this.active = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.id = this.id || this.componentId;
    }
    render() {
        this.style.display = this.active ? "block" : "none";
        return _chunk2VBMOEKGJs.$`
      <div part="base" class="tab-panel" role="tabpanel" aria-hidden=${this.active ? "false" : "true"}>
        <slot></slot>
      </div>
    `;
    }
};
SlTabPanel.styles = _chunkKMV7CIIKJs.tab_panel_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlTabPanel.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTabPanel.prototype, "active", 2);
SlTabPanel = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-tab-panel")
], SlTabPanel);

},{"./chunk.KMV7CIIK.js":"fIvnX","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fIvnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tab_panel_styles_default", ()=>tab_panel_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/tab-panel/tab-panel.styles.ts
var tab_panel_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --padding: 0;

    display: block;
  }

  .tab-panel {
    border: solid 1px transparent;
    padding: var(--padding);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RN9m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTextarea", ()=>SlTextarea
);
var _chunk36NATOJSJs = require("./chunk.36NATOJS.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/textarea/textarea.ts
var id = 0;
var SlTextarea = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "help-text", "label");
        this.inputId = `textarea-${++id}`;
        this.helpTextId = `textarea-help-text-${id}`;
        this.labelId = `textarea-label-${id}`;
        this.hasFocus = false;
        this.size = "medium";
        this.value = "";
        this.filled = false;
        this.helpText = "";
        this.rows = 4;
        this.resize = "vertical";
        this.disabled = false;
        this.readonly = false;
        this.required = false;
        this.invalid = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.resizeObserver = new ResizeObserver(()=>this.setTextareaHeight()
        );
        this.updateComplete.then(()=>{
            this.setTextareaHeight();
            this.resizeObserver.observe(this.input);
        });
    }
    firstUpdated() {
        this.invalid = !this.input.checkValidity();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.resizeObserver.unobserve(this.input);
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    select() {
        return this.input.select();
    }
    scrollPosition(position) {
        if (position) {
            if (typeof position.top === "number") this.input.scrollTop = position.top;
            if (typeof position.left === "number") this.input.scrollLeft = position.left;
            return;
        }
        return {
            top: this.input.scrollTop,
            left: this.input.scrollTop
        };
    }
    setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
        return this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
    }
    setRangeText(replacement, start, end, selectMode = "preserve") {
        this.input.setRangeText(replacement, start, end, selectMode);
        if (this.value !== this.input.value) {
            this.value = this.input.value;
            _chunkI4TE3TJVJs.emit(this, "sl-input");
        }
        if (this.value !== this.input.value) {
            this.value = this.input.value;
            this.setTextareaHeight();
            _chunkI4TE3TJVJs.emit(this, "sl-input");
            _chunkI4TE3TJVJs.emit(this, "sl-change");
        }
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleChange() {
        this.value = this.input.value;
        this.setTextareaHeight();
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleInput() {
        this.value = this.input.value;
        this.setTextareaHeight();
        _chunkI4TE3TJVJs.emit(this, "sl-input");
    }
    handleRowsChange() {
        this.setTextareaHeight();
    }
    handleValueChange() {
        if (this.input) this.invalid = !this.input.checkValidity();
    }
    setTextareaHeight() {
        if (this.input) {
            if (this.resize === "auto") {
                this.input.style.height = "auto";
                this.input.style.height = this.input.scrollHeight + "px";
            } else this.input.style.height = void 0;
        }
    }
    render() {
        var _a;
        const hasLabelSlot = this.hasSlotController.test("label");
        const hasHelpTextSlot = this.hasSlotController.test("help-text");
        return _chunk4654KI5LJs.renderFormControl({
            inputId: this.inputId,
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpTextId: this.helpTextId,
            helpText: this.helpText,
            hasHelpTextSlot,
            size: this.size
        }, _chunk2VBMOEKGJs.$`
        <div
          part="base"
          class=${_chunkW2WMQSCEJs.o({
            textarea: true,
            "textarea--small": this.size === "small",
            "textarea--medium": this.size === "medium",
            "textarea--large": this.size === "large",
            "textarea--standard": !this.filled,
            "textarea--filled": this.filled,
            "textarea--disabled": this.disabled,
            "textarea--focused": this.hasFocus,
            "textarea--empty": ((_a = this.value) == null ? void 0 : _a.length) === 0,
            "textarea--invalid": this.invalid,
            "textarea--resize-none": this.resize === "none",
            "textarea--resize-vertical": this.resize === "vertical",
            "textarea--resize-auto": this.resize === "auto"
        })}
        >
          <textarea
            part="textarea"
            id=${this.inputId}
            class="textarea__control"
            name=${_chunkKJOCH52QJs.l(this.name)}
            .value=${_chunkGPPFFSGRJs.l(this.value)}
            ?disabled=${this.disabled}
            ?readonly=${this.readonly}
            ?required=${this.required}
            placeholder=${_chunkKJOCH52QJs.l(this.placeholder)}
            rows=${_chunkKJOCH52QJs.l(this.rows)}
            minlength=${_chunkKJOCH52QJs.l(this.minlength)}
            maxlength=${_chunkKJOCH52QJs.l(this.maxlength)}
            autocapitalize=${_chunkKJOCH52QJs.l(this.autocapitalize)}
            autocorrect=${_chunkKJOCH52QJs.l(this.autocorrect)}
            ?autofocus=${this.autofocus}
            spellcheck=${_chunkKJOCH52QJs.l(this.spellcheck)}
            inputmode=${_chunkKJOCH52QJs.l(this.inputmode)}
            aria-labelledby=${_chunkKJOCH52QJs.l(_chunk4654KI5LJs.getLabelledBy({
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpText: this.helpText,
            helpTextId: this.helpTextId,
            hasHelpTextSlot
        }))}
            @change=${this.handleChange}
            @input=${this.handleInput}
            @focus=${this.handleFocus}
            @blur=${this.handleBlur}
          ></textarea>
        </div>
      `);
    }
};
SlTextarea.styles = _chunk36NATOJSJs.textarea_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".textarea__control")
], SlTextarea.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlTextarea.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlTextarea.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTextarea.prototype, "filled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "help-text"
    })
], SlTextarea.prototype, "helpText", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "placeholder", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlTextarea.prototype, "rows", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "resize", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTextarea.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTextarea.prototype, "readonly", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlTextarea.prototype, "minlength", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlTextarea.prototype, "maxlength", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "pattern", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTextarea.prototype, "required", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTextarea.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "autocapitalize", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "autocorrect", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "autocomplete", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlTextarea.prototype, "autofocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlTextarea.prototype, "spellcheck", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTextarea.prototype, "inputmode", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlTextarea.prototype, "handleDisabledChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("rows")
], SlTextarea.prototype, "handleRowsChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value")
], SlTextarea.prototype, "handleValueChange", 1);
SlTextarea = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-textarea")
], SlTextarea);

},{"./chunk.36NATOJS.js":"7oQ3H","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oQ3H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "textarea_styles_default", ()=>textarea_styles_default
);
var _chunkP2AL2I6LJs = require("./chunk.P2AL2I6L.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/textarea/textarea.styles.ts
var textarea_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}
  ${_chunkP2AL2I6LJs.form_control_styles_default}

  :host {
    display: block;
  }

  .textarea {
    display: flex;
    align-items: center;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    transition: var(--sl-transition-fast) color, var(--sl-transition-fast) border, var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
    cursor: text;
  }

  /* Standard textareas */
  .textarea--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .textarea--standard:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }
  .textarea--standard:hover:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-hover);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: var(--sl-focus-ring);
    color: var(--sl-input-color-focus);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-focus);
  }

  .textarea--standard.textarea--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea--standard.textarea--disabled .textarea__control {
    color: var(--sl-input-color-disabled);
  }

  .textarea--standard.textarea--disabled .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled textareas */
  .textarea--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .textarea--filled:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .textarea--filled.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  .textarea--filled.textarea--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea__control {
    flex: 1 1 auto;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: 1.4;
    color: var(--sl-input-color);
    border: none;
    background: none;
    box-shadow: none;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .textarea__control::-webkit-search-decoration,
  .textarea__control::-webkit-search-cancel-button,
  .textarea__control::-webkit-search-results-button,
  .textarea__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
  }

  .textarea__control:focus {
    outline: none;
  }

  /*
   * Size modifiers
   */

  .textarea--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
  }

  .textarea--small .textarea__control {
    padding: 0.5em var(--sl-input-spacing-small);
  }

  .textarea--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .textarea--medium .textarea__control {
    padding: 0.5em var(--sl-input-spacing-medium);
  }

  .textarea--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
  }

  .textarea--large .textarea__control {
    padding: 0.5em var(--sl-input-spacing-large);
  }

  /*
   * Resize types
   */

  .textarea--resize-none .textarea__control {
    resize: none;
  }

  .textarea--resize-vertical .textarea__control {
    resize: vertical;
  }

  .textarea--resize-auto .textarea__control {
    height: auto;
    resize: none;
  }
`;

},{"./chunk.P2AL2I6L.js":"4a66x","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4a66x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "form_control_styles_default", ()=>form_control_styles_default
);
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/styles/form-control.styles.ts
var form_control_styles_default = _chunk2VBMOEKGJs.r`
  .form-control .form-control__label {
    display: none;
  }

  .form-control .form-control__help-text {
    display: none;
  }

  /* Label */
  .form-control--has-label .form-control__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    margin-bottom: var(--sl-spacing-3x-small);
  }

  .form-control--has-label.form-control--small .form-control__label {
    font-size: var(--sl-input-label-font-size-small);
  }

  .form-control--has-label.form-control--medium .form-control__label {
    font-size: var(--sl-input-label-font-size-medium);
  }

  .form-control--has-label.form-control--large .form-control_label {
    font-size: var(--sl-input-label-font-size-large);
  }

  /* Help text */
  .form-control--has-help-text .form-control__help-text {
    display: block;
    color: var(--sl-input-help-text-color);
  }

  .form-control--has-help-text .form-control__help-text ::slotted(*) {
    margin-top: var(--sl-spacing-3x-small);
  }

  .form-control--has-help-text.form-control--small .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-small);
  }

  .form-control--has-help-text.form-control--medium .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-medium);
  }

  .form-control--has-help-text.form-control--large .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-large);
  }
`;

},{"./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cl2mB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "l", ()=>l
) /**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
var _chunk2JQPDYNAJs = require("./chunk.2JQPDYNA.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// node_modules/lit-html/directive-helpers.js
var r = (o)=>o.strings === void 0
;
var f = {
};
var s = (o, i2 = f)=>o._$AH = i2
;
// node_modules/lit-html/directives/live.js
var l = _chunk2JQPDYNAJs.e(class extends _chunk2JQPDYNAJs.i {
    constructor(r2){
        if (super(r2), r2.type !== _chunk2JQPDYNAJs.t.PROPERTY && r2.type !== _chunk2JQPDYNAJs.t.ATTRIBUTE && r2.type !== _chunk2JQPDYNAJs.t.BOOLEAN_ATTRIBUTE) throw Error("The `live` directive is not allowed on child or event bindings");
        if (!r(r2)) throw Error("`live` bindings can only contain a single expression");
    }
    render(r2) {
        return r2;
    }
    update(i2, [t2]) {
        if (t2 === _chunk2VBMOEKGJs.b || t2 === _chunk2VBMOEKGJs.w) return t2;
        const o = i2.element, l2 = i2.name;
        if (i2.type === _chunk2JQPDYNAJs.t.PROPERTY) {
            if (t2 === o[l2]) return _chunk2VBMOEKGJs.b;
        } else if (i2.type === _chunk2JQPDYNAJs.t.BOOLEAN_ATTRIBUTE) {
            if (!!t2 === o.hasAttribute(l2)) return _chunk2VBMOEKGJs.b;
        } else if (i2.type === _chunk2JQPDYNAJs.t.ATTRIBUTE && o.getAttribute(l2) === t2 + "") return _chunk2VBMOEKGJs.b;
        return s(i2), t2;
    }
});

},{"./chunk.2JQPDYNA.js":"4Ri6Y","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Ri6Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "t", ()=>t
) /**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
parcelHelpers.export(exports, "e", ()=>e
);
parcelHelpers.export(exports, "i", ()=>i
);
// node_modules/lit-html/directive.js
var t = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6
};
var e = (t2)=>(...e2)=>({
            _$litDirective$: t2,
            values: e2
        })
;
var i = class {
    constructor(t2){
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AT(t2, e2, i2) {
        this._$Ct = t2, this._$AM = e2, this._$Ci = i2;
    }
    _$AS(t2, e2) {
        return this.update(t2, e2);
    }
    update(t2, e2) {
        return this.render(...e2);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AQaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormSubmitController", ()=>FormSubmitController
);
parcelHelpers.export(exports, "renderFormControl", ()=>renderFormControl
);
parcelHelpers.export(exports, "getLabelledBy", ()=>getLabelledBy
);
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/internal/formdata-event-polyfill.ts
var FormDataEventPolyfill = class extends Event {
    constructor(formData){
        super("formdata");
        this.formData = formData;
    }
};
var FormDataPolyfill = class extends FormData {
    constructor(form){
        super(form);
        this.form = form;
        form.dispatchEvent(new FormDataEventPolyfill(this));
    }
    append(name, value) {
        let input = this.form.elements[name];
        if (!input) {
            input = document.createElement("input");
            input.type = "hidden";
            input.name = name;
            this.form.appendChild(input);
        }
        if (this.has(name)) {
            const entries = this.getAll(name);
            const index = entries.indexOf(input.value);
            if (index !== -1) entries.splice(index, 1);
            entries.push(value);
            this.set(name, entries);
        } else super.append(name, value);
        input.value = value;
    }
};
function supportsFormDataEvent() {
    const form = document.createElement("form");
    let isSupported = false;
    document.body.append(form);
    form.addEventListener("submit", (event)=>{
        new FormData(event.target);
        event.preventDefault();
    });
    form.addEventListener("formdata", ()=>isSupported = true
    );
    form.dispatchEvent(new Event("submit", {
        cancelable: true
    }));
    form.remove();
    return isSupported;
}
function polyfillFormData() {
    if (!window.FormData || supportsFormDataEvent()) return;
    window.FormData = FormDataPolyfill;
    window.addEventListener("submit", (event)=>{
        if (!event.defaultPrevented) new FormData(event.target);
    });
}
polyfillFormData();
// src/internal/form-control.ts
var FormSubmitController = class {
    constructor(host, options){
        (this.host = host).addController(this);
        this.options = Object.assign({
            form: (input)=>input.closest("form")
            ,
            name: (input)=>input.name
            ,
            value: (input)=>input.value
            ,
            disabled: (input)=>input.disabled
            ,
            reportValidity: (input)=>{
                return typeof input.reportValidity === "function" ? input.reportValidity() : true;
            }
        }, options);
        this.handleFormData = this.handleFormData.bind(this);
        this.handleFormSubmit = this.handleFormSubmit.bind(this);
    }
    hostConnected() {
        var _a;
        this.form = (_a = this.options) == null ? void 0 : _a.form(this.host);
        if (this.form) {
            this.form.addEventListener("formdata", this.handleFormData);
            this.form.addEventListener("submit", this.handleFormSubmit);
        }
    }
    hostDisconnected() {
        if (this.form) {
            this.form.removeEventListener("formdata", this.handleFormData);
            this.form.removeEventListener("submit", this.handleFormSubmit);
            this.form = void 0;
        }
    }
    handleFormData(event) {
        var _a, _b, _c;
        const disabled = (_a = this.options) == null ? void 0 : _a.disabled(this.host);
        const name = (_b = this.options) == null ? void 0 : _b.name(this.host);
        const value = (_c = this.options) == null ? void 0 : _c.value(this.host);
        if (!disabled && name && value !== void 0) {
            if (Array.isArray(value)) value.map((val)=>event.formData.append(name, val)
            );
            else event.formData.append(name, value);
        }
    }
    handleFormSubmit(event) {
        var _a, _b;
        const form = this.form;
        const disabled = (_a = this.options) == null ? void 0 : _a.disabled(this.host);
        const reportValidity = (_b = this.options) == null ? void 0 : _b.reportValidity;
        if (form && !form.noValidate && !disabled && reportValidity && !reportValidity(this.host)) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
    submit() {
        const button = document.createElement("button");
        if (this.form) {
            button.type = "submit";
            button.style.position = "absolute";
            button.style.width = "0";
            button.style.height = "0";
            button.style.clip = "rect(0 0 0 0)";
            button.style.clipPath = "inset(50%)";
            button.style.overflow = "hidden";
            button.style.whiteSpace = "nowrap";
            this.form.append(button);
            button.click();
            button.remove();
        }
    }
};
var renderFormControl = (props, input)=>{
    const hasLabel = props.label ? true : !!props.hasLabelSlot;
    const hasHelpText = props.helpText ? true : !!props.hasHelpTextSlot;
    return _chunk2VBMOEKGJs.$`
    <div
      part="form-control"
      class=${_chunkW2WMQSCEJs.o({
        "form-control": true,
        "form-control--small": props.size === "small",
        "form-control--medium": props.size === "medium",
        "form-control--large": props.size === "large",
        "form-control--has-label": hasLabel,
        "form-control--has-help-text": hasHelpText
    })}
    >
      <label
        part="label"
        id=${_chunkKJOCH52QJs.l(props.labelId)}
        class="form-control__label"
        for=${props.inputId}
        aria-hidden=${hasLabel ? "false" : "true"}
        @click=${(event)=>props.onLabelClick ? props.onLabelClick(event) : null
    }
      >
        <slot name="label">${props.label}</slot>
      </label>

      <div class="form-control__input">${_chunk2VBMOEKGJs.$`${input}`}</div>

      <div
        part="help-text"
        id=${_chunkKJOCH52QJs.l(props.helpTextId)}
        class="form-control__help-text"
        aria-hidden=${hasHelpText ? "false" : "true"}
      >
        <slot name="help-text">${props.helpText}</slot>
      </div>
    </div>
  `;
};
function getLabelledBy(props) {
    const labelledBy = [
        props.label || props.hasLabelSlot ? props.labelId : "",
        props.helpText || props.hasHelpTextSlot ? props.helpTextId : ""
    ].filter((val)=>val
    );
    return labelledBy.join(" ") || void 0;
}

},{"./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9o2tn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "o", ()=>o
) /**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
var _chunk2JQPDYNAJs = require("./chunk.2JQPDYNA.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// node_modules/lit-html/directives/class-map.js
var o = _chunk2JQPDYNAJs.e(class extends _chunk2JQPDYNAJs.i {
    constructor(t2){
        var i2;
        if (super(t2), t2.type !== _chunk2JQPDYNAJs.t.ATTRIBUTE || t2.name !== "class" || ((i2 = t2.strings) === null || i2 === void 0 ? void 0 : i2.length) > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
    }
    render(t2) {
        return " " + Object.keys(t2).filter((i2)=>t2[i2]
        ).join(" ") + " ";
    }
    update(i2, [s]) {
        var r, o2;
        if (this.st === void 0) {
            this.st = /* @__PURE__ */ new Set(), i2.strings !== void 0 && (this.et = new Set(i2.strings.join(" ").split(/\s/).filter((t2)=>t2 !== ""
            )));
            for(const t21 in s)s[t21] && !((r = this.et) === null || r === void 0 ? void 0 : r.has(t21)) && this.st.add(t21);
            return this.render(s);
        }
        const e2 = i2.element.classList;
        this.st.forEach((t2)=>{
            t2 in s || (e2.remove(t2), this.st.delete(t2));
        });
        for(const t22 in s){
            const i3 = !!s[t22];
            i3 === this.st.has(t22) || ((o2 = this.et) === null || o2 === void 0 ? void 0 : o2.has(t22)) || (i3 ? (e2.add(t22), this.st.add(t22)) : (e2.remove(t22), this.st.delete(t22)));
        }
        return _chunk2VBMOEKGJs.b;
    }
});

},{"./chunk.2JQPDYNA.js":"4Ri6Y","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6TXF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "l", ()=>l
) /**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// node_modules/lit-html/directives/if-defined.js
var l = (l2)=>l2 != null ? l2 : _chunk2VBMOEKGJs.w
;

},{"./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akO45":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HasSlotController", ()=>HasSlotController
);
parcelHelpers.export(exports, "getTextContent", ()=>getTextContent
);
// src/internal/slot.ts
var HasSlotController = class {
    constructor(host, ...slotNames){
        this.slotNames = [];
        (this.host = host).addController(this);
        this.slotNames = slotNames;
        this.handleSlotChange = this.handleSlotChange.bind(this);
    }
    hasDefaultSlot() {
        return [
            ...this.host.childNodes
        ].some((node)=>{
            if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== "") return true;
            if (node.nodeType === node.ELEMENT_NODE) {
                const el = node;
                if (!el.hasAttribute("slot")) return true;
            }
            return false;
        });
    }
    hasNamedSlot(name) {
        return this.host.querySelector(`:scope > [slot="${name}"]`) !== null;
    }
    test(slotName) {
        return slotName === "[default]" ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);
    }
    hostConnected() {
        this.host.shadowRoot.addEventListener("slotchange", this.handleSlotChange);
    }
    hostDisconnected() {
        this.host.shadowRoot.removeEventListener("slotchange", this.handleSlotChange);
    }
    handleSlotChange(event) {
        var _a;
        const slot = event.target;
        if (this.slotNames.includes("[default]") && !slot.name || slot.name && ((_a = this.slotNames) == null ? void 0 : _a.includes(slot.name))) this.host.requestUpdate();
    }
};
function getTextContent(slot) {
    const nodes = slot ? slot.assignedNodes({
        flatten: true
    }) : [];
    let text = "";
    [
        ...nodes
    ].map((node)=>{
        if (node.nodeType === Node.TEXT_NODE) text += node.textContent;
    });
    return text;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1j2NX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watch", ()=>watch
);
// src/internal/watch.ts
function watch(propName, options) {
    return (protoOrDescriptor, name)=>{
        const { update  } = protoOrDescriptor;
        options = Object.assign({
            waitUntilFirstUpdate: false
        }, options);
        protoOrDescriptor.update = function(changedProps) {
            if (changedProps.has(propName)) {
                const oldValue = changedProps.get(propName);
                const newValue = this[propName];
                if (oldValue !== newValue) {
                    if (!(options == null ? void 0 : options.waitUntilFirstUpdate) || this.hasUpdated) this[name].call(this, oldValue, newValue);
                }
            }
            update.call(this, changedProps);
        };
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i4CGq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "emit", ()=>emit
);
parcelHelpers.export(exports, "waitForEvent", ()=>waitForEvent
);
// src/internal/event.ts
function emit(el, name, options) {
    const event = new CustomEvent(name, Object.assign({
        bubbles: true,
        cancelable: false,
        composed: true,
        detail: {
        }
    }, options));
    el.dispatchEvent(event);
    return event;
}
function waitForEvent(el, eventName) {
    return new Promise((resolve)=>{
        function done(event) {
            if (event.target === el) {
                el.removeEventListener(eventName, done);
                resolve();
            }
        }
        el.addEventListener(eventName, done);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bxfJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTooltip", ()=>SlTooltip
);
var _chunkV2N6BIOEJs = require("./chunk.V2N6BIOE.js");
var _chunkMMVA6LRDJs = require("./chunk.MMVA6LRD.js");
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/tooltip/tooltip.ts
var SlTooltip = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.content = "";
        this.placement = "top";
        this.disabled = false;
        this.distance = 10;
        this.open = false;
        this.skidding = 0;
        this.trigger = "hover focus";
        this.hoist = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.handleBlur = this.handleBlur.bind(this);
        this.handleClick = this.handleClick.bind(this);
        this.handleFocus = this.handleFocus.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.handleMouseOver = this.handleMouseOver.bind(this);
        this.handleMouseOut = this.handleMouseOut.bind(this);
        this.updateComplete.then(()=>{
            this.addEventListener("blur", this.handleBlur, true);
            this.addEventListener("focus", this.handleFocus, true);
            this.addEventListener("click", this.handleClick);
            this.addEventListener("keydown", this.handleKeyDown);
            this.addEventListener("mouseover", this.handleMouseOver);
            this.addEventListener("mouseout", this.handleMouseOut);
            this.target = this.getTarget();
            this.syncOptions();
        });
    }
    firstUpdated() {
        this.tooltip.hidden = !this.open;
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener("blur", this.handleBlur, true);
        this.removeEventListener("focus", this.handleFocus, true);
        this.removeEventListener("click", this.handleClick);
        this.removeEventListener("keydown", this.handleKeyDown);
        this.removeEventListener("mouseover", this.handleMouseOver);
        this.removeEventListener("mouseout", this.handleMouseOut);
        if (this.popover) this.popover.destroy();
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    getTarget() {
        const target = [
            ...this.children
        ].find((el)=>el.tagName.toLowerCase() !== "style" && el.getAttribute("slot") !== "content"
        );
        if (!target) throw new Error("Invalid tooltip target: no child element was found.");
        return target;
    }
    handleBlur() {
        if (this.hasTrigger("focus")) this.hide();
    }
    handleClick() {
        if (this.hasTrigger("click")) this.open ? this.hide() : this.show();
    }
    handleFocus() {
        if (this.hasTrigger("focus")) this.show();
    }
    handleKeyDown(event) {
        if (this.open && event.key === "Escape") {
            event.stopPropagation();
            this.hide();
        }
    }
    handleMouseOver() {
        if (this.hasTrigger("hover")) {
            const delay = _chunk6JY65IM5Js.parseDuration(getComputedStyle(this).getPropertyValue("--show-delay"));
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = setTimeout(()=>this.show()
            , delay);
        }
    }
    handleMouseOut() {
        if (this.hasTrigger("hover")) {
            const delay = _chunk6JY65IM5Js.parseDuration(getComputedStyle(this).getPropertyValue("--hide-delay"));
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = setTimeout(()=>this.hide()
            , delay);
        }
    }
    async handleOpenChange() {
        if (this.disabled) return;
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            await _chunk6JY65IM5Js.stopAnimations(this.tooltip);
            if (this.popover) this.popover.destroy();
            this.popover = _chunkMMVA6LRDJs.createPopper(this.target, this.positioner, {
                placement: this.placement,
                strategy: this.hoist ? "fixed" : "absolute",
                modifiers: [
                    {
                        name: "flip",
                        options: {
                            boundary: "viewport"
                        }
                    },
                    {
                        name: "offset",
                        options: {
                            offset: [
                                this.skidding,
                                this.distance
                            ]
                        }
                    }
                ]
            });
            this.tooltip.hidden = false;
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "tooltip.show");
            await _chunk6JY65IM5Js.animateTo(this.tooltip, keyframes, options);
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            await _chunk6JY65IM5Js.stopAnimations(this.tooltip);
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "tooltip.hide");
            await _chunk6JY65IM5Js.animateTo(this.tooltip, keyframes, options);
            this.tooltip.hidden = true;
            if (this.popover) this.popover.destroy();
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    handleOptionsChange() {
        this.syncOptions();
    }
    handleContentChange() {
        if (this.popover && this.open) this.popover.update();
    }
    handleDisabledChange() {
        if (this.disabled && this.open) this.hide();
    }
    hasTrigger(triggerType) {
        const triggers = this.trigger.split(" ");
        return triggers.includes(triggerType);
    }
    syncOptions() {
        if (this.popover) this.popover.setOptions({
            placement: this.placement,
            strategy: this.hoist ? "fixed" : "absolute",
            modifiers: [
                {
                    name: "flip",
                    options: {
                        boundary: "viewport"
                    }
                },
                {
                    name: "offset",
                    options: {
                        offset: [
                            this.skidding,
                            this.distance
                        ]
                    }
                }
            ]
        });
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div class="tooltip-content" aria-described-by="tooltip">
        <slot></slot>
      </div>

      <div class="tooltip-positioner">
        <div
          part="base"
          id="tooltip"
          class=${_chunkW2WMQSCEJs.o({
            tooltip: true,
            "tooltip--open": this.open
        })}
          role="tooltip"
          aria-hidden=${this.open ? "false" : "true"}
        >
          <slot name="content"> ${this.content} </slot>
        </div>
      </div>
    `;
    }
};
SlTooltip.styles = _chunkV2N6BIOEJs.tooltip_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tooltip-positioner")
], SlTooltip.prototype, "positioner", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tooltip")
], SlTooltip.prototype, "tooltip", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTooltip.prototype, "content", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTooltip.prototype, "placement", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTooltip.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlTooltip.prototype, "distance", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTooltip.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlTooltip.prototype, "skidding", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTooltip.prototype, "trigger", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlTooltip.prototype, "hoist", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlTooltip.prototype, "handleOpenChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("placement"),
    _chunkBD26TKS4Js.watch("distance"),
    _chunkBD26TKS4Js.watch("skidding"),
    _chunkBD26TKS4Js.watch("hoist")
], SlTooltip.prototype, "handleOptionsChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("content")
], SlTooltip.prototype, "handleContentChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlTooltip.prototype, "handleDisabledChange", 1);
SlTooltip = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-tooltip")
], SlTooltip);
_chunkUTEQRIIYJs.setDefaultAnimation("tooltip.show", {
    keyframes: [
        {
            opacity: 0,
            transform: "scale(0.8)"
        },
        {
            opacity: 1,
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 150,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("tooltip.hide", {
    keyframes: [
        {
            opacity: 1,
            transform: "scale(1)"
        },
        {
            opacity: 0,
            transform: "scale(0.8)"
        }
    ],
    options: {
        duration: 150,
        easing: "ease"
    }
});

},{"./chunk.V2N6BIOE.js":"e9KlZ","./chunk.MMVA6LRD.js":"gVisE","./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e9KlZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tooltip_styles_default", ()=>tooltip_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/tooltip/tooltip.styles.ts
var tooltip_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --max-width: 20rem;
    --hide-delay: 0ms;
    --show-delay: 150ms;

    display: contents;
  }

  .tooltip-content {
    display: contents;
  }

  .tooltip-positioner {
    position: absolute;
    z-index: var(--sl-z-index-tooltip);
    pointer-events: none;
  }

  .tooltip {
    max-width: var(--max-width);
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    padding: var(--sl-tooltip-padding);
  }

  .tooltip:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
  }

  .tooltip-positioner[data-popper-placement^='top'] .tooltip {
    transform-origin: bottom;
  }

  .tooltip-positioner[data-popper-placement^='bottom'] .tooltip {
    transform-origin: top;
  }

  .tooltip-positioner[data-popper-placement^='left'] .tooltip {
    transform-origin: right;
  }

  .tooltip-positioner[data-popper-placement^='right'] .tooltip {
    transform-origin: left;
  }

  /* Arrow + bottom */
  .tooltip-positioner[data-popper-placement^='bottom'] .tooltip:after {
    bottom: 100%;
    left: calc(50% - var(--sl-tooltip-arrow-size));
    border-bottom: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
  }

  .tooltip-positioner[data-popper-placement='bottom-start'] .tooltip:after {
    left: var(--sl-tooltip-arrow-start-end-offset);
  }

  .tooltip-positioner[data-popper-placement='bottom-end'] .tooltip:after {
    right: var(--sl-tooltip-arrow-start-end-offset);
    left: auto;
  }

  /* Arrow + top */
  .tooltip-positioner[data-popper-placement^='top'] .tooltip:after {
    top: 100%;
    left: calc(50% - var(--sl-tooltip-arrow-size));
    border-top: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
  }

  .tooltip-positioner[data-popper-placement='top-start'] .tooltip:after {
    left: var(--sl-tooltip-arrow-start-end-offset);
  }

  .tooltip-positioner[data-popper-placement='top-end'] .tooltip:after {
    right: var(--sl-tooltip-arrow-start-end-offset);
    left: auto;
  }

  /* Arrow + left */
  .tooltip-positioner[data-popper-placement^='left'] .tooltip:after {
    top: calc(50% - var(--sl-tooltip-arrow-size));
    left: 100%;
    border-left: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-top: var(--sl-tooltip-arrow-size) solid transparent;
    border-bottom: var(--sl-tooltip-arrow-size) solid transparent;
  }

  .tooltip-positioner[data-popper-placement='left-start'] .tooltip:after {
    top: var(--sl-tooltip-arrow-start-end-offset);
  }

  .tooltip-positioner[data-popper-placement='left-end'] .tooltip:after {
    top: auto;
    bottom: var(--sl-tooltip-arrow-start-end-offset);
  }

  /* Arrow + right */
  .tooltip-positioner[data-popper-placement^='right'] .tooltip:after {
    top: calc(50% - var(--sl-tooltip-arrow-size));
    right: 100%;
    border-right: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-top: var(--sl-tooltip-arrow-size) solid transparent;
    border-bottom: var(--sl-tooltip-arrow-size) solid transparent;
  }

  .tooltip-positioner[data-popper-placement='right-start'] .tooltip:after {
    top: var(--sl-tooltip-arrow-start-end-offset);
  }

  .tooltip-positioner[data-popper-placement='right-end'] .tooltip:after {
    top: auto;
    bottom: var(--sl-tooltip-arrow-start-end-offset);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVisE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
// node_modules/@popperjs/core/dist/esm/dom-utils/getWindow.js
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
// node_modules/@popperjs/core/dist/esm/dom-utils/instanceOf.js
function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") return false;
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}
// node_modules/@popperjs/core/dist/esm/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;
// node_modules/@popperjs/core/dist/esm/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) includeScale = false;
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth;
        if (offsetWidth > 0) scaleX = round(rect.width) / offsetWidth || 1;
        if (offsetHeight > 0) scaleY = round(rect.height) / offsetHeight || 1;
    }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft,
        scrollTop
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) return getWindowScroll(node);
    else return getHTMLElementScroll(node);
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getNodeName.js
function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
}
// node_modules/@popperjs/core/dist/esm/dom-utils/isScrollParent.js
function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getCompositeRect.js
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) scroll = getNodeScroll(offsetParent);
        if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = getWindowScrollBarX(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width,
        height
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getParentNode.js
function getParentNode(element) {
    if (getNodeName(element) === "html") return element;
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getScrollParent.js
function getScrollParent(node) {
    if ([
        "html",
        "body",
        "#document"
    ].indexOf(getNodeName(node)) >= 0) return node.ownerDocument.body;
    if (isHTMLElement(node) && isScrollParent(node)) return node;
    return getScrollParent(getParentNode(node));
}
// node_modules/@popperjs/core/dist/esm/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
// node_modules/@popperjs/core/dist/esm/dom-utils/isTableElement.js
function isTableElement(element) {
    return [
        "table",
        "td",
        "th"
    ].indexOf(getNodeName(element)) >= 0;
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") return null;
    return element.offsetParent;
}
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
        var elementCss = getComputedStyle(element);
        if (elementCss.position === "fixed") return null;
    }
    var currentNode = getParentNode(element);
    while(isHTMLElement(currentNode) && [
        "html",
        "body"
    ].indexOf(getNodeName(currentNode)) < 0){
        var css = getComputedStyle(currentNode);
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || [
            "transform",
            "perspective"
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
}
function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static")offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) return window2;
    return offsetParent || getContainingBlock(element) || window2;
}
// node_modules/@popperjs/core/dist/esm/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];
// node_modules/@popperjs/core/dist/esm/utils/orderModifiers.js
function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    });
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
// node_modules/@popperjs/core/dist/esm/utils/debounce.js
function debounce(fn2) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = void 0;
                resolve(fn2());
            });
        });
        return pending;
    };
}
// node_modules/@popperjs/core/dist/esm/utils/getBasePlacement.js
function getBasePlacement(placement) {
    return placement.split("-")[0];
}
// node_modules/@popperjs/core/dist/esm/utils/mergeByName.js
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({
        }, existing, current, {
            options: Object.assign({
            }, existing.options, current.options),
            data: Object.assign({
            }, existing.data, current.data)
        }) : current;
        return merged2;
    }, {
    });
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getViewportRect.js
function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width,
        height,
        x: x + getWindowScrollBarX(element),
        y
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width,
        height,
        x,
        y
    };
}
// node_modules/@popperjs/core/dist/esm/dom-utils/contains.js
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) return true;
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
            next = next.parentNode || next.host;
        }while (next)
    }
    return false;
}
// node_modules/@popperjs/core/dist/esm/utils/rectToClientRect.js
function rectToClientRect(rect) {
    return Object.assign({
    }, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
// node_modules/@popperjs/core/dist/esm/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = [
        "absolute",
        "fixed"
    ].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) return [];
    return clippingParents2.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
}
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
// node_modules/@popperjs/core/dist/esm/utils/getVariation.js
function getVariation(placement) {
    return placement.split("-")[1];
}
// node_modules/@popperjs/core/dist/esm/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
    return [
        "top",
        "bottom"
    ].indexOf(placement) >= 0 ? "x" : "y";
}
// node_modules/@popperjs/core/dist/esm/utils/computeOffsets.js
function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case top:
            offsets = {
                x: commonX,
                y: reference2.y - element.height
            };
            break;
        case bottom:
            offsets = {
                x: commonX,
                y: reference2.y + reference2.height
            };
            break;
        case right:
            offsets = {
                x: reference2.x + reference2.width,
                y: commonY
            };
            break;
        case left:
            offsets = {
                x: reference2.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference2.x,
                y: reference2.y
            };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch(variation){
            case start:
                offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
                break;
            case end:
                offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
// node_modules/@popperjs/core/dist/esm/utils/getFreshSideObject.js
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
// node_modules/@popperjs/core/dist/esm/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
    return Object.assign({
    }, getFreshSideObject(), paddingObject);
}
// node_modules/@popperjs/core/dist/esm/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
// node_modules/@popperjs/core/dist/esm/utils/detectOverflow.js
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
    });
    var popperClientRect = rectToClientRect(Object.assign({
    }, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                right,
                bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                top,
                bottom
            ].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset2[axis] * multiply;
        });
    }
    return overflowOffsets;
}
// node_modules/@popperjs/core/dist/esm/createPopper.js
var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({
            }, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference2,
                popper: popper2
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state,
            setOptions: function setOptions(setOptionsAction) {
                var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({
                }, defaultOptions, state.options, options2);
                state.scrollParents = {
                    reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
                    popper: listScrollParents(popper2)
                };
                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                });
                var modifiers, _ref, name, flipModifier, _ref2, name1, _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, margin;
                runModifierEffects();
                return instance.update();
            },
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
                if (!areValidElements(reference3, popper3)) return;
                state.rects = {
                    reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
                    popper: getLayoutRect(popper3)
                };
                state.reset = false;
                state.placement = state.options.placement;
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn2 === "function") state = fn2({
                        state,
                        options: _options,
                        name,
                        instance
                    }) || state;
                }
            },
            update: debounce(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference2, popper2)) return instance;
        instance.setOptions(options).then(function(state2) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state2);
        });
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {
                } : _ref3$options, effect4 = _ref3.effect;
                if (typeof effect4 === "function") {
                    var cleanupFn = effect4({
                        state,
                        name,
                        instance,
                        options: options2
                    });
                    var noopFn = function noopFn2() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn2) {
                return fn2();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
// node_modules/@popperjs/core/dist/esm/modifiers/eventListeners.js
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
    });
    if (resize) window2.addEventListener("resize", instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
        });
        if (resize) window2.removeEventListener("resize", instance.update, passive);
    };
}
var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect,
    data: {
    }
};
// node_modules/@popperjs/core/dist/esm/modifiers/popperOffsets.js
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
    });
}
var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {
    }
};
// node_modules/@popperjs/core/dist/esm/modifiers/computeStyles.js
var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
};
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x,
        y
    }) : {
        x,
        y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
            offsetParent = getDocumentElement(popper2);
            if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
                heightProp = "scrollHeight";
                widthProp = "scrollWidth";
            }
        }
        if (placement === top || (placement === left || placement === right) && variation === end) {
            sideY = bottom;
            var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
            sideX = right;
            var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x,
        y
    }) : {
        x,
        y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({
        }, commonStyles, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({
    }, commonStyles, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty, property;
    var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
    }, state.styles.popper, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
    }, state.styles.arrow, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
    })));
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        "data-popper-placement": state.placement
    });
}
var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {
    }
};
// node_modules/@popperjs/core/dist/esm/modifiers/applyStyles.js
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {
        };
        var attributes = state.attributes[name] || {
        };
        var element = state.elements[name];
        if (!isHTMLElement(element) || !getNodeName(element)) return;
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name2) {
            var value = attributes[name2];
            if (value === false) element.removeAttribute(name2);
            else element.setAttribute(name2, value === true ? "" : value);
        });
    });
}
function effect2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
        },
        arrow: {
            position: "absolute"
        },
        reference: {
        }
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {
            };
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
            var style = styleProperties.reduce(function(style2, property) {
                style2[property] = "";
                return style2;
            }, {
            });
            if (!isHTMLElement(element) || !getNodeName(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
}
var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect2,
    requires: [
        "computeStyles"
    ]
};
// node_modules/@popperjs/core/dist/esm/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [
        left,
        top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({
    }, rects, {
        placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        left,
        right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
}
var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: [
        "popperOffsets"
    ],
    fn: offset
};
// node_modules/@popperjs/core/dist/esm/utils/getOppositePlacement.js
var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
// node_modules/@popperjs/core/dist/esm/utils/getOppositeVariationPlacement.js
var hash2 = {
    start: "end",
    end: "start"
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash2[matched];
    });
}
// node_modules/@popperjs/core/dist/esm/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements2;
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding
        })[getBasePlacement(placement2)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
// node_modules/@popperjs/core/dist/esm/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) return [];
    var oppositePlacement = getOppositePlacement(placement);
    return [
        getOppositeVariationPlacement(placement),
        oppositePlacement,
        getOppositeVariationPlacement(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        getOppositePlacement(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding,
            flipVariations,
            allowedAutoPlacements
        }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for(var i = 0; i < placements2.length; i++){
        var placement = placements2[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [
            top,
            bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
            placement,
            boundary,
            rootBoundary,
            altBoundary,
            padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = getOppositePlacement(mainVariationSide);
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
            var fittingPlacement = placements2.find(function(placement2) {
                var checks2 = checksMap.get(placement2);
                if (checks2) return checks2.slice(0, _i2).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
}
var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: [
        "offset"
    ],
    data: {
        _skip: false
    }
};
// node_modules/@popperjs/core/dist/esm/utils/getAltAxis.js
function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
}
// node_modules/@popperjs/core/dist/esm/utils/within.js
function within(min2, value, max2) {
    return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
}
// node_modules/@popperjs/core/dist/esm/modifiers/preventOverflow.js
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding,
        altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets2) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min2 = offset2 + overflow[mainSide];
        var max2 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            top,
            left
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
}
var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: [
        "offset"
    ]
};
// node_modules/@popperjs/core/dist/esm/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [
        left,
        right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect3(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) return;
    if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!contains(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
}
var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect3,
    requires: [
        "popperOffsets"
    ],
    requiresIfExists: [
        "preventOverflow"
    ]
};
// node_modules/@popperjs/core/dist/esm/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        top,
        right,
        bottom,
        left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
    };
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
    });
}
var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: [
        "preventOverflow"
    ],
    fn: hide
};
// node_modules/@popperjs/core/dist/esm/popper.js
var defaultModifiers = [
    eventListeners_default,
    popperOffsets_default,
    computeStyles_default,
    applyStyles_default,
    offset_default,
    flip_default,
    preventOverflow_default,
    arrow_default,
    hide_default
];
var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d40Fl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateTo", ()=>animateTo
);
parcelHelpers.export(exports, "parseDuration", ()=>parseDuration
);
parcelHelpers.export(exports, "stopAnimations", ()=>stopAnimations
);
parcelHelpers.export(exports, "shimKeyframesHeightAuto", ()=>shimKeyframesHeightAuto
);
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/internal/animate.ts
function animateTo(el, keyframes, options) {
    return new Promise(async (resolve)=>{
        if ((options == null ? void 0 : options.duration) === Infinity) throw new Error("Promise-based animations must be finite.");
        const animation = el.animate(keyframes, _chunk4M3HOXYQJs.__spreadProps(_chunk4M3HOXYQJs.__spreadValues({
        }, options), {
            duration: prefersReducedMotion() ? 0 : options.duration
        }));
        animation.addEventListener("cancel", resolve, {
            once: true
        });
        animation.addEventListener("finish", resolve, {
            once: true
        });
    });
}
function parseDuration(delay) {
    delay = (delay + "").toLowerCase();
    if (delay.indexOf("ms") > -1) return parseFloat(delay);
    if (delay.indexOf("s") > -1) return parseFloat(delay) * 1000;
    return parseFloat(delay);
}
function prefersReducedMotion() {
    const query = window.matchMedia("(prefers-reduced-motion: reduce)");
    return query == null ? void 0 : query.matches;
}
function stopAnimations(el) {
    return Promise.all(el.getAnimations().map((animation)=>{
        return new Promise((resolve)=>{
            const handleAnimationEvent = requestAnimationFrame(resolve);
            animation.addEventListener("cancel", ()=>handleAnimationEvent
            , {
                once: true
            });
            animation.addEventListener("finish", ()=>handleAnimationEvent
            , {
                once: true
            });
            animation.cancel();
        });
    }));
}
function shimKeyframesHeightAuto(keyframes, calculatedHeight) {
    return keyframes.map((keyframe)=>Object.assign({
        }, keyframe, {
            height: keyframe.height === "auto" ? `${calculatedHeight}px` : keyframe.height
        })
    );
}

},{"./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4h4P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setDefaultAnimation", ()=>setDefaultAnimation
);
parcelHelpers.export(exports, "setAnimation", ()=>setAnimation
);
parcelHelpers.export(exports, "getAnimation", ()=>getAnimation
);
// src/utilities/animation-registry.ts
var defaultAnimationRegistry = /* @__PURE__ */ new Map();
var customAnimationRegistry = /* @__PURE__ */ new WeakMap();
function ensureAnimation(animation) {
    return animation != null ? animation : {
        keyframes: [],
        options: {
            duration: 0
        }
    };
}
function setDefaultAnimation(animationName, animation) {
    defaultAnimationRegistry.set(animationName, ensureAnimation(animation));
}
function setAnimation(el, animationName, animation) {
    customAnimationRegistry.set(el, Object.assign({
    }, customAnimationRegistry.get(el), {
        [animationName]: ensureAnimation(animation)
    }));
}
function getAnimation(el, animationName) {
    const customAnimation = customAnimationRegistry.get(el);
    if (customAnimation && customAnimation[animationName]) return customAnimation[animationName];
    const defaultAnimation = defaultAnimationRegistry.get(animationName);
    if (defaultAnimation) return defaultAnimation;
    return {
        keyframes: [],
        options: {
            duration: 0
        }
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ij9x2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlSplitPanel", ()=>SlSplitPanel
);
var _chunk4THV7FKBJs = require("./chunk.4THV7FKB.js");
var _chunkT56CG5BMJs = require("./chunk.T56CG5BM.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/split-panel/split-panel.ts
var SlSplitPanel = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.position = 50;
        this.vertical = false;
        this.disabled = false;
        this.snapThreshold = 12;
    }
    connectedCallback() {
        super.connectedCallback();
        this.resizeObserver = new ResizeObserver((entries)=>this.handleResize(entries)
        );
        this.updateComplete.then(()=>this.resizeObserver.observe(this)
        );
        this.detectSize();
        this.cachedPositionInPixels = this.percentageToPixels(this.position);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.resizeObserver.unobserve(this);
    }
    detectSize() {
        const { width , height  } = this.getBoundingClientRect();
        this.size = this.vertical ? height : width;
    }
    percentageToPixels(value) {
        return this.size * (value / 100);
    }
    pixelsToPercentage(value) {
        return value / this.size * 100;
    }
    handleDrag(event) {
        if (this.disabled) return;
        event.preventDefault();
        function drag(container, onMove) {
            const move = (event2)=>{
                const dims = container.getBoundingClientRect();
                const defaultView = container.ownerDocument.defaultView;
                const offsetX = dims.left + defaultView.pageXOffset;
                const offsetY = dims.top + defaultView.pageYOffset;
                const x = (event2.changedTouches ? event2.changedTouches[0].pageX : event2.pageX) - offsetX;
                const y = (event2.changedTouches ? event2.changedTouches[0].pageY : event2.pageY) - offsetY;
                onMove(x, y);
            };
            const stop = ()=>{
                document.removeEventListener("mousemove", move);
                document.removeEventListener("touchmove", move);
                document.removeEventListener("mouseup", stop);
                document.removeEventListener("touchend", stop);
            };
            document.addEventListener("mousemove", move, {
                passive: true
            });
            document.addEventListener("touchmove", move, {
                passive: true
            });
            document.addEventListener("mouseup", stop);
            document.addEventListener("touchend", stop);
        }
        drag(this, (x, y)=>{
            let newPositionInPixels = this.vertical ? y : x;
            if (this.primary === "end") newPositionInPixels = this.size - newPositionInPixels;
            if (this.snap) {
                const snaps = this.snap.split(" ");
                snaps.map((value)=>{
                    let snapPoint;
                    if (value.endsWith("%")) snapPoint = this.size * (parseFloat(value) / 100);
                    else snapPoint = parseFloat(value);
                    if (newPositionInPixels >= snapPoint - this.snapThreshold && newPositionInPixels <= snapPoint + this.snapThreshold) newPositionInPixels = snapPoint;
                });
            }
            this.position = _chunkT56CG5BMJs.clamp(this.pixelsToPercentage(newPositionInPixels), 0, 100);
        });
    }
    handleKeyDown(event) {
        if (this.disabled) return;
        if ([
            "ArrowLeft",
            "ArrowRight",
            "ArrowUp",
            "ArrowDown",
            "Home",
            "End"
        ].includes(event.key)) {
            let newPosition = this.position;
            let incr = (event.shiftKey ? 10 : 1) * (this.primary === "end" ? -1 : 1);
            event.preventDefault();
            if (event.key === "ArrowLeft" && !this.vertical || event.key === "ArrowUp" && this.vertical) newPosition -= incr;
            if (event.key === "ArrowRight" && !this.vertical || event.key === "ArrowDown" && this.vertical) newPosition += incr;
            if (event.key === "Home") newPosition = this.primary === "end" ? 100 : 0;
            if (event.key === "End") newPosition = this.primary === "end" ? 0 : 100;
            this.position = _chunkT56CG5BMJs.clamp(newPosition, 0, 100);
        }
    }
    handlePositionChange() {
        this.cachedPositionInPixels = this.percentageToPixels(this.position);
        this.positionInPixels = this.percentageToPixels(this.position);
        _chunkI4TE3TJVJs.emit(this, "sl-reposition");
    }
    handlePositionInPixelsChange() {
        this.position = this.pixelsToPercentage(this.positionInPixels);
    }
    handleResize(entries) {
        const { width , height  } = entries[0].contentRect;
        this.size = this.vertical ? height : width;
        if (this.primary && this.cachedPositionInPixels) this.position = this.pixelsToPercentage(this.cachedPositionInPixels);
    }
    render() {
        const gridTemplate = this.vertical ? "gridTemplateRows" : "gridTemplateColumns";
        const primary = `
      clamp(
        0%,
        clamp(
          var(--min),
          ${this.position}% - var(--divider-width) / 2,
          var(--max)
        ),
        calc(100% - var(--divider-width))
      )
    `;
        const secondary = "auto";
        if (this.primary === "end") this.style[gridTemplate] = `${secondary} var(--divider-width) ${primary}`;
        else this.style[gridTemplate] = `${primary} var(--divider-width) ${secondary}`;
        return _chunk2VBMOEKGJs.$`
      <div part="panel start" class="start">
        <slot name="start"></slot>
      </div>

      <div
        part="divider"
        class="divider"
        tabindex=${_chunkKJOCH52QJs.l(this.disabled ? void 0 : "0")}
        role="separator"
        aria-label=${this.localize.term("resize")}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleDrag}
        @touchstart=${this.handleDrag}
      >
        <slot name="handle"></slot>
      </div>

      <div part="panel end" class="end">
        <slot name="end"></slot>
      </div>
    `;
    }
};
SlSplitPanel.styles = _chunk4THV7FKBJs.split_panel_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".divider")
], SlSplitPanel.prototype, "divider", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number,
        reflect: true
    })
], SlSplitPanel.prototype, "position", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "position-in-pixels",
        type: Number
    })
], SlSplitPanel.prototype, "positionInPixels", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSplitPanel.prototype, "vertical", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSplitPanel.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSplitPanel.prototype, "primary", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSplitPanel.prototype, "snap", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number,
        attribute: "snap-threshold"
    })
], SlSplitPanel.prototype, "snapThreshold", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("position")
], SlSplitPanel.prototype, "handlePositionChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("positionInPixels")
], SlSplitPanel.prototype, "handlePositionInPixelsChange", 1);
SlSplitPanel = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-split-panel")
], SlSplitPanel);

},{"./chunk.4THV7FKB.js":"ekfFu","./chunk.T56CG5BM.js":"5yofy","./chunk.CCTU25PV.js":"dUPzH","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekfFu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "split_panel_styles_default", ()=>split_panel_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/split-panel/split-panel.styles.ts
var split_panel_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --divider-width: 4px;
    --divider-hit-area: 12px;
    --min: 0%;
    --max: 100%;

    display: grid;
  }

  .start,
  .end {
    overflow: hidden;
  }

  .divider {
    flex: 0 0 var(--divider-width);
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    background-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-900);
    z-index: 1;
  }

  .divider:focus {
    outline: none;
  }

  :host(:not([disabled])) .divider${_chunkAN2XMPAVJs.focusVisibleSelector} {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  :host([disabled]) .divider {
    cursor: not-allowed;
  }

  /* Horizontal */
  :host(:not([vertical], [disabled])) .divider {
    cursor: col-resize;
  }

  :host(:not([vertical])) .divider::after {
    display: flex;
    content: '';
    position: absolute;
    height: 100%;
    left: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    width: var(--divider-hit-area);
  }

  /* Vertical */
  :host([vertical]) {
    flex-direction: column;
  }

  :host([vertical]:not([disabled])) .divider {
    cursor: row-resize;
  }

  :host([vertical]) .divider::after {
    content: '';
    position: absolute;
    width: 100%;
    top: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    height: var(--divider-hit-area);
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bW2A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasFocusVisible", ()=>hasFocusVisible
);
parcelHelpers.export(exports, "focusVisibleSelector", ()=>focusVisibleSelector
);
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/internal/focus-visible.ts
var hasFocusVisible = (()=>{
    const style = document.createElement("style");
    let isSupported;
    try {
        document.head.appendChild(style);
        style.sheet.insertRule(":focus-visible { color: inherit }");
        isSupported = true;
    } catch (e) {
        isSupported = false;
    } finally{
        style.remove();
    }
    return isSupported;
})();
var focusVisibleSelector = _chunk2VBMOEKGJs.o(hasFocusVisible ? ":focus-visible" : ":focus");

},{"./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5yofy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clamp", ()=>clamp
);
// src/internal/math.ts
function clamp(value, min, max) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dUPzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "en_default", ()=>en_default
);
parcelHelpers.export(exports, "registerTranslation", ()=>registerTranslation
);
parcelHelpers.export(exports, "term", ()=>term
);
parcelHelpers.export(exports, "date", ()=>date
);
parcelHelpers.export(exports, "number", ()=>number
);
parcelHelpers.export(exports, "relativeTime", ()=>relativeTime
);
parcelHelpers.export(exports, "update", ()=>update
);
parcelHelpers.export(exports, "LocalizeController", ()=>LocalizeController
);
// node_modules/@shoelace-style/localize/dist/index.js
var connectedElements = /* @__PURE__ */ new Set();
var documentElementObserver = new MutationObserver(update);
var translations = /* @__PURE__ */ new Map();
var documentLanguage = document.documentElement.lang || navigator.language;
var fallback;
documentElementObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: [
        "lang"
    ]
});
function registerTranslation(...translation2) {
    translation2.map((t)=>{
        const code = t.$code.toLowerCase();
        translations.set(code, t);
        if (!fallback) fallback = t;
    });
    update();
}
function term(lang, key, ...args) {
    const code = lang.toLowerCase().slice(0, 2);
    const subcode = lang.length > 2 ? lang.toLowerCase() : "";
    const primary = translations.get(subcode);
    const secondary = translations.get(code);
    let term2;
    if (primary && primary[key]) term2 = primary[key];
    else if (secondary && secondary[key]) term2 = secondary[key];
    else if (fallback && fallback[key]) term2 = fallback[key];
    else {
        console.error(`No translation found for: ${key}`);
        return key;
    }
    if (typeof term2 === "function") return term2(...args);
    return term2;
}
function date(lang, dateToFormat, options) {
    dateToFormat = new Date(dateToFormat);
    return new Intl.DateTimeFormat(lang, options).format(dateToFormat);
}
function number(lang, numberToFormat, options) {
    numberToFormat = Number(numberToFormat);
    return isNaN(numberToFormat) ? "" : new Intl.NumberFormat(lang, options).format(numberToFormat);
}
function relativeTime(lang, value, unit, options) {
    return new Intl.RelativeTimeFormat(lang, options).format(value, unit);
}
function update() {
    documentLanguage = document.documentElement.lang || navigator.language;
    [
        ...connectedElements.keys()
    ].map((el)=>{
        if (typeof el.requestUpdate === "function") el.requestUpdate();
    });
}
var LocalizeController = class {
    constructor(host){
        this.host = host;
        this.host.addController(this);
    }
    hostConnected() {
        connectedElements.add(this.host);
    }
    hostDisconnected() {
        connectedElements.delete(this.host);
    }
    term(key, ...args) {
        return term(this.host.lang || documentLanguage, key, ...args);
    }
    date(dateToFormat, options) {
        return date(this.host.lang || documentLanguage, dateToFormat, options);
    }
    number(numberToFormat, options) {
        return number(this.host.lang || documentLanguage, numberToFormat, options);
    }
    relativeTime(value, unit, options) {
        return relativeTime(this.host.lang || documentLanguage, value, unit, options);
    }
};
// src/translations/en.ts
var translation = {
    $code: "en",
    $name: "English",
    $dir: "ltr",
    close: "Close",
    copy: "Copy",
    progress: "Progress",
    resize: "Resize",
    scroll_to_end: "Scroll to end",
    scroll_to_start: "Scroll to start",
    select_a_color_from_the_screen: "Select a color from the screen",
    toggle_color_format: "Toggle color format"
};
registerTranslation(translation);
var en_default = translation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"keFBh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlSwitch", ()=>SlSwitch
);
var _chunkMC6A6AKPJs = require("./chunk.MC6A6AKP.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/switch/switch.ts
var id = 0;
var SlSwitch = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this, {
            value: (control)=>control.checked ? control.value : void 0
        });
        this.switchId = `switch-${++id}`;
        this.labelId = `switch-label-${id}`;
        this.hasFocus = false;
        this.disabled = false;
        this.required = false;
        this.checked = false;
        this.invalid = false;
    }
    firstUpdated() {
        this.invalid = !this.input.checkValidity();
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleCheckedChange() {
        if (this.input) {
            this.input.checked = this.checked;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleClick() {
        this.checked = !this.checked;
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleKeyDown(event) {
        if (event.key === "ArrowLeft") {
            event.preventDefault();
            this.checked = false;
            _chunkI4TE3TJVJs.emit(this, "sl-change");
        }
        if (event.key === "ArrowRight") {
            event.preventDefault();
            this.checked = true;
            _chunkI4TE3TJVJs.emit(this, "sl-change");
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <label
        part="base"
        for=${this.switchId}
        class=${_chunkW2WMQSCEJs.o({
            switch: true,
            "switch--checked": this.checked,
            "switch--disabled": this.disabled,
            "switch--focused": this.hasFocus
        })}
      >
        <input
          id=${this.switchId}
          class="switch__input"
          type="checkbox"
          name=${_chunkKJOCH52QJs.l(this.name)}
          value=${_chunkKJOCH52QJs.l(this.value)}
          .checked=${_chunkGPPFFSGRJs.l(this.checked)}
          .disabled=${this.disabled}
          .required=${this.required}
          role="switch"
          aria-checked=${this.checked ? "true" : "false"}
          aria-labelledby=${this.labelId}
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
          @keydown=${this.handleKeyDown}
        />

        <span part="control" class="switch__control">
          <span part="thumb" class="switch__thumb"></span>
        </span>

        <span part="label" id=${this.labelId} class="switch__label">
          <slot></slot>
        </span>
      </label>
    `;
    }
};
SlSwitch.styles = _chunkMC6A6AKPJs.switch_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('input[type="checkbox"]')
], SlSwitch.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlSwitch.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSwitch.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSwitch.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSwitch.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSwitch.prototype, "required", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSwitch.prototype, "checked", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSwitch.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("checked")
], SlSwitch.prototype, "handleCheckedChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlSwitch.prototype, "handleDisabledChange", 1);
SlSwitch = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-switch")
], SlSwitch);

},{"./chunk.MC6A6AKP.js":"hqIGK","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqIGK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "switch_styles_default", ()=>switch_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/switch/switch.styles.ts
var switch_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --height: var(--sl-toggle-size);
    --thumb-size: calc(var(--sl-toggle-size) + 4px);
    --width: calc(var(--height) * 2);

    display: inline-block;
  }

  .switch {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .switch__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--width);
    height: var(--height);
    background-color: var(--sl-color-neutral-400);
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    border-radius: var(--height);
    transition: var(--sl-transition-fast) border-color, var(--sl-transition-fast) background-color;
  }

  .switch__control .switch__thumb {
    width: var(--thumb-size);
    height: var(--thumb-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: 50%;
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    transform: translateX(calc((var(--width) - var(--height)) / -2));
    transition: var(--sl-transition-fast) transform ease, var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) border-color, var(--sl-transition-fast) box-shadow;
  }

  .switch__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-neutral-400);
  }

  /* Focus */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__input${_chunkAN2XMPAVJs.focusVisibleSelector} ~ .switch__control {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled)
    .switch__input${_chunkAN2XMPAVJs.focusVisibleSelector}
    ~ .switch__control
    .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    box-shadow: var(--sl-focus-ring);
  }

  /* Checked */
  .switch--checked .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch--checked .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    transform: translateX(calc((var(--width) - var(--height)) / 2));
  }

  /* Checked + hover */
  .switch.switch--checked:not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
  }

  /* Checked + focus */
  .switch.switch--checked:not(.switch--disabled) .switch__input${_chunkAN2XMPAVJs.focusVisibleSelector} ~ .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled)
    .switch__input${_chunkAN2XMPAVJs.focusVisibleSelector}
    ~ .switch__control
    .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    box-shadow: var(--sl-focus-ring);
  }

  /* Disabled */
  .switch--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .switch__label {
    line-height: var(--height);
    margin-left: 0.5em;
    user-select: none;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bC632":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTab", ()=>SlTab
);
var _chunk7O2OK7EMJs = require("./chunk.7O2OK7EM.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/tab/tab.ts
var id = 0;
var SlTab = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.componentId = `sl-tab-${++id}`;
        this.panel = "";
        this.active = false;
        this.closable = false;
        this.disabled = false;
    }
    focus(options) {
        this.tab.focus(options);
    }
    blur() {
        this.tab.blur();
    }
    handleCloseClick() {
        _chunkI4TE3TJVJs.emit(this, "sl-close");
    }
    render() {
        this.id = this.id || this.componentId;
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            tab: true,
            "tab--active": this.active,
            "tab--closable": this.closable,
            "tab--disabled": this.disabled
        })}
        role="tab"
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-selected=${this.active ? "true" : "false"}
        tabindex=${this.disabled || !this.active ? "-1" : "0"}
      >
        <slot></slot>
        ${this.closable ? _chunk2VBMOEKGJs.$`
              <sl-icon-button
                name="x"
                library="system"
                label=${this.localize.term("close")}
                exportparts="base:close-button"
                class="tab__close-button"
                @click=${this.handleCloseClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </div>
    `;
    }
};
SlTab.styles = _chunk7O2OK7EMJs.tab_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tab")
], SlTab.prototype, "tab", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlTab.prototype, "panel", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTab.prototype, "active", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlTab.prototype, "closable", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTab.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTab.prototype, "lang", 2);
SlTab = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-tab")
], SlTab);

},{"./chunk.7O2OK7EM.js":"lMIIV","./chunk.CCTU25PV.js":"dUPzH","./chunk.W2WMQSCE.js":"9o2tn","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMIIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tab_styles_default", ()=>tab_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/tab/tab.styles.ts
var tab_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .tab {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    border-radius: var(--sl-border-radius-medium);
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-medium) var(--sl-spacing-large);
    white-space: nowrap;
    user-select: none;
    cursor: pointer;
    transition: var(--transition-speed) box-shadow, var(--transition-speed) color;
  }

  .tab:hover:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  .tab:focus {
    outline: none;
  }

  .tab${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
    box-shadow: inset var(--sl-focus-ring);
  }

  .tab.tab--active:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  .tab.tab--closable {
    padding-right: var(--sl-spacing-small);
  }

  .tab.tab--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .tab__close-button {
    font-size: var(--sl-font-size-large);
    margin-left: var(--sl-spacing-2x-small);
  }

  .tab__close-button::part(base) {
    padding: var(--sl-spacing-3x-small);
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2TVnS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTabGroup", ()=>SlTabGroup
);
var _chunkJZCWPHAUJs = require("./chunk.JZCWPHAU.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunkST4GEPNZJs = require("./chunk.ST4GEPNZ.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/tab-group/tab-group.ts
var SlTabGroup = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.tabs = [];
        this.panels = [];
        this.hasScrollControls = false;
        this.placement = "top";
        this.activation = "auto";
        this.noScrollControls = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.resizeObserver = new ResizeObserver(()=>{
            this.preventIndicatorTransition();
            this.repositionIndicator();
            this.updateScrollControls();
        });
        this.mutationObserver = new MutationObserver((mutations)=>{
            if (mutations.some((m)=>![
                    "aria-labelledby",
                    "aria-controls"
                ].includes(m.attributeName)
            )) setTimeout(()=>this.setAriaLabels()
            );
            if (mutations.some((m)=>m.attributeName === "disabled"
            )) this.syncTabsAndPanels();
        });
        this.updateComplete.then(()=>{
            this.syncTabsAndPanels();
            this.mutationObserver.observe(this, {
                attributes: true,
                childList: true,
                subtree: true
            });
            this.resizeObserver.observe(this.nav);
            const intersectionObserver = new IntersectionObserver((entries, observer)=>{
                if (entries[0].intersectionRatio > 0) {
                    this.setAriaLabels();
                    this.setActiveTab(this.getActiveTab() || this.tabs[0], {
                        emitEvents: false
                    });
                    observer.unobserve(entries[0].target);
                }
            });
            intersectionObserver.observe(this.tabGroup);
        });
    }
    disconnectedCallback() {
        this.mutationObserver.disconnect();
        this.resizeObserver.unobserve(this.nav);
    }
    show(panel) {
        const tab = this.tabs.find((el)=>el.panel === panel
        );
        if (tab) this.setActiveTab(tab, {
            scrollBehavior: "smooth"
        });
    }
    getAllTabs(includeDisabled = false) {
        const slot = this.shadowRoot.querySelector('slot[name="nav"]');
        return [
            ...slot.assignedElements()
        ].filter((el)=>{
            return includeDisabled ? el.tagName.toLowerCase() === "sl-tab" : el.tagName.toLowerCase() === "sl-tab" && !el.disabled;
        });
    }
    getAllPanels() {
        const slot = this.body.querySelector("slot");
        return [
            ...slot.assignedElements()
        ].filter((el)=>el.tagName.toLowerCase() === "sl-tab-panel"
        );
    }
    getActiveTab() {
        return this.tabs.find((el)=>el.active
        );
    }
    handleClick(event) {
        const target = event.target;
        const tab = target.closest("sl-tab");
        const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
        if (tabGroup !== this) return;
        if (tab) this.setActiveTab(tab, {
            scrollBehavior: "smooth"
        });
    }
    handleKeyDown(event) {
        const target = event.target;
        const tab = target.closest("sl-tab");
        const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
        if (tabGroup !== this) return;
        if ([
            "Enter",
            " "
        ].includes(event.key)) {
            if (tab) {
                this.setActiveTab(tab, {
                    scrollBehavior: "smooth"
                });
                event.preventDefault();
            }
        }
        if ([
            "ArrowLeft",
            "ArrowRight",
            "ArrowUp",
            "ArrowDown",
            "Home",
            "End"
        ].includes(event.key)) {
            const activeEl = document.activeElement;
            if (activeEl && activeEl.tagName.toLowerCase() === "sl-tab") {
                let index = this.tabs.indexOf(activeEl);
                if (event.key === "Home") index = 0;
                else if (event.key === "End") index = this.tabs.length - 1;
                else if ([
                    "top",
                    "bottom"
                ].includes(this.placement) && event.key === "ArrowLeft" || [
                    "start",
                    "end"
                ].includes(this.placement) && event.key === "ArrowUp") index = Math.max(0, index - 1);
                else if ([
                    "top",
                    "bottom"
                ].includes(this.placement) && event.key === "ArrowRight" || [
                    "start",
                    "end"
                ].includes(this.placement) && event.key === "ArrowDown") index = Math.min(this.tabs.length - 1, index + 1);
                this.tabs[index].focus({
                    preventScroll: true
                });
                if (this.activation === "auto") this.setActiveTab(this.tabs[index], {
                    scrollBehavior: "smooth"
                });
                if ([
                    "top",
                    "bottom"
                ].includes(this.placement)) _chunkST4GEPNZJs.scrollIntoView(this.tabs[index], this.nav, "horizontal");
                event.preventDefault();
            }
        }
    }
    handleScrollToStart() {
        this.nav.scroll({
            left: this.nav.scrollLeft - this.nav.clientWidth,
            behavior: "smooth"
        });
    }
    handleScrollToEnd() {
        this.nav.scroll({
            left: this.nav.scrollLeft + this.nav.clientWidth,
            behavior: "smooth"
        });
    }
    updateScrollControls() {
        if (this.nav) {
            if (this.noScrollControls) this.hasScrollControls = false;
            else this.hasScrollControls = [
                "top",
                "bottom"
            ].includes(this.placement) && this.nav.scrollWidth > this.nav.clientWidth;
        }
    }
    setActiveTab(tab, options) {
        options = Object.assign({
            emitEvents: true,
            scrollBehavior: "auto"
        }, options);
        if (tab && tab !== this.activeTab && !tab.disabled) {
            const previousTab = this.activeTab;
            this.activeTab = tab;
            this.tabs.map((el)=>el.active = el === this.activeTab
            );
            this.panels.map((el)=>el.active = el.name === this.activeTab.panel
            );
            this.syncIndicator();
            if ([
                "top",
                "bottom"
            ].includes(this.placement)) _chunkST4GEPNZJs.scrollIntoView(this.activeTab, this.nav, "horizontal", options.scrollBehavior);
            if (options.emitEvents) {
                if (previousTab) _chunkI4TE3TJVJs.emit(this, "sl-tab-hide", {
                    detail: {
                        name: previousTab.panel
                    }
                });
                _chunkI4TE3TJVJs.emit(this, "sl-tab-show", {
                    detail: {
                        name: this.activeTab.panel
                    }
                });
            }
        }
    }
    setAriaLabels() {
        this.tabs.map((tab)=>{
            const panel = this.panels.find((el)=>el.name === tab.panel
            );
            if (panel) {
                tab.setAttribute("aria-controls", panel.getAttribute("id"));
                panel.setAttribute("aria-labelledby", tab.getAttribute("id"));
            }
        });
    }
    syncIndicator() {
        if (this.indicator) {
            const tab = this.getActiveTab();
            if (tab) {
                this.indicator.style.display = "block";
                this.repositionIndicator();
            } else {
                this.indicator.style.display = "none";
                return;
            }
        }
    }
    repositionIndicator() {
        const currentTab = this.getActiveTab();
        if (!currentTab) return;
        const width = currentTab.clientWidth;
        const height = currentTab.clientHeight;
        const offset = _chunkST4GEPNZJs.getOffset(currentTab, this.nav);
        const offsetTop = offset.top + this.nav.scrollTop;
        const offsetLeft = offset.left + this.nav.scrollLeft;
        switch(this.placement){
            case "top":
            case "bottom":
                this.indicator.style.width = `${width}px`;
                this.indicator.style.height = "auto";
                this.indicator.style.transform = `translateX(${offsetLeft}px)`;
                break;
            case "start":
            case "end":
                this.indicator.style.width = "auto";
                this.indicator.style.height = `${height}px`;
                this.indicator.style.transform = `translateY(${offsetTop}px)`;
                break;
        }
    }
    preventIndicatorTransition() {
        const transitionValue = this.indicator.style.transition;
        this.indicator.style.transition = "none";
        requestAnimationFrame(()=>{
            this.indicator.style.transition = transitionValue;
        });
    }
    syncTabsAndPanels() {
        this.tabs = this.getAllTabs();
        this.panels = this.getAllPanels();
        this.syncIndicator();
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "tab-group": true,
            "tab-group--top": this.placement === "top",
            "tab-group--bottom": this.placement === "bottom",
            "tab-group--start": this.placement === "start",
            "tab-group--end": this.placement === "end",
            "tab-group--has-scroll-controls": this.hasScrollControls
        })}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
      >
        <div class="tab-group__nav-container" part="nav">
          ${this.hasScrollControls ? _chunk2VBMOEKGJs.$`
                <sl-icon-button
                  class="tab-group__scroll-button tab-group__scroll-button--start"
                  exportparts="base:scroll-button"
                  name="chevron-left"
                  library="system"
                  label=${this.localize.term("scroll_to_start")}
                  @click=${this.handleScrollToStart}
                ></sl-icon-button>
              ` : ""}

          <div class="tab-group__nav">
            <div part="tabs" class="tab-group__tabs" role="tablist">
              <div part="active-tab-indicator" class="tab-group__indicator"></div>
              <slot name="nav" @slotchange=${this.syncTabsAndPanels}></slot>
            </div>
          </div>

          ${this.hasScrollControls ? _chunk2VBMOEKGJs.$`
                <sl-icon-button
                  class="tab-group__scroll-button tab-group__scroll-button--end"
                  exportparts="base:scroll-button"
                  name="chevron-right"
                  library="system"
                  label=${this.localize.term("scroll_to_end")}
                  @click=${this.handleScrollToEnd}
                ></sl-icon-button>
              ` : ""}
        </div>

        <div part="body" class="tab-group__body">
          <slot @slotchange=${this.syncTabsAndPanels}></slot>
        </div>
      </div>
    `;
    }
};
SlTabGroup.styles = _chunkJZCWPHAUJs.tab_group_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tab-group")
], SlTabGroup.prototype, "tabGroup", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tab-group__body")
], SlTabGroup.prototype, "body", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tab-group__nav")
], SlTabGroup.prototype, "nav", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".tab-group__indicator")
], SlTabGroup.prototype, "indicator", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlTabGroup.prototype, "hasScrollControls", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTabGroup.prototype, "placement", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTabGroup.prototype, "activation", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "no-scroll-controls",
        type: Boolean
    })
], SlTabGroup.prototype, "noScrollControls", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlTabGroup.prototype, "lang", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("noScrollControls")
], SlTabGroup.prototype, "updateScrollControls", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("placement")
], SlTabGroup.prototype, "syncIndicator", 1);
SlTabGroup = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-tab-group")
], SlTabGroup);

},{"./chunk.JZCWPHAU.js":"jNzoO","./chunk.CCTU25PV.js":"dUPzH","./chunk.ST4GEPNZ.js":"ao9ex","./chunk.W2WMQSCE.js":"9o2tn","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jNzoO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tab_group_styles_default", ()=>tab_group_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/tab-group/tab-group.styles.ts
var tab_group_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --track-color: var(--sl-color-neutral-200);
    --indicator-color: var(--sl-color-primary-600);

    display: block;
  }

  .tab-group {
    display: flex;
    border: solid 1px transparent;
    border-radius: 0;
  }

  .tab-group .tab-group__tabs {
    display: flex;
    position: relative;
  }

  .tab-group .tab-group__indicator {
    position: absolute;
    left: 0;
    transition: var(--sl-transition-fast) transform ease, var(--sl-transition-fast) width ease;
  }

  .tab-group--has-scroll-controls .tab-group__nav-container {
    position: relative;
    padding: 0 var(--sl-spacing-x-large);
  }

  .tab-group__scroll-button {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    bottom: 0;
    width: var(--sl-spacing-x-large);
  }

  .tab-group__scroll-button--start {
    left: 0;
  }

  .tab-group__scroll-button--end {
    right: 0;
  }

  /*
   * Top
   */

  .tab-group--top {
    flex-direction: column;
  }

  .tab-group--top .tab-group__nav-container {
    order: 1;
  }

  .tab-group--top .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--top .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--top .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-bottom: solid 2px var(--track-color);
  }

  .tab-group--top .tab-group__indicator {
    bottom: -2px;
    border-bottom: solid 2px var(--indicator-color);
  }

  .tab-group--top .tab-group__body {
    order: 2;
  }

  .tab-group--top ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Bottom
   */

  .tab-group--bottom {
    flex-direction: column;
  }

  .tab-group--bottom .tab-group__nav-container {
    order: 2;
  }

  .tab-group--bottom .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--bottom .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--bottom .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-top: solid 2px var(--track-color);
  }

  .tab-group--bottom .tab-group__indicator {
    top: calc(-1 * 2px);
    border-top: solid 2px var(--indicator-color);
  }

  .tab-group--bottom .tab-group__body {
    order: 1;
  }

  .tab-group--bottom ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Start
   */

  .tab-group--start {
    flex-direction: row;
  }

  .tab-group--start .tab-group__nav-container {
    order: 1;
  }

  .tab-group--start .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-right: solid 2px var(--track-color);
  }

  .tab-group--start .tab-group__indicator {
    right: calc(-1 * 2px);
    border-right: solid 2px var(--indicator-color);
  }

  .tab-group--start .tab-group__body {
    flex: 1 1 auto;
    order: 2;
  }

  .tab-group--start ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }

  /*
   * End
   */

  .tab-group--end {
    flex-direction: row;
  }

  .tab-group--end .tab-group__nav-container {
    order: 2;
  }

  .tab-group--end .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-left: solid 2px var(--track-color);
  }

  .tab-group--end .tab-group__indicator {
    left: calc(-1 * 2px);
    border-left: solid 2px var(--indicator-color);
  }

  .tab-group--end .tab-group__body {
    flex: 1 1 auto;
    order: 1;
  }

  .tab-group--end ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ao9ex":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOffset", ()=>getOffset
);
parcelHelpers.export(exports, "lockBodyScrolling", ()=>lockBodyScrolling
);
parcelHelpers.export(exports, "unlockBodyScrolling", ()=>unlockBodyScrolling
);
parcelHelpers.export(exports, "scrollIntoView", ()=>scrollIntoView
);
// src/internal/offset.ts
function getOffset(element, parent) {
    return {
        top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),
        left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left)
    };
}
// src/internal/scroll.ts
var locks = /* @__PURE__ */ new Set();
function lockBodyScrolling(lockingEl) {
    locks.add(lockingEl);
    document.body.classList.add("sl-scroll-lock");
}
function unlockBodyScrolling(lockingEl) {
    locks.delete(lockingEl);
    if (locks.size === 0) document.body.classList.remove("sl-scroll-lock");
}
function scrollIntoView(element, container, direction = "vertical", behavior = "smooth") {
    const offset = getOffset(element, container);
    const offsetTop = offset.top + container.scrollTop;
    const offsetLeft = offset.left + container.scrollLeft;
    const minX = container.scrollLeft;
    const maxX = container.scrollLeft + container.offsetWidth;
    const minY = container.scrollTop;
    const maxY = container.scrollTop + container.offsetHeight;
    if (direction === "horizontal" || direction === "both") {
        if (offsetLeft < minX) container.scrollTo({
            left: offsetLeft,
            behavior
        });
        else if (offsetLeft + element.clientWidth > maxX) container.scrollTo({
            left: offsetLeft - container.offsetWidth + element.clientWidth,
            behavior
        });
    }
    if (direction === "vertical" || direction === "both") {
        if (offsetTop < minY) container.scrollTo({
            top: offsetTop,
            behavior
        });
        else if (offsetTop + element.clientHeight > maxY) container.scrollTo({
            top: offsetTop - container.offsetHeight + element.clientHeight,
            behavior
        });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxCEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlResponsiveMedia", ()=>SlResponsiveMedia
);
var _chunk5PUW23M6Js = require("./chunk.5PUW23M6.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/responsive-media/responsive-media.ts
var SlResponsiveMedia = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.aspectRatio = "16:9";
        this.fit = "cover";
    }
    render() {
        const split = this.aspectRatio.split(":");
        const x = parseFloat(split[0]);
        const y = parseFloat(split[1]);
        const paddingBottom = x && y ? `${y / x * 100}%` : "0";
        return _chunk2VBMOEKGJs.$`
      <div
        class=${_chunkW2WMQSCEJs.o({
            "responsive-media": true,
            "responsive-media--cover": this.fit === "cover",
            "responsive-media--contain": this.fit === "contain"
        })}
        style="padding-bottom: ${paddingBottom}"
      >
        <slot></slot>
      </div>
    `;
    }
};
SlResponsiveMedia.styles = _chunk5PUW23M6Js.responsive_media_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "aspect-ratio"
    })
], SlResponsiveMedia.prototype, "aspectRatio", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlResponsiveMedia.prototype, "fit", 2);
SlResponsiveMedia = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-responsive-media")
], SlResponsiveMedia);

},{"./chunk.5PUW23M6.js":"9fPQ6","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fPQ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "responsive_media_styles_default", ()=>responsive_media_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/responsive-media/responsive-media.styles.ts
var responsive_media_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .responsive-media {
    position: relative;
  }

  .responsive-media ::slotted(*) {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
  }

  .responsive-media--cover ::slotted(embed),
  .responsive-media--cover ::slotted(iframe),
  .responsive-media--cover ::slotted(img),
  .responsive-media--cover ::slotted(video) {
    object-fit: cover !important;
  }

  .responsive-media--contain ::slotted(embed),
  .responsive-media--contain ::slotted(iframe),
  .responsive-media--contain ::slotted(img),
  .responsive-media--contain ::slotted(video) {
    object-fit: contain !important;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oTcs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlSelect", ()=>SlSelect
);
var _chunkJ3OIITR5Js = require("./chunk.J3OIITR5.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/select/select.ts
var id = 0;
var SlSelect = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "help-text", "label");
        this.inputId = `select-${++id}`;
        this.helpTextId = `select-help-text-${id}`;
        this.labelId = `select-label-${id}`;
        this.hasFocus = false;
        this.isOpen = false;
        this.displayLabel = "";
        this.displayTags = [];
        this.multiple = false;
        this.maxTagsVisible = 3;
        this.disabled = false;
        this.name = "";
        this.placeholder = "";
        this.size = "medium";
        this.hoist = false;
        this.value = "";
        this.filled = false;
        this.pill = false;
        this.required = false;
        this.clearable = false;
        this.invalid = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.handleMenuSlotChange = this.handleMenuSlotChange.bind(this);
        this.resizeObserver = new ResizeObserver(()=>this.resizeMenu()
        );
        this.updateComplete.then(()=>{
            this.resizeObserver.observe(this);
            this.syncItemsFromValue();
        });
    }
    firstUpdated() {
        this.invalid = !this.input.checkValidity();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.resizeObserver.unobserve(this);
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    getItemLabel(item) {
        const slot = item.shadowRoot.querySelector("slot:not([name])");
        return _chunk5TL5QPK4Js.getTextContent(slot);
    }
    getItems() {
        return [
            ...this.querySelectorAll("sl-menu-item")
        ];
    }
    getValueAsArray() {
        if (this.multiple && this.value === "") return [];
        return Array.isArray(this.value) ? this.value : [
            this.value
        ];
    }
    focus(options) {
        this.control.focus(options);
    }
    blur() {
        this.control.blur();
    }
    handleBlur() {
        if (!this.isOpen) {
            this.hasFocus = false;
            _chunkI4TE3TJVJs.emit(this, "sl-blur");
        }
    }
    handleClearClick(event) {
        event.stopPropagation();
        this.value = this.multiple ? [] : "";
        _chunkI4TE3TJVJs.emit(this, "sl-clear");
        this.syncItemsFromValue();
    }
    handleDisabledChange() {
        if (this.disabled && this.isOpen) this.dropdown.hide();
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        if (!this.hasFocus) {
            this.hasFocus = true;
            _chunkI4TE3TJVJs.emit(this, "sl-focus");
        }
    }
    handleKeyDown(event) {
        const target = event.target;
        const items = this.getItems();
        const firstItem = items[0];
        const lastItem = items[items.length - 1];
        if (target.tagName.toLowerCase() === "sl-tag") return;
        if (event.key === "Tab") {
            if (this.isOpen) this.dropdown.hide();
            return;
        }
        if ([
            "ArrowDown",
            "ArrowUp"
        ].includes(event.key)) {
            event.preventDefault();
            if (!this.isOpen) this.dropdown.show();
            if (event.key === "ArrowDown" && firstItem) {
                this.menu.setCurrentItem(firstItem);
                firstItem.focus();
                return;
            }
            if (event.key === "ArrowUp" && lastItem) {
                this.menu.setCurrentItem(lastItem);
                lastItem.focus();
                return;
            }
        }
        if (event.ctrlKey || event.metaKey) return;
        if (!this.isOpen && event.key.length === 1) {
            event.stopPropagation();
            event.preventDefault();
            this.dropdown.show();
            this.menu.typeToSelect(event.key);
        }
    }
    handleLabelClick() {
        this.focus();
    }
    handleMenuSelect(event) {
        var _a;
        const item = event.detail.item;
        if (this.multiple) this.value = ((_a = this.value) == null ? void 0 : _a.includes(item.value)) ? this.value.filter((v)=>v !== item.value
        ) : [
            ...this.value,
            item.value
        ];
        else this.value = item.value;
        this.syncItemsFromValue();
    }
    handleMenuShow() {
        this.resizeMenu();
        this.isOpen = true;
    }
    handleMenuHide() {
        this.isOpen = false;
        this.control.focus();
    }
    handleMultipleChange() {
        const value = this.getValueAsArray();
        this.value = this.multiple ? value : value[0] || "";
        this.syncItemsFromValue();
    }
    async handleMenuSlotChange() {
        const items = this.getItems();
        const values = [];
        items.map((item)=>{
            if (values.includes(item.value)) console.error(`Duplicate value found in <sl-select> menu item: '${item.value}'`, item);
            values.push(item.value);
        });
        await Promise.all(items.map((item)=>item.render
        )).then(()=>this.syncItemsFromValue()
        );
    }
    handleTagInteraction(event) {
        const path = event.composedPath();
        const clearButton = path.find((el)=>{
            if (el instanceof HTMLElement) {
                const element = el;
                return element.classList.contains("tag__remove");
            }
            return false;
        });
        if (clearButton) event.stopPropagation();
    }
    async handleValueChange() {
        this.syncItemsFromValue();
        await this.updateComplete;
        this.invalid = !this.input.checkValidity();
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    resizeMenu() {
        var _a;
        const box = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(".select__control");
        this.menu.style.width = `${box.clientWidth}px`;
        if (this.dropdown) this.dropdown.reposition();
    }
    syncItemsFromValue() {
        const items = this.getItems();
        const value = this.getValueAsArray();
        items.map((item)=>item.checked = value.includes(item.value)
        );
        if (this.multiple) {
            const checkedItems = items.filter((item)=>value.includes(item.value)
            );
            this.displayLabel = checkedItems[0] ? this.getItemLabel(checkedItems[0]) : "";
            this.displayTags = checkedItems.map((item)=>{
                return _chunk2VBMOEKGJs.$`
          <sl-tag
            exportparts="base:tag"
            variant="neutral"
            size=${this.size}
            ?pill=${this.pill}
            removable
            @click=${this.handleTagInteraction}
            @keydown=${this.handleTagInteraction}
            @sl-remove=${(event)=>{
                    event.stopPropagation();
                    if (!this.disabled) {
                        item.checked = false;
                        this.syncValueFromItems();
                    }
                }}
          >
            ${this.getItemLabel(item)}
          </sl-tag>
        `;
            });
            if (this.maxTagsVisible > 0 && this.displayTags.length > this.maxTagsVisible) {
                const total = this.displayTags.length;
                this.displayLabel = "";
                this.displayTags = this.displayTags.slice(0, this.maxTagsVisible);
                this.displayTags.push(_chunk2VBMOEKGJs.$`
          <sl-tag exportparts="base:tag" variant="neutral" size=${this.size}> +${total - this.maxTagsVisible} </sl-tag>
        `);
            }
        } else {
            const checkedItem = items.filter((item)=>item.value === value[0]
            )[0];
            this.displayLabel = checkedItem ? this.getItemLabel(checkedItem) : "";
            this.displayTags = [];
        }
    }
    syncValueFromItems() {
        const items = this.getItems();
        const checkedItems = items.filter((item)=>item.checked
        );
        const checkedValues = checkedItems.map((item)=>item.value
        );
        if (this.multiple) this.value = this.value.filter((val)=>checkedValues.includes(val)
        );
        else this.value = checkedValues.length > 0 ? checkedValues[0] : "";
    }
    render() {
        var _a, _b;
        const hasLabelSlot = this.hasSlotController.test("label");
        const hasHelpTextSlot = this.hasSlotController.test("help-text");
        const hasSelection = this.multiple ? ((_a = this.value) == null ? void 0 : _a.length) > 0 : this.value !== "";
        return _chunk4654KI5LJs.renderFormControl({
            inputId: this.inputId,
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpTextId: this.helpTextId,
            helpText: this.helpText,
            hasHelpTextSlot,
            size: this.size,
            onLabelClick: ()=>this.handleLabelClick()
        }, _chunk2VBMOEKGJs.$`
        <sl-dropdown
          part="base"
          .hoist=${this.hoist}
          .stayOpenOnSelect=${this.multiple}
          .containingElement=${this}
          ?disabled=${this.disabled}
          class=${_chunkW2WMQSCEJs.o({
            select: true,
            "select--open": this.isOpen,
            "select--empty": ((_b = this.value) == null ? void 0 : _b.length) === 0,
            "select--focused": this.hasFocus,
            "select--clearable": this.clearable,
            "select--disabled": this.disabled,
            "select--multiple": this.multiple,
            "select--standard": !this.filled,
            "select--filled": this.filled,
            "select--has-tags": this.multiple && this.displayTags.length > 0,
            "select--placeholder-visible": this.displayLabel === "",
            "select--small": this.size === "small",
            "select--medium": this.size === "medium",
            "select--large": this.size === "large",
            "select--pill": this.pill,
            "select--invalid": this.invalid
        })}
          @sl-show=${this.handleMenuShow}
          @sl-hide=${this.handleMenuHide}
        >
          <div
            part="control"
            slot="trigger"
            id=${this.inputId}
            class="select__control"
            role="combobox"
            aria-labelledby=${_chunkKJOCH52QJs.l(_chunk4654KI5LJs.getLabelledBy({
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpText: this.helpText,
            helpTextId: this.helpTextId,
            hasHelpTextSlot
        }))}
            aria-haspopup="true"
            aria-expanded=${this.isOpen ? "true" : "false"}
            tabindex=${this.disabled ? "-1" : "0"}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
            @keydown=${this.handleKeyDown}
          >
            <span part="prefix" class="select__prefix">
              <slot name="prefix"></slot>
            </span>

            <div class="select__label">
              ${this.displayTags.length ? _chunk2VBMOEKGJs.$` <span part="tags" class="select__tags"> ${this.displayTags} </span> ` : this.displayLabel || this.placeholder}
            </div>

            ${this.clearable && hasSelection ? _chunk2VBMOEKGJs.$`
                  <button
                    part="clear-button"
                    class="select__clear"
                    library="system"
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <sl-icon name="x-circle-fill" library="system"></sl-icon>
                    </slot>
                  </button>
                ` : ""}

            <span part="suffix" class="select__suffix">
              <slot name="suffix"></slot>
            </span>

            <span part="icon" class="select__icon" aria-hidden="true">
              <sl-icon name="chevron-down" library="system"></sl-icon>
            </span>

            <!-- The hidden input tricks the browser's built-in validation so it works as expected. We use an input
            instead of a select because, otherwise, iOS will show a list of options during validation. -->
            <input
              class="select__hidden-select"
              aria-hidden="true"
              ?required=${this.required}
              .value=${hasSelection ? "1" : ""}
              tabindex="-1"
            />
          </div>

          <sl-menu part="menu" class="select__menu" @sl-select=${this.handleMenuSelect}>
            <slot @slotchange=${this.handleMenuSlotChange}></slot>
          </sl-menu>
        </sl-dropdown>
      `);
    }
};
SlSelect.styles = _chunkJ3OIITR5Js.select_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".select")
], SlSelect.prototype, "dropdown", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".select__control")
], SlSelect.prototype, "control", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".select__hidden-select")
], SlSelect.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".select__menu")
], SlSelect.prototype, "menu", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlSelect.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlSelect.prototype, "isOpen", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlSelect.prototype, "displayLabel", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlSelect.prototype, "displayTags", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "multiple", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "max-tags-visible",
        type: Number
    })
], SlSelect.prototype, "maxTagsVisible", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSelect.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSelect.prototype, "placeholder", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSelect.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlSelect.prototype, "hoist", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSelect.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "filled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "pill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSelect.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "help-text"
    })
], SlSelect.prototype, "helpText", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "required", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlSelect.prototype, "clearable", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlSelect.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlSelect.prototype, "handleDisabledChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("multiple")
], SlSelect.prototype, "handleMultipleChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value", {
        waitUntilFirstUpdate: true
    })
], SlSelect.prototype, "handleValueChange", 1);
SlSelect = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-select")
], SlSelect);

},{"./chunk.J3OIITR5.js":"a0wAB","./chunk.4654KI5L.js":"3AQaY","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0wAB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "select_styles_default", ()=>select_styles_default
);
var _chunkP2AL2I6LJs = require("./chunk.P2AL2I6L.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/select/select.styles.ts
var select_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}
  ${_chunkP2AL2I6LJs.form_control_styles_default}

  :host {
    display: block;
  }

  .select {
    display: block;
  }

  .select__control {
    display: inline-flex;
    align-items: center;
    justify-content: start;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    transition: var(--sl-transition-fast) color, var(--sl-transition-fast) border, var(--sl-transition-fast) box-shadow;
    cursor: pointer;
  }

  .select__menu {
    max-height: 50vh;
    overflow: auto;
  }

  /* Standard selects */
  .select--standard .select__control {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    color: var(--sl-input-color);
  }

  .select--standard:not(.select--disabled) .select__control:hover {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
    color: var(--sl-input-color-hover);
  }

  .select--standard.select--focused:not(.select--disabled) .select__control {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: var(--sl-focus-ring);
    outline: none;
    color: var(--sl-input-color-focus);
  }

  .select--standard.select--disabled .select__control {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    color: var(--sl-input-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
    outline: none;
  }

  /* Filled selects */
  .select--filled .select__control {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .select--filled:hover:not(.select--disabled) .select__control {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .select--filled.select--focused:not(.select--disabled) .select__control {
    outline: none;
    background-color: var(--sl-input-filled-background-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  .select--filled.select--disabled .select__control {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .select--disabled .select__tags,
  .select--disabled .select__clear {
    pointer-events: none;
  }

  .select__prefix {
    display: inline-flex;
    align-items: center;
    color: var(--sl-input-placeholder-color);
  }

  .select__label {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
    user-select: none;
    overflow-x: auto;
    overflow-y: hidden;
    white-space: nowrap;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .select__label::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .select__clear {
    flex: 0 0 auto;
    display: inline-flex;
    align-items: center;
    width: 1.25em;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .select__clear:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .select__suffix {
    display: inline-flex;
    align-items: center;
    color: var(--sl-input-placeholder-color);
  }

  .select__icon {
    flex: 0 0 auto;
    display: inline-flex;
    transition: var(--sl-transition-medium) transform ease;
  }

  .select--open .select__icon {
    transform: rotate(-180deg);
  }

  /* Placeholder */
  .select--placeholder-visible .select__label {
    color: var(--sl-input-placeholder-color);
  }

  .select--disabled.select--placeholder-visible .select__label {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Tags */
  .select__tags {
    display: inline-flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: left;
    margin-left: var(--sl-spacing-2x-small);
  }

  /* Hidden input (for form control validation to show) */
  .select__hidden-select {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    overflow: hidden;
    white-space: nowrap;
  }

  /*
   * Size modifiers
   */

  /* Small */
  .select--small .select__control {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    min-height: var(--sl-input-height-small);
  }

  .select--small .select__prefix ::slotted(*) {
    margin-left: var(--sl-input-spacing-small);
  }

  .select--small .select__label {
    margin: 0 var(--sl-input-spacing-small);
  }

  .select--small .select__clear {
    margin-right: var(--sl-input-spacing-small);
  }

  .select--small .select__suffix ::slotted(*) {
    margin-right: var(--sl-input-spacing-small);
  }

  .select--small .select__icon {
    margin-right: var(--sl-input-spacing-small);
  }

  .select--small .select__tags {
    padding-bottom: 2px;
  }

  .select--small .select__tags sl-tag {
    padding-top: 2px;
  }

  .select--small .select__tags sl-tag:not(:last-of-type) {
    margin-right: var(--sl-spacing-2x-small);
  }

  .select--small.select--has-tags .select__label {
    margin-left: 0;
  }

  /* Medium */
  .select--medium .select__control {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    min-height: var(--sl-input-height-medium);
  }

  .select--medium .select__prefix ::slotted(*) {
    margin-left: var(--sl-input-spacing-medium);
  }

  .select--medium .select__label {
    margin: 0 var(--sl-input-spacing-medium);
  }

  .select--medium .select__clear {
    margin-right: var(--sl-input-spacing-medium);
  }

  .select--medium .select__suffix ::slotted(*) {
    margin-right: var(--sl-input-spacing-medium);
  }

  .select--medium .select__icon {
    margin-right: var(--sl-input-spacing-medium);
  }

  .select--medium .select__tags {
    padding-bottom: 3px;
  }

  .select--medium .select__tags sl-tag {
    padding-top: 3px;
  }

  .select--medium .select__tags sl-tag:not(:last-of-type) {
    margin-right: var(--sl-spacing-2x-small);
  }

  .select--medium.select--has-tags .select__label {
    margin-left: 0;
  }

  /* Large */
  .select--large .select__control {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    min-height: var(--sl-input-height-large);
  }

  .select--large .select__prefix ::slotted(*) {
    margin-left: var(--sl-input-spacing-large);
  }

  .select--large .select__label {
    margin: 0 var(--sl-input-spacing-large);
  }

  .select--large .select__clear {
    margin-right: var(--sl-input-spacing-large);
  }

  .select--large .select__suffix ::slotted(*) {
    margin-right: var(--sl-input-spacing-large);
  }

  .select--large .select__icon {
    margin-right: var(--sl-input-spacing-large);
  }

  .select--large .select__tags {
    padding-bottom: 4px;
  }
  .select--large .select__tags sl-tag {
    padding-top: 4px;
  }

  .select--large .select__tags sl-tag:not(:last-of-type) {
    margin-right: var(--sl-spacing-2x-small);
  }

  .select--large.select--has-tags .select__label {
    margin-left: 0;
  }

  /*
   * Pill modifier
   */
  .select--pill.select--small .select__control {
    border-radius: var(--sl-input-height-small);
  }

  .select--pill.select--medium .select__control {
    border-radius: var(--sl-input-height-medium);
  }

  .select--pill.select--large .select__control {
    border-radius: var(--sl-input-height-large);
  }
`;

},{"./chunk.P2AL2I6L.js":"4a66x","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6gees":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlTag", ()=>SlTag
);
var _chunkES6UDUT4Js = require("./chunk.ES6UDUT4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/tag/tag.ts
var SlTag = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.variant = "neutral";
        this.size = "medium";
        this.pill = false;
        this.removable = false;
    }
    handleRemoveClick() {
        _chunkI4TE3TJVJs.emit(this, "sl-remove");
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <span
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            tag: true,
            "tag--primary": this.variant === "primary",
            "tag--success": this.variant === "success",
            "tag--neutral": this.variant === "neutral",
            "tag--warning": this.variant === "warning",
            "tag--danger": this.variant === "danger",
            "tag--text": this.variant === "text",
            "tag--small": this.size === "small",
            "tag--medium": this.size === "medium",
            "tag--large": this.size === "large",
            "tag--pill": this.pill,
            "tag--removable": this.removable
        })}
      >
        <span part="content" class="tag__content">
          <slot></slot>
        </span>

        ${this.removable ? _chunk2VBMOEKGJs.$`
              <sl-icon-button
                exportparts="base:remove-button"
                name="x"
                library="system"
                class="tag__remove"
                @click=${this.handleRemoveClick}
              ></sl-icon-button>
            ` : ""}
      </span>
    `;
    }
};
SlTag.styles = _chunkES6UDUT4Js.tag_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlTag.prototype, "variant", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlTag.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlTag.prototype, "pill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlTag.prototype, "removable", 2);
SlTag = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-tag")
], SlTag);

},{"./chunk.ES6UDUT4.js":"9fLV2","./chunk.W2WMQSCE.js":"9o2tn","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fLV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tag_styles_default", ()=>tag_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/tag/tag.styles.ts
var tag_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .tag {
    display: flex;
    align-items: center;
    border: solid 1px;
    line-height: 1;
    white-space: nowrap;
    user-select: none;
    cursor: default;
  }

  .tag__remove::part(base) {
    color: inherit;
    padding: 0;
  }

  /*
   * Variant modifiers
   */

  .tag--primary {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-200);
    color: var(--sl-color-primary-800);
  }

  .tag--success {
    background-color: var(--sl-color-success-50);
    border-color: var(--sl-color-success-200);
    color: var(--sl-color-success-800);
  }

  .tag--neutral {
    background-color: var(--sl-color-neutral-50);
    border-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-800);
  }

  .tag--warning {
    background-color: var(--sl-color-warning-50);
    border-color: var(--sl-color-warning-200);
    color: var(--sl-color-warning-800);
  }

  .tag--danger {
    background-color: var(--sl-color-danger-50);
    border-color: var(--sl-color-danger-200);
    color: var(--sl-color-danger-800);
  }

  /*
   * Size modifiers
   */

  .tag--small {
    font-size: var(--sl-button-font-size-small);
    height: calc(var(--sl-input-height-small) * 0.8);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
    padding: 0 var(--sl-spacing-x-small);
  }

  .tag--small .tag__remove {
    margin-left: var(--sl-spacing-2x-small);
    margin-right: calc(-1 * var(--sl-spacing-3x-small));
  }

  .tag--medium {
    font-size: var(--sl-button-font-size-medium);
    height: calc(var(--sl-input-height-medium) * 0.8);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
    padding: 0 var(--sl-spacing-small);
  }

  .tag__remove {
    margin-left: var(--sl-spacing-2x-small);
    margin-right: calc(-1 * var(--sl-spacing-2x-small));
  }

  .tag--large {
    font-size: var(--sl-button-font-size-large);
    height: calc(var(--sl-input-height-large) * 0.8);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
    padding: 0 var(--sl-spacing-medium);
  }

  .tag__remove {
    margin-left: var(--sl-spacing-2x-small);
    margin-right: calc(-1 * var(--sl-spacing-x-small));
  }

  /*
   * Pill modifier
   */

  .tag--pill {
    border-radius: var(--sl-border-radius-pill);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jF5dU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlSkeleton", ()=>SlSkeleton
);
var _chunkJ665TFKFJs = require("./chunk.J665TFKF.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/skeleton/skeleton.ts
var SlSkeleton = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.effect = "none";
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            skeleton: true,
            "skeleton--pulse": this.effect === "pulse",
            "skeleton--sheen": this.effect === "sheen"
        })}
        aria-busy="true"
        aria-live="polite"
      >
        <div part="indicator" class="skeleton__indicator"></div>
      </div>
    `;
    }
};
SlSkeleton.styles = _chunkJ665TFKFJs.skeleton_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlSkeleton.prototype, "effect", 2);
SlSkeleton = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-skeleton")
], SlSkeleton);

},{"./chunk.J665TFKF.js":"k2qhw","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2qhw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "skeleton_styles_default", ()=>skeleton_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/skeleton/skeleton.styles.ts
var skeleton_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --border-radius: var(--sl-border-radius-pill);
    --color: var(--sl-color-neutral-200);
    --sheen-color: var(--sl-color-neutral-300);

    display: block;
    position: relative;
  }

  .skeleton {
    display: flex;
    width: 100%;
    height: 100%;
    min-height: 1rem;
  }

  .skeleton__indicator {
    flex: 1 1 auto;
    background: var(--color);
    border-radius: var(--border-radius);
  }

  .skeleton--sheen .skeleton__indicator {
    background: linear-gradient(270deg, var(--sheen-color), var(--color), var(--color), var(--sheen-color));
    background-size: 400% 100%;
    background-size: 400% 100%;
    animation: sheen 8s ease-in-out infinite;
  }

  .skeleton--pulse .skeleton__indicator {
    animation: pulse 2s ease-in-out 0.5s infinite;
  }

  @keyframes sheen {
    0% {
      background-position: 200% 0;
    }
    to {
      background-position: -200% 0;
    }
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.4;
    }
    100% {
      opacity: 1;
    }
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4LeFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlRange", ()=>SlRange
);
var _chunkIIZXV6ZDJs = require("./chunk.IIZXV6ZD.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/range/range.ts
var id = 0;
var SlRange = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "help-text", "label");
        this.inputId = `input-${++id}`;
        this.helpTextId = `input-help-text-${id}`;
        this.labelId = `input-label-${id}`;
        this.hasFocus = false;
        this.hasTooltip = false;
        this.name = "";
        this.value = 0;
        this.label = "";
        this.helpText = "";
        this.disabled = false;
        this.invalid = false;
        this.min = 0;
        this.max = 100;
        this.step = 1;
        this.tooltip = "top";
        this.tooltipFormatter = (value)=>value.toString()
        ;
    }
    connectedCallback() {
        super.connectedCallback();
        this.resizeObserver = new ResizeObserver(()=>this.syncRange()
        );
        if (this.value === void 0 || this.value === null) this.value = this.min;
        if (this.value < this.min) this.value = this.min;
        if (this.value > this.max) this.value = this.max;
        this.updateComplete.then(()=>{
            this.syncRange();
            this.resizeObserver.observe(this.input);
        });
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.resizeObserver.unobserve(this.input);
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleInput() {
        this.value = Number(this.input.value);
        _chunkI4TE3TJVJs.emit(this, "sl-change");
        this.syncRange();
    }
    handleBlur() {
        this.hasFocus = false;
        this.hasTooltip = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleValueChange() {
        this.value = Number(this.value);
        if (this.input) this.invalid = !this.input.checkValidity();
        this.syncRange();
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        this.hasTooltip = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleThumbDragStart() {
        this.hasTooltip = true;
    }
    handleThumbDragEnd() {
        this.hasTooltip = false;
    }
    syncRange() {
        const percent = Math.max(0, (this.value - this.min) / (this.max - this.min));
        this.syncProgress(percent);
        if (this.tooltip !== "none") this.syncTooltip(percent);
    }
    syncProgress(percent) {
        this.input.style.background = `linear-gradient(to right, var(--track-color-active) 0%, var(--track-color-active) ${percent * 100}%, var(--track-color-inactive) ${percent * 100}%, var(--track-color-inactive) 100%)`;
    }
    syncTooltip(percent) {
        if (this.output) {
            const inputWidth = this.input.offsetWidth;
            const tooltipWidth = this.output.offsetWidth;
            const thumbSize = getComputedStyle(this.input).getPropertyValue("--thumb-size");
            const x = `calc(${inputWidth * percent}px - calc(calc(${percent} * ${thumbSize}) - calc(${thumbSize} / 2)))`;
            this.output.style.transform = `translateX(${x})`;
            this.output.style.marginLeft = `-${tooltipWidth / 2}px`;
        }
    }
    render() {
        const hasLabelSlot = this.hasSlotController.test("label");
        const hasHelpTextSlot = this.hasSlotController.test("help-text");
        return _chunk4654KI5LJs.renderFormControl({
            inputId: this.inputId,
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpTextId: this.helpTextId,
            helpText: this.helpText,
            hasHelpTextSlot,
            size: "medium"
        }, _chunk2VBMOEKGJs.$`
        <div
          part="base"
          class=${_chunkW2WMQSCEJs.o({
            range: true,
            "range--disabled": this.disabled,
            "range--focused": this.hasFocus,
            "range--tooltip-visible": this.hasTooltip,
            "range--tooltip-top": this.tooltip === "top",
            "range--tooltip-bottom": this.tooltip === "bottom"
        })}
          @mousedown=${this.handleThumbDragStart}
          @mouseup=${this.handleThumbDragEnd}
          @touchstart=${this.handleThumbDragStart}
          @touchend=${this.handleThumbDragEnd}
        >
          <input
            part="input"
            type="range"
            class="range__control"
            name=${_chunkKJOCH52QJs.l(this.name)}
            ?disabled=${this.disabled}
            min=${_chunkKJOCH52QJs.l(this.min)}
            max=${_chunkKJOCH52QJs.l(this.max)}
            step=${_chunkKJOCH52QJs.l(this.step)}
            .value=${_chunkGPPFFSGRJs.l(String(this.value))}
            aria-labelledby=${_chunkKJOCH52QJs.l(_chunk4654KI5LJs.getLabelledBy({
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpText: this.helpText,
            helpTextId: this.helpTextId,
            hasHelpTextSlot
        }))}
            @input=${this.handleInput}
            @focus=${this.handleFocus}
            @blur=${this.handleBlur}
          />
          ${this.tooltip !== "none" && !this.disabled ? _chunk2VBMOEKGJs.$`
                <output part="tooltip" class="range__tooltip">
                  ${typeof this.tooltipFormatter === "function" ? this.tooltipFormatter(this.value) : this.value}
                </output>
              ` : ""}
        </div>
      `);
    }
};
SlRange.styles = _chunkIIZXV6ZDJs.range_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".range__control")
], SlRange.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".range__tooltip")
], SlRange.prototype, "output", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRange.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRange.prototype, "hasTooltip", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRange.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRange.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRange.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "help-text"
    })
], SlRange.prototype, "helpText", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRange.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRange.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRange.prototype, "min", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRange.prototype, "max", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRange.prototype, "step", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRange.prototype, "tooltip", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: false
    })
], SlRange.prototype, "tooltipFormatter", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value", {
        waitUntilFirstUpdate: true
    })
], SlRange.prototype, "handleValueChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlRange.prototype, "handleDisabledChange", 1);
SlRange = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-range")
], SlRange);

},{"./chunk.IIZXV6ZD.js":"6qZwA","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6qZwA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "range_styles_default", ()=>range_styles_default
);
var _chunkP2AL2I6LJs = require("./chunk.P2AL2I6L.js");
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/range/range.styles.ts
var range_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}
  ${_chunkP2AL2I6LJs.form_control_styles_default}

  :host {
    --thumb-size: 20px;
    --tooltip-offset: 10px;
    --track-color-active: var(--sl-color-neutral-200);
    --track-color-inactive: var(--sl-color-neutral-200);
    --track-height: 6px;

    display: block;
  }

  .range {
    position: relative;
  }

  .range__control {
    -webkit-appearance: none;
    border-radius: 3px;
    width: 100%;
    height: var(--track-height);
    background: transparent;
    line-height: var(--sl-input-height-medium);
    vertical-align: middle;
  }

  /* Webkit */
  .range__control::-webkit-slider-runnable-track {
    width: 100%;
    height: var(--track-height);
    border-radius: 3px;
    border: none;
  }

  .range__control::-webkit-slider-thumb {
    border: none;
    width: var(--thumb-size);
    height: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border: solid var(--sl-input-border-width) var(--sl-color-primary-600);
    -webkit-appearance: none;
    margin-top: calc(var(--thumb-size) / -2 + var(--track-height) / 2);
    transition: var(--sl-transition-fast) border-color, var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color, var(--sl-transition-fast) box-shadow, var(--sl-transition-fast) transform;
    cursor: pointer;
  }

  .range__control:enabled::-webkit-slider-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled${_chunkAN2XMPAVJs.focusVisibleSelector}::-webkit-slider-thumb {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  .range__control:enabled::-webkit-slider-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* Firefox */
  .range__control::-moz-focus-outer {
    border: 0;
  }

  .range__control::-moz-range-progress {
    background-color: var(--track-color-active);
    border-radius: 3px;
    height: var(--track-height);
  }

  .range__control::-moz-range-track {
    width: 100%;
    height: var(--track-height);
    background-color: var(--track-color-inactive);
    border-radius: 3px;
    border: none;
  }

  .range__control::-moz-range-thumb {
    border: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    transition: var(--sl-transition-fast) border-color, var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color, var(--sl-transition-fast) box-shadow, var(--sl-transition-fast) transform;
    cursor: pointer;
  }

  .range__control:enabled::-moz-range-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled${_chunkAN2XMPAVJs.focusVisibleSelector}::-moz-range-thumb {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  .range__control:enabled::-moz-range-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* States */
  .range__control${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
  }

  .range__control:disabled {
    opacity: 0.5;
  }

  .range__control:disabled::-webkit-slider-thumb {
    cursor: not-allowed;
  }

  .range__control:disabled::-moz-range-thumb {
    cursor: not-allowed;
  }

  /* Tooltip output */
  .range__tooltip {
    position: absolute;
    z-index: var(--sl-z-index-tooltip);
    left: 1px;
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    opacity: 0;
    padding: var(--sl-tooltip-padding);
    transition: var(--sl-transition-fast) opacity;
    pointer-events: none;
  }

  .range__tooltip:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: 50%;
    margin-left: calc(-1 * var(--sl-tooltip-arrow-size));
  }

  .range--tooltip-visible .range__tooltip {
    opacity: 1;
  }

  /* Tooltip on top */
  .range--tooltip-top .range__tooltip {
    top: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-top .range__tooltip:after {
    border-top: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    top: 100%;
  }

  /* Tooltip on bottom */
  .range--tooltip-bottom .range__tooltip {
    bottom: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-bottom .range__tooltip:after {
    border-bottom: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    bottom: 100%;
  }
`;

},{"./chunk.P2AL2I6L.js":"4a66x","./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7X6a4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlRating", ()=>SlRating
);
var _chunkO4RIR5QUJs = require("./chunk.O4RIR5QU.js");
var _chunkT56CG5BMJs = require("./chunk.T56CG5BM.js");
var _chunkDIYFVAUNJs = require("./chunk.DIYFVAUN.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkIBSPWXHKJs = require("./chunk.IBSPWXHK.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/rating/rating.ts
var SlRating = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hoverValue = 0;
        this.isHovering = false;
        this.value = 0;
        this.max = 5;
        this.precision = 1;
        this.readonly = false;
        this.disabled = false;
        this.getSymbol = (value)=>'<sl-icon name="star-fill" library="system"></sl-icon>'
        ;
    }
    focus(options) {
        this.rating.focus(options);
    }
    blur() {
        this.rating.blur();
    }
    getValueFromMousePosition(event) {
        return this.getValueFromXCoordinate(event.clientX);
    }
    getValueFromTouchPosition(event) {
        return this.getValueFromXCoordinate(event.touches[0].clientX);
    }
    getValueFromXCoordinate(coordinate) {
        const containerLeft = this.rating.getBoundingClientRect().left;
        const containerWidth = this.rating.getBoundingClientRect().width;
        return _chunkT56CG5BMJs.clamp(this.roundToPrecision((coordinate - containerLeft) / containerWidth * this.max, this.precision), 0, this.max);
    }
    handleClick(event) {
        this.setValue(this.getValueFromMousePosition(event));
    }
    setValue(newValue) {
        if (this.disabled || this.readonly) return;
        this.value = newValue === this.value ? 0 : newValue;
        this.isHovering = false;
    }
    handleKeyDown(event) {
        if (this.disabled || this.readonly) return;
        if (event.key === "ArrowLeft") {
            const decrement = event.shiftKey ? 1 : this.precision;
            this.value = Math.max(0, this.value - decrement);
            event.preventDefault();
        }
        if (event.key === "ArrowRight") {
            const increment = event.shiftKey ? 1 : this.precision;
            this.value = Math.min(this.max, this.value + increment);
            event.preventDefault();
        }
        if (event.key === "Home") {
            this.value = 0;
            event.preventDefault();
        }
        if (event.key === "End") {
            this.value = this.max;
            event.preventDefault();
        }
    }
    handleMouseEnter() {
        this.isHovering = true;
    }
    handleMouseMove(event) {
        this.hoverValue = this.getValueFromMousePosition(event);
    }
    handleMouseLeave() {
        this.isHovering = false;
    }
    handleTouchStart(event) {
        this.hoverValue = this.getValueFromTouchPosition(event);
        event.preventDefault();
    }
    handleTouchMove(event) {
        this.isHovering = true;
        this.hoverValue = this.getValueFromTouchPosition(event);
    }
    handleTouchEnd(event) {
        this.isHovering = false;
        this.setValue(this.hoverValue);
        event.preventDefault();
    }
    handleValueChange() {
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    roundToPrecision(numberToRound, precision = 0.5) {
        const multiplier = 1 / precision;
        return Math.ceil(numberToRound * multiplier) / multiplier;
    }
    render() {
        const counter = Array.from(Array(this.max).keys());
        let displayValue = 0;
        if (this.disabled || this.readonly) displayValue = this.value;
        else displayValue = this.isHovering ? this.hoverValue : this.value;
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            rating: true,
            "rating--readonly": this.readonly,
            "rating--disabled": this.disabled
        })}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-readonly=${this.readonly ? "true" : "false"}
        aria-value=${this.value}
        aria-valuemin=${0}
        aria-valuemax=${this.max}
        tabindex=${this.disabled ? "-1" : "0"}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mouseenter=${this.handleMouseEnter}
        @touchstart=${this.handleTouchStart}
        @mouseleave=${this.handleMouseLeave}
        @touchend=${this.handleTouchEnd}
        @mousemove=${this.handleMouseMove}
        @touchmove=${this.handleTouchMove}
      >
        <span class="rating__symbols rating__symbols--inactive">
          ${counter.map((index)=>{
            return _chunk2VBMOEKGJs.$`
              <span
                class=${_chunkW2WMQSCEJs.o({
                rating__symbol: true,
                "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1
            })}
                role="presentation"
                @mouseenter=${this.handleMouseEnter}
              >
                ${_chunkIBSPWXHKJs.o(this.getSymbol(index + 1))}
              </span>
            `;
        })}
        </span>

        <span class="rating__symbols rating__symbols--indicator">
          ${counter.map((index)=>{
            return _chunk2VBMOEKGJs.$`
              <span
                class=${_chunkW2WMQSCEJs.o({
                rating__symbol: true,
                "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1
            })}
                style=${_chunkDIYFVAUNJs.i({
                clipPath: displayValue > index + 1 ? "none" : `inset(0 ${100 - (displayValue - index) / 1 * 100}% 0 0)`
            })}
                role="presentation"
              >
                ${_chunkIBSPWXHKJs.o(this.getSymbol(index + 1))}
              </span>
            `;
        })}
        </span>
      </div>
    `;
    }
};
SlRating.styles = _chunkO4RIR5QUJs.rating_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".rating")
], SlRating.prototype, "rating", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRating.prototype, "hoverValue", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRating.prototype, "isHovering", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRating.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRating.prototype, "max", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlRating.prototype, "precision", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRating.prototype, "readonly", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRating.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRating.prototype, "getSymbol", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value", {
        waitUntilFirstUpdate: true
    })
], SlRating.prototype, "handleValueChange", 1);
SlRating = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-rating")
], SlRating);

},{"./chunk.O4RIR5QU.js":"dyySB","./chunk.T56CG5BM.js":"5yofy","./chunk.DIYFVAUN.js":"gJHLQ","./chunk.W2WMQSCE.js":"9o2tn","./chunk.IBSPWXHK.js":"bRaa7","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dyySB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rating_styles_default", ()=>rating_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/rating/rating.styles.ts
var rating_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --symbol-color: var(--sl-color-neutral-300);
    --symbol-color-active: var(--sl-color-amber-500);
    --symbol-size: 1.2rem;
    --symbol-spacing: var(--sl-spacing-3x-small);

    display: inline-flex;
  }

  .rating {
    position: relative;
    display: inline-flex;
    border-radius: var(--sl-border-radius-medium);
    vertical-align: middle;
  }

  .rating:focus {
    outline: none;
  }

  .rating${_chunkAN2XMPAVJs.focusVisibleSelector} {
    box-shadow: var(--sl-focus-ring);
  }

  .rating__symbols {
    display: inline-flex;
    position: relative;
    font-size: var(--symbol-size);
    line-height: 0;
    color: var(--symbol-color);
    white-space: nowrap;
    cursor: pointer;
  }

  .rating__symbols > * {
    padding: var(--symbol-spacing);
  }

  .rating__symbols--indicator {
    position: absolute;
    top: 0;
    left: 0;
    color: var(--symbol-color-active);
    pointer-events: none;
  }

  .rating__symbol {
    transition: var(--sl-transition-fast) transform;
  }

  .rating__symbol--hover {
    transform: scale(1.2);
  }

  .rating--disabled .rating__symbols,
  .rating--readonly .rating__symbols {
    cursor: default;
  }

  .rating--disabled .rating__symbol--hover,
  .rating--readonly .rating__symbol--hover {
    transform: none;
  }

  .rating--disabled {
    opacity: 0.5;
  }

  .rating--disabled .rating__symbols {
    cursor: not-allowed;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJHLQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "i", ()=>i2
) /**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
var _chunk2JQPDYNAJs = require("./chunk.2JQPDYNA.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// node_modules/lit-html/directives/style-map.js
var i2 = _chunk2JQPDYNAJs.e(class extends _chunk2JQPDYNAJs.i {
    constructor(t2){
        var e2;
        if (super(t2), t2.type !== _chunk2JQPDYNAJs.t.ATTRIBUTE || t2.name !== "style" || ((e2 = t2.strings) === null || e2 === void 0 ? void 0 : e2.length) > 2) throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
    }
    render(t2) {
        return Object.keys(t2).reduce((e2, r)=>{
            const s = t2[r];
            return s == null ? e2 : e2 + `${r = r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${s};`;
        }, "");
    }
    update(e2, [r]) {
        const { style: s  } = e2.element;
        if (this.ct === void 0) {
            this.ct = /* @__PURE__ */ new Set();
            for(const t2 in r)this.ct.add(t2);
            return this.render(r);
        }
        this.ct.forEach((t2)=>{
            r[t2] == null && (this.ct.delete(t2), t2.includes("-") ? s.removeProperty(t2) : s[t2] = "");
        });
        for(const t21 in r){
            const e3 = r[t21];
            e3 != null && (this.ct.add(t21), t21.includes("-") ? s.setProperty(t21, e3) : s[t21] = e3);
        }
        return _chunk2VBMOEKGJs.b;
    }
});

},{"./chunk.2JQPDYNA.js":"4Ri6Y","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRaa7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "o", ()=>o
) /**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
parcelHelpers.export(exports, "SlIcon", ()=>SlIcon
);
var _chunkL4IDTG64Js = require("./chunk.L4IDTG64.js");
var _chunkUJSH3WGMJs = require("./chunk.UJSH3WGM.js");
var _chunk4KUWHA33Js = require("./chunk.4KUWHA33.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunk2JQPDYNAJs = require("./chunk.2JQPDYNA.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/lit-html/directives/unsafe-html.js
var e3 = class extends _chunk2JQPDYNAJs.i {
    constructor(i2){
        if (super(i2), this.it = _chunk2VBMOEKGJs.w, i2.type !== _chunk2JQPDYNAJs.t.CHILD) throw Error(this.constructor.directiveName + "() can only be used in child bindings");
    }
    render(r) {
        if (r === _chunk2VBMOEKGJs.w || r == null) return this.vt = void 0, this.it = r;
        if (r === _chunk2VBMOEKGJs.b) return r;
        if (typeof r != "string") throw Error(this.constructor.directiveName + "() called with a non-string value");
        if (r === this.it) return this.vt;
        this.it = r;
        const s2 = [
            r
        ];
        return s2.raw = s2, this.vt = {
            _$litType$: this.constructor.resultType,
            strings: s2,
            values: []
        };
    }
};
e3.directiveName = "unsafeHTML", e3.resultType = 1;
var o = _chunk2JQPDYNAJs.e(e3);
// node_modules/lit-html/directives/unsafe-svg.js
var t3 = class extends e3 {
};
t3.directiveName = "unsafeSVG", t3.resultType = 2;
var o2 = _chunk2JQPDYNAJs.e(t3);
// src/components/icon/icon.ts
var parser = new DOMParser();
var SlIcon = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.svg = "";
        this.library = "default";
    }
    connectedCallback() {
        super.connectedCallback();
        _chunkL4IDTG64Js.watchIcon(this);
    }
    firstUpdated() {
        this.setIcon();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        _chunkL4IDTG64Js.unwatchIcon(this);
    }
    getUrl() {
        const library = _chunkL4IDTG64Js.getIconLibrary(this.library);
        if (this.name && library) return library.resolver(this.name);
        else return this.src;
    }
    redraw() {
        this.setIcon();
    }
    async setIcon() {
        const library = _chunkL4IDTG64Js.getIconLibrary(this.library);
        const url = this.getUrl();
        if (url) try {
            const file = await _chunkUJSH3WGMJs.requestIcon(url);
            if (url !== this.getUrl()) return;
            else if (file.ok) {
                const doc = parser.parseFromString(file.svg, "text/html");
                const svgEl = doc.body.querySelector("svg");
                if (svgEl) {
                    if (library && library.mutator) library.mutator(svgEl);
                    this.svg = svgEl.outerHTML;
                    _chunkI4TE3TJVJs.emit(this, "sl-load");
                } else {
                    this.svg = "";
                    _chunkI4TE3TJVJs.emit(this, "sl-error", {
                        detail: {
                            status: file.status
                        }
                    });
                }
            } else {
                this.svg = "";
                _chunkI4TE3TJVJs.emit(this, "sl-error", {
                    detail: {
                        status: file.status
                    }
                });
            }
        } catch (e4) {
            _chunkI4TE3TJVJs.emit(this, "sl-error", {
                detail: {
                    status: -1
                }
            });
        }
        else if (this.svg) this.svg = "";
    }
    handleChange() {
        this.setIcon();
    }
    render() {
        const hasLabel = typeof this.label === "string" && this.label.length > 0;
        return _chunk2VBMOEKGJs.$` <div
      part="base"
      class="icon"
      role=${_chunkKJOCH52QJs.l(hasLabel ? "img" : void 0)}
      aria-label=${_chunkKJOCH52QJs.l(hasLabel ? this.label : void 0)}
      aria-hidden=${_chunkKJOCH52QJs.l(hasLabel ? void 0 : "true")}
    >
      ${o2(this.svg)}
    </div>`;
    }
};
SlIcon.styles = _chunk4KUWHA33Js.icon_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlIcon.prototype, "svg", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIcon.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIcon.prototype, "src", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIcon.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIcon.prototype, "library", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("name"),
    _chunkBD26TKS4Js.watch("src"),
    _chunkBD26TKS4Js.watch("library")
], SlIcon.prototype, "setIcon", 1);
SlIcon = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-icon")
], SlIcon);

},{"./chunk.L4IDTG64.js":"5bB1j","./chunk.UJSH3WGM.js":"7vHmo","./chunk.4KUWHA33.js":"69rgo","./chunk.KJOCH52Q.js":"e6TXF","./chunk.2JQPDYNA.js":"4Ri6Y","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bB1j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watchIcon", ()=>watchIcon
);
parcelHelpers.export(exports, "unwatchIcon", ()=>unwatchIcon
);
parcelHelpers.export(exports, "getIconLibrary", ()=>getIconLibrary
);
parcelHelpers.export(exports, "registerIconLibrary", ()=>registerIconLibrary
);
parcelHelpers.export(exports, "unregisterIconLibrary", ()=>unregisterIconLibrary
);
var _chunkC7PPQWMAJs = require("./chunk.C7PPQWMA.js");
var _chunkHEOUBJ7TJs = require("./chunk.HEOUBJ7T.js");
// src/components/icon/library.ts
var registry = [
    _chunkC7PPQWMAJs.library_default_default,
    _chunkHEOUBJ7TJs.library_system_default
];
var watchedIcons = [];
function watchIcon(icon) {
    watchedIcons.push(icon);
}
function unwatchIcon(icon) {
    watchedIcons = watchedIcons.filter((el)=>el !== icon
    );
}
function getIconLibrary(name) {
    return registry.filter((lib)=>lib.name === name
    )[0];
}
function registerIconLibrary(name, options) {
    unregisterIconLibrary(name);
    registry.push({
        name,
        resolver: options.resolver,
        mutator: options.mutator
    });
    watchedIcons.map((icon)=>{
        if (icon.library === name) icon.redraw();
    });
}
function unregisterIconLibrary(name) {
    registry = registry.filter((lib)=>lib.name !== name
    );
}

},{"./chunk.C7PPQWMA.js":"szhSB","./chunk.HEOUBJ7T.js":"3YVet","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"szhSB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "library_default_default", ()=>library_default_default
);
var _chunkNFF2HMITJs = require("./chunk.NFF2HMIT.js");
// src/components/icon/library.default.ts
var library = {
    name: "default",
    resolver: (name)=>`${_chunkNFF2HMITJs.getBasePath()}/assets/icons/${name}.svg`
};
var library_default_default = library;

},{"./chunk.NFF2HMIT.js":"fX0do","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fX0do":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setBasePath", ()=>setBasePath
);
parcelHelpers.export(exports, "getBasePath", ()=>getBasePath
);
// src/utilities/base-path.ts
var basePath = "";
function setBasePath(path) {
    basePath = path;
}
function getBasePath() {
    return basePath.replace(/\/$/, "");
}
var scripts = [
    ...document.getElementsByTagName("script")
];
var configScript = scripts.find((script)=>script.hasAttribute("data-shoelace")
);
if (configScript) setBasePath(configScript.getAttribute("data-shoelace"));
else {
    const fallbackScript = scripts.find((s)=>/shoelace(\.min)?\.js($|\?)/.test(s.src)
    );
    let path = "";
    if (fallbackScript) path = fallbackScript.getAttribute("src");
    setBasePath(path.split("/").slice(0, -1).join("/"));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3YVet":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "library_system_default", ()=>library_system_default
);
// src/components/icon/library.system.ts
var icons = {
    check: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
      <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
    </svg>
  `,
    "chevron-down": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
    "chevron-left": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
    </svg>
  `,
    "chevron-right": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
    eye: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
      <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
      <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
    </svg>
  `,
    "eye-slash": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
      <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
      <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
      <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
    </svg>
  `,
    eyedropper: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
      <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"></path>
    </svg>
  `,
    "grip-vertical": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grip-vertical" viewBox="0 0 16 16">
      <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
    </svg>
  `,
    "person-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
    </svg>
  `,
    "play-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
      <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path>
    </svg>
  `,
    "pause-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
      <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"></path>
    </svg>
  `,
    "star-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
    </svg>
  `,
    x: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
      <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
    "x-circle-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path>
    </svg>
  `
};
var systemLibrary = {
    name: "system",
    resolver: (name)=>{
        if (icons[name]) return `data:image/svg+xml,${encodeURIComponent(icons[name])}`;
        else return "";
    }
};
var library_system_default = systemLibrary;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vHmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestIcon", ()=>requestIcon
);
// src/components/icon/request.ts
var iconFiles = /* @__PURE__ */ new Map();
var requestIcon = (url)=>{
    if (iconFiles.has(url)) return iconFiles.get(url);
    else {
        const request = fetch(url).then(async (response)=>{
            if (response.ok) {
                const div = document.createElement("div");
                div.innerHTML = await response.text();
                const svg = div.firstElementChild;
                return {
                    ok: response.ok,
                    status: response.status,
                    svg: svg && svg.tagName.toLowerCase() === "svg" ? svg.outerHTML : ""
                };
            } else return {
                ok: response.ok,
                status: response.status,
                svg: null
            };
        });
        iconFiles.set(url, request);
        return request;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69rgo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "icon_styles_default", ()=>icon_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/icon/icon.styles.ts
var icon_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
    width: 1em;
    height: 1em;
    contain: strict;
    box-sizing: content-box !important;
  }

  .icon,
  svg {
    display: block;
    height: 100%;
    width: 100%;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOn8b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlRelativeTime", ()=>SlRelativeTime
);
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/relative-time/relative-time.ts
var SlRelativeTime = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.isoTime = "";
        this.relativeTime = "";
        this.titleTime = "";
        this.format = "long";
        this.numeric = "auto";
        this.sync = false;
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        clearTimeout(this.updateTimeout);
    }
    render() {
        const now = new Date();
        const then = new Date(this.date);
        if (isNaN(then.getMilliseconds())) {
            this.relativeTime = "";
            this.isoTime = "";
            return "";
        }
        const diff = +then - +now;
        const availableUnits = [
            {
                max: 2760000,
                value: 60000,
                unit: "minute"
            },
            {
                max: 72000000,
                value: 3600000,
                unit: "hour"
            },
            {
                max: 518400000,
                value: 86400000,
                unit: "day"
            },
            {
                max: 2419200000,
                value: 604800000,
                unit: "week"
            },
            {
                max: 28512000000,
                value: 2592000000,
                unit: "month"
            },
            {
                max: Infinity,
                value: 31536000000,
                unit: "year"
            }
        ];
        const { unit , value  } = availableUnits.find((unit2)=>Math.abs(diff) < unit2.max
        );
        this.isoTime = then.toISOString();
        this.titleTime = this.localize.date(then, {
            month: "long",
            year: "numeric",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            timeZoneName: "short"
        });
        this.relativeTime = this.localize.relativeTime(Math.round(diff / value), unit, {
            numeric: this.numeric,
            style: this.format
        });
        clearTimeout(this.updateTimeout);
        if (this.sync) {
            const getTimeUntilNextUnit = (unit2)=>{
                const units = {
                    second: 1000,
                    minute: 60000,
                    hour: 3600000,
                    day: 86400000
                };
                const value2 = units[unit2];
                return value2 - now.getTime() % value2;
            };
            let nextInterval;
            if (unit === "minute") nextInterval = getTimeUntilNextUnit("second");
            else if (unit === "hour") nextInterval = getTimeUntilNextUnit("minute");
            else if (unit === "day") nextInterval = getTimeUntilNextUnit("hour");
            else nextInterval = getTimeUntilNextUnit("day");
            this.updateTimeout = setTimeout(()=>this.requestUpdate()
            , nextInterval);
        }
        return _chunk2VBMOEKGJs.$` <time datetime=${this.isoTime} title=${this.titleTime}>${this.relativeTime}</time> `;
    }
};
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRelativeTime.prototype, "isoTime", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRelativeTime.prototype, "relativeTime", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRelativeTime.prototype, "titleTime", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRelativeTime.prototype, "date", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRelativeTime.prototype, "lang", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRelativeTime.prototype, "format", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRelativeTime.prototype, "numeric", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlRelativeTime.prototype, "sync", 2);
SlRelativeTime = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-relative-time")
], SlRelativeTime);

},{"./chunk.CCTU25PV.js":"dUPzH","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rUuA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlResizeObserver", ()=>SlResizeObserver
);
var _chunkLAHGKIFCJs = require("./chunk.LAHGKIFC.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/resize-observer/resize-observer.ts
var SlResizeObserver = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.observedElements = [];
        this.disabled = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.resizeObserver = new ResizeObserver((entries)=>{
            _chunkI4TE3TJVJs.emit(this, "sl-resize", {
                detail: {
                    entries
                }
            });
        });
        if (!this.disabled) this.startObserver();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.stopObserver();
    }
    handleSlotChange() {
        if (!this.disabled) this.startObserver();
    }
    startObserver() {
        const slot = this.shadowRoot.querySelector("slot");
        if (slot) {
            const elements = slot.assignedElements({
                flatten: true
            });
            this.observedElements.map((el)=>this.resizeObserver.unobserve(el)
            );
            this.observedElements = [];
            elements.map((el)=>{
                this.resizeObserver.observe(el);
                this.observedElements.push(el);
            });
        }
    }
    stopObserver() {
        this.resizeObserver.disconnect();
    }
    handleDisabledChange() {
        if (this.disabled) this.stopObserver();
        else this.startObserver();
    }
    render() {
        return _chunk2VBMOEKGJs.$` <slot @slotchange=${this.handleSlotChange}></slot> `;
    }
};
SlResizeObserver.styles = _chunkLAHGKIFCJs.resize_observer_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlResizeObserver.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled", {
        waitUntilFirstUpdate: true
    })
], SlResizeObserver.prototype, "handleDisabledChange", 1);
SlResizeObserver = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-resize-observer")
], SlResizeObserver);

},{"./chunk.LAHGKIFC.js":"8HF2a","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8HF2a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resize_observer_styles_default", ()=>resize_observer_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/resize-observer/resize-observer.styles.ts
var resize_observer_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: contents;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"es6HX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlProgressRing", ()=>SlProgressRing
);
var _chunkYPEVBWRRJs = require("./chunk.YPEVBWRR.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/progress-ring/progress-ring.ts
var SlProgressRing = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.value = 0;
    }
    updated(changedProps) {
        super.updated(changedProps);
        if (changedProps.has("percentage")) {
            const radius = parseFloat(getComputedStyle(this.indicator).getPropertyValue("r"));
            const circumference = 2 * Math.PI * radius;
            const offset = circumference - this.value / 100 * circumference;
            this.indicatorOffset = String(offset) + "px";
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class="progress-ring"
        role="progressbar"
        aria-label=${this.label || this.localize.term("progress")}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow="${this.value}"
        style="--percentage: ${this.value / 100}"
      >
        <svg class="progress-ring__image">
          <circle class="progress-ring__track"></circle>
          <circle class="progress-ring__indicator" style="stroke-dashoffset: ${this.indicatorOffset}"></circle>
        </svg>

        <span part="label" class="progress-ring__label">
          <slot></slot>
        </span>
      </div>
    `;
    }
};
SlProgressRing.styles = _chunkYPEVBWRRJs.progress_ring_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".progress-ring__indicator")
], SlProgressRing.prototype, "indicator", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlProgressRing.prototype, "indicatorOffset", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number,
        reflect: true
    })
], SlProgressRing.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlProgressRing.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlProgressRing.prototype, "lang", 2);
SlProgressRing = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-progress-ring")
], SlProgressRing);

},{"./chunk.YPEVBWRR.js":"5FDDv","./chunk.CCTU25PV.js":"dUPzH","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FDDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "progress_ring_styles_default", ()=>progress_ring_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/progress-ring/progress-ring.styles.ts
var progress_ring_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --size: 128px;
    --track-width: 4px;
    --track-color: var(--sl-color-neutral-200);
    --indicator-color: var(--sl-color-primary-600);

    display: inline-flex;
  }

  .progress-ring {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .progress-ring__image {
    width: var(--size);
    height: var(--size);
    transform: rotate(-90deg);
    transform-origin: 50% 50%;
  }

  .progress-ring__track,
  .progress-ring__indicator {
    --radius: calc(var(--size) / 2 - var(--track-width) * 2);
    --circumference: calc(var(--radius) * 2 * 3.141592654);

    fill: none;
    stroke-width: var(--track-width);
    r: var(--radius);
    cx: calc(var(--size) / 2);
    cy: calc(var(--size) / 2);
  }

  .progress-ring__track {
    stroke: var(--track-color);
  }

  .progress-ring__indicator {
    stroke: var(--indicator-color);
    stroke-linecap: round;
    transition: 0.35s stroke-dashoffset;
    stroke-dasharray: var(--circumference) var(--circumference);
    stroke-dashoffset: calc(var(--circumference) - var(--percentage) * var(--circumference));
  }

  .progress-ring__label {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    text-align: center;
    user-select: none;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etRwm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlQrCode", ()=>SlQrCode
);
var _chunkTVINGWXDJs = require("./chunk.TVINGWXD.js");
var _chunkDIYFVAUNJs = require("./chunk.DIYFVAUN.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/qr-creator/dist/qr-creator.es6.min.js
var G = null;
var H = class {
};
H.render = function(w, B) {
    G(w, B);
};
self.QrCreator = H;
(function(w) {
    function B(t, c, a, e2) {
        var b = {
        }, h = w(a, c);
        h.u(t);
        h.J();
        e2 = e2 || 0;
        var r = h.h(), d = h.h() + 2 * e2;
        b.text = t;
        b.level = c;
        b.version = a;
        b.O = d;
        b.a = function(b2, a2) {
            b2 -= e2;
            a2 -= e2;
            return 0 > b2 || b2 >= r || 0 > a2 || a2 >= r ? false : h.a(b2, a2);
        };
        return b;
    }
    function C(t, c, a, e2, b, h, r, d, g, x) {
        function u(b2, a2, f, c2, d2, r2, g2) {
            b2 ? (t.lineTo(a2 + r2, f + g2), t.arcTo(a2, f, c2, d2, h)) : t.lineTo(a2, f);
        }
        r ? t.moveTo(c + h, a) : t.moveTo(c, a);
        u(d, e2, a, e2, b, -h, 0);
        u(g, e2, b, c, b, 0, -h);
        u(x, c, b, c, a, h, 0);
        u(r, c, a, e2, a, 0, h);
    }
    function z(t, c, a, e2, b, h, r, d, g, x) {
        function u(b2, a2, c2, d2) {
            t.moveTo(b2 + c2, a2);
            t.lineTo(b2, a2);
            t.lineTo(b2, a2 + d2);
            t.arcTo(b2, a2, b2 + c2, a2, h);
        }
        r && u(c, a, h, h);
        d && u(e2, a, -h, h);
        g && u(e2, b, -h, -h);
        x && u(c, b, h, -h);
    }
    function A(t, c) {
        var a = c.fill;
        if (typeof a === "string") t.fillStyle = a;
        else {
            var e2 = a.type, b = a.colorStops;
            a = a.position.map((b2)=>Math.round(b2 * c.size)
            );
            if (e2 === "linear-gradient") var h = t.createLinearGradient.apply(t, a);
            else if (e2 === "radial-gradient") h = t.createRadialGradient.apply(t, a);
            else throw Error("Unsupported fill");
            b.forEach(([b2, a2])=>{
                h.addColorStop(b2, a2);
            });
            t.fillStyle = h;
        }
    }
    function y(t, c) {
        a: {
            var a = c.text, e2 = c.v, b = c.N, h = c.K, r = c.P;
            b = Math.max(1, b || 1);
            for(h = Math.min(40, h || 40); b <= h; b += 1)try {
                var d = B(a, e2, b, r);
                break a;
            } catch (J) {
            }
            d = void 0;
        }
        if (!d) return null;
        a = t.getContext("2d");
        c.background && (a.fillStyle = c.background, a.fillRect(c.left, c.top, c.size, c.size));
        e2 = d.O;
        h = c.size / e2;
        a.beginPath();
        for(r = 0; r < e2; r += 1)for(b = 0; b < e2; b += 1){
            var g = a, x = c.left + b * h, u = c.top + r * h, p = r, q = b, f = d.a, k = x + h, m = u + h, D = p - 1, E = p + 1, n2 = q - 1, l = q + 1, y2 = Math.floor(Math.min(0.5, Math.max(0, c.R)) * h), v2 = f(p, q), I = f(D, n2), w2 = f(D, q);
            D = f(D, l);
            var F = f(p, l);
            l = f(E, l);
            q = f(E, q);
            E = f(E, n2);
            p = f(p, n2);
            x = Math.round(x);
            u = Math.round(u);
            k = Math.round(k);
            m = Math.round(m);
            v2 ? C(g, x, u, k, m, y2, !w2 && !p, !w2 && !F, !q && !F, !q && !p) : z(g, x, u, k, m, y2, w2 && p && I, w2 && F && D, q && F && l, q && p && E);
        }
        A(a, c);
        a.fill();
        return t;
    }
    var v = {
        minVersion: 1,
        maxVersion: 40,
        ecLevel: "L",
        left: 0,
        top: 0,
        size: 200,
        fill: "#000",
        background: null,
        text: "no text",
        radius: 0.5,
        quiet: 0
    };
    G = function(t, c) {
        var a = {
        };
        Object.assign(a, v, t);
        a.N = a.minVersion;
        a.K = a.maxVersion;
        a.v = a.ecLevel;
        a.left = a.left;
        a.top = a.top;
        a.size = a.size;
        a.fill = a.fill;
        a.background = a.background;
        a.text = a.text;
        a.R = a.radius;
        a.P = a.quiet;
        if (c instanceof HTMLCanvasElement) {
            if (c.width !== a.size || c.height !== a.size) c.width = a.size, c.height = a.size;
            c.getContext("2d").clearRect(0, 0, c.width, c.height);
            y(c, a);
        } else t = document.createElement("canvas"), t.width = a.size, t.height = a.size, a = y(t, a), c.appendChild(a);
    };
})(function() {
    function w(c) {
        var a = C.s(c);
        return {
            S: function() {
                return 4;
            },
            b: function() {
                return a.length;
            },
            write: function(c2) {
                for(var b = 0; b < a.length; b += 1)c2.put(a[b], 8);
            }
        };
    }
    function B() {
        var c = [], a = 0, e2 = {
            B: function() {
                return c;
            },
            c: function(b) {
                return (c[Math.floor(b / 8)] >>> 7 - b % 8 & 1) == 1;
            },
            put: function(b, h) {
                for(var a2 = 0; a2 < h; a2 += 1)e2.m((b >>> h - a2 - 1 & 1) == 1);
            },
            f: function() {
                return a;
            },
            m: function(b) {
                var h = Math.floor(a / 8);
                c.length <= h && c.push(0);
                b && (c[h] |= 128 >>> a % 8);
                a += 1;
            }
        };
        return e2;
    }
    function C(c, a) {
        function e2(b2, h2) {
            for(var a2 = -1; 7 >= a2; a2 += 1)if (!(-1 >= b2 + a2 || d <= b2 + a2)) for(var c2 = -1; 7 >= c2; c2 += 1)-1 >= h2 + c2 || d <= h2 + c2 || (r[b2 + a2][h2 + c2] = 0 <= a2 && 6 >= a2 && (c2 == 0 || c2 == 6) || 0 <= c2 && 6 >= c2 && (a2 == 0 || a2 == 6) || 2 <= a2 && 4 >= a2 && 2 <= c2 && 4 >= c2 ? true : false);
        }
        function b(b2, a2) {
            for(var f = d = 4 * c + 17, k = Array(f), m = 0; m < f; m += 1){
                k[m] = Array(f);
                for(var p = 0; p < f; p += 1)k[m][p] = null;
            }
            r = k;
            e2(0, 0);
            e2(d - 7, 0);
            e2(0, d - 7);
            f = y.G(c);
            for(k = 0; k < f.length; k += 1)for(m = 0; m < f.length; m += 1){
                p = f[k];
                var q = f[m];
                if (r[p][q] == null) for(var n2 = -2; 2 >= n2; n2 += 1)for(var l = -2; 2 >= l; l += 1)r[p + n2][q + l] = n2 == -2 || n2 == 2 || l == -2 || l == 2 || n2 == 0 && l == 0;
            }
            for(f = 8; f < d - 8; f += 1)r[f][6] == null && (r[f][6] = f % 2 == 0);
            for(f = 8; f < d - 8; f += 1)r[6][f] == null && (r[6][f] = f % 2 == 0);
            f = y.w(h << 3 | a2);
            for(k = 0; 15 > k; k += 1)m = !b2 && (f >> k & 1) == 1, r[6 > k ? k : 8 > k ? k + 1 : d - 15 + k][8] = m, r[8][8 > k ? d - k - 1 : 9 > k ? 15 - k : 14 - k] = m;
            r[d - 8][8] = !b2;
            if (7 <= c) {
                f = y.A(c);
                for(k = 0; 18 > k; k += 1)m = !b2 && (f >> k & 1) == 1, r[Math.floor(k / 3)][k % 3 + d - 8 - 3] = m;
                for(k = 0; 18 > k; k += 1)m = !b2 && (f >> k & 1) == 1, r[k % 3 + d - 8 - 3][Math.floor(k / 3)] = m;
            }
            if (g == null) {
                b2 = t.I(c, h);
                f = B();
                for(k = 0; k < x.length; k += 1)m = x[k], f.put(4, 4), f.put(m.b(), y.f(4, c)), m.write(f);
                for(k = m = 0; k < b2.length; k += 1)m += b2[k].j;
                if (f.f() > 8 * m) throw Error("code length overflow. (" + f.f() + ">" + 8 * m + ")");
                for(f.f() + 4 <= 8 * m && f.put(0, 4); f.f() % 8 != 0;)f.m(false);
                for(; !(f.f() >= 8 * m);){
                    f.put(236, 8);
                    if (f.f() >= 8 * m) break;
                    f.put(17, 8);
                }
                var u2 = 0;
                m = k = 0;
                p = Array(b2.length);
                q = Array(b2.length);
                for(n2 = 0; n2 < b2.length; n2 += 1){
                    var v2 = b2[n2].j, w2 = b2[n2].o - v2;
                    k = Math.max(k, v2);
                    m = Math.max(m, w2);
                    p[n2] = Array(v2);
                    for(l = 0; l < p[n2].length; l += 1)p[n2][l] = 255 & f.B()[l + u2];
                    u2 += v2;
                    l = y.C(w2);
                    v2 = z(p[n2], l.b() - 1).l(l);
                    q[n2] = Array(l.b() - 1);
                    for(l = 0; l < q[n2].length; l += 1)w2 = l + v2.b() - q[n2].length, q[n2][l] = 0 <= w2 ? v2.c(w2) : 0;
                }
                for(l = f = 0; l < b2.length; l += 1)f += b2[l].o;
                f = Array(f);
                for(l = u2 = 0; l < k; l += 1)for(n2 = 0; n2 < b2.length; n2 += 1)l < p[n2].length && (f[u2] = p[n2][l], u2 += 1);
                for(l = 0; l < m; l += 1)for(n2 = 0; n2 < b2.length; n2 += 1)l < q[n2].length && (f[u2] = q[n2][l], u2 += 1);
                g = f;
            }
            b2 = g;
            f = -1;
            k = d - 1;
            m = 7;
            p = 0;
            a2 = y.F(a2);
            for(q = d - 1; 0 < q; q -= 2)for(q == 6 && --q;;){
                for(n2 = 0; 2 > n2; n2 += 1)r[k][q - n2] == null && (l = false, p < b2.length && (l = (b2[p] >>> m & 1) == 1), a2(k, q - n2) && (l = !l), r[k][q - n2] = l, --m, m == -1 && (p += 1, m = 7));
                k += f;
                if (0 > k || d <= k) {
                    k -= f;
                    f = -f;
                    break;
                }
            }
        }
        var h = A[a], r = null, d = 0, g = null, x = [], u = {
            u: function(b2) {
                b2 = w(b2);
                x.push(b2);
                g = null;
            },
            a: function(b2, a2) {
                if (0 > b2 || d <= b2 || 0 > a2 || d <= a2) throw Error(b2 + "," + a2);
                return r[b2][a2];
            },
            h: function() {
                return d;
            },
            J: function() {
                for(var a2 = 0, h2 = 0, c2 = 0; 8 > c2; c2 += 1){
                    b(true, c2);
                    var d2 = y.D(u);
                    if (c2 == 0 || a2 > d2) a2 = d2, h2 = c2;
                }
                b(false, h2);
            }
        };
        return u;
    }
    function z(c, a) {
        if (typeof c.length == "undefined") throw Error(c.length + "/" + a);
        var e2 = function() {
            for(var b2 = 0; b2 < c.length && c[b2] == 0;)b2 += 1;
            for(var r = Array(c.length - b2 + a), d = 0; d < c.length - b2; d += 1)r[d] = c[d + b2];
            return r;
        }(), b = {
            c: function(b2) {
                return e2[b2];
            },
            b: function() {
                return e2.length;
            },
            multiply: function(a2) {
                for(var h = Array(b.b() + a2.b() - 1), c2 = 0; c2 < b.b(); c2 += 1)for(var g = 0; g < a2.b(); g += 1)h[c2 + g] ^= v.i(v.g(b.c(c2)) + v.g(a2.c(g)));
                return z(h, 0);
            },
            l: function(a2) {
                if (0 > b.b() - a2.b()) return b;
                for(var c2 = v.g(b.c(0)) - v.g(a2.c(0)), h = Array(b.b()), g = 0; g < b.b(); g += 1)h[g] = b.c(g);
                for(g = 0; g < a2.b(); g += 1)h[g] ^= v.i(v.g(a2.c(g)) + c2);
                return z(h, 0).l(a2);
            }
        };
        return b;
    }
    C.s = function(c) {
        for(var a = [], e2 = 0; e2 < c.length; e2++){
            var b = c.charCodeAt(e2);
            128 > b ? a.push(b) : 2048 > b ? a.push(192 | b >> 6, 128 | b & 63) : 55296 > b || 57344 <= b ? a.push(224 | b >> 12, 128 | b >> 6 & 63, 128 | b & 63) : (e2++, b = 65536 + ((b & 1023) << 10 | c.charCodeAt(e2) & 1023), a.push(240 | b >> 18, 128 | b >> 12 & 63, 128 | b >> 6 & 63, 128 | b & 63));
        }
        return a;
    };
    var A = {
        L: 1,
        M: 0,
        Q: 3,
        H: 2
    }, y = function() {
        function c(b) {
            for(var a2 = 0; b != 0;)a2 += 1, b >>>= 1;
            return a2;
        }
        var a = [
            [],
            [
                6,
                18
            ],
            [
                6,
                22
            ],
            [
                6,
                26
            ],
            [
                6,
                30
            ],
            [
                6,
                34
            ],
            [
                6,
                22,
                38
            ],
            [
                6,
                24,
                42
            ],
            [
                6,
                26,
                46
            ],
            [
                6,
                28,
                50
            ],
            [
                6,
                30,
                54
            ],
            [
                6,
                32,
                58
            ],
            [
                6,
                34,
                62
            ],
            [
                6,
                26,
                46,
                66
            ],
            [
                6,
                26,
                48,
                70
            ],
            [
                6,
                26,
                50,
                74
            ],
            [
                6,
                30,
                54,
                78
            ],
            [
                6,
                30,
                56,
                82
            ],
            [
                6,
                30,
                58,
                86
            ],
            [
                6,
                34,
                62,
                90
            ],
            [
                6,
                28,
                50,
                72,
                94
            ],
            [
                6,
                26,
                50,
                74,
                98
            ],
            [
                6,
                30,
                54,
                78,
                102
            ],
            [
                6,
                28,
                54,
                80,
                106
            ],
            [
                6,
                32,
                58,
                84,
                110
            ],
            [
                6,
                30,
                58,
                86,
                114
            ],
            [
                6,
                34,
                62,
                90,
                118
            ],
            [
                6,
                26,
                50,
                74,
                98,
                122
            ],
            [
                6,
                30,
                54,
                78,
                102,
                126
            ],
            [
                6,
                26,
                52,
                78,
                104,
                130
            ],
            [
                6,
                30,
                56,
                82,
                108,
                134
            ],
            [
                6,
                34,
                60,
                86,
                112,
                138
            ],
            [
                6,
                30,
                58,
                86,
                114,
                142
            ],
            [
                6,
                34,
                62,
                90,
                118,
                146
            ],
            [
                6,
                30,
                54,
                78,
                102,
                126,
                150
            ],
            [
                6,
                24,
                50,
                76,
                102,
                128,
                154
            ],
            [
                6,
                28,
                54,
                80,
                106,
                132,
                158
            ],
            [
                6,
                32,
                58,
                84,
                110,
                136,
                162
            ],
            [
                6,
                26,
                54,
                82,
                110,
                138,
                166
            ],
            [
                6,
                30,
                58,
                86,
                114,
                142,
                170
            ]
        ], e2 = {
            w: function(b) {
                for(var a2 = b << 10; 0 <= c(a2) - c(1335);)a2 ^= 1335 << c(a2) - c(1335);
                return (b << 10 | a2) ^ 21522;
            },
            A: function(b) {
                for(var a2 = b << 12; 0 <= c(a2) - c(7973);)a2 ^= 7973 << c(a2) - c(7973);
                return b << 12 | a2;
            },
            G: function(b) {
                return a[b - 1];
            },
            F: function(b) {
                switch(b){
                    case 0:
                        return function(b2, a2) {
                            return (b2 + a2) % 2 == 0;
                        };
                    case 1:
                        return function(b2) {
                            return b2 % 2 == 0;
                        };
                    case 2:
                        return function(b2, a2) {
                            return a2 % 3 == 0;
                        };
                    case 3:
                        return function(b2, a2) {
                            return (b2 + a2) % 3 == 0;
                        };
                    case 4:
                        return function(b2, a2) {
                            return (Math.floor(b2 / 2) + Math.floor(a2 / 3)) % 2 == 0;
                        };
                    case 5:
                        return function(b2, a2) {
                            return b2 * a2 % 2 + b2 * a2 % 3 == 0;
                        };
                    case 6:
                        return function(b2, a2) {
                            return (b2 * a2 % 2 + b2 * a2 % 3) % 2 == 0;
                        };
                    case 7:
                        return function(b2, a2) {
                            return (b2 * a2 % 3 + (b2 + a2) % 2) % 2 == 0;
                        };
                    default:
                        throw Error("bad maskPattern:" + b);
                }
            },
            C: function(b) {
                for(var a2 = z([
                    1
                ], 0), c2 = 0; c2 < b; c2 += 1)a2 = a2.multiply(z([
                    1,
                    v.i(c2)
                ], 0));
                return a2;
            },
            f: function(b, a2) {
                if (b != 4 || 1 > a2 || 40 < a2) throw Error("mode: " + b + "; type: " + a2);
                return 10 > a2 ? 8 : 16;
            },
            D: function(b) {
                for(var a2 = b.h(), c2 = 0, d = 0; d < a2; d += 1)for(var g = 0; g < a2; g += 1){
                    for(var e3 = 0, t2 = b.a(d, g), p = -1; 1 >= p; p += 1)if (!(0 > d + p || a2 <= d + p)) for(var q = -1; 1 >= q; q += 1)0 > g + q || a2 <= g + q || (p != 0 || q != 0) && t2 == b.a(d + p, g + q) && (e3 += 1);
                    5 < e3 && (c2 += 3 + e3 - 5);
                }
                for(d = 0; d < a2 - 1; d += 1)for(g = 0; g < a2 - 1; g += 1)if (e3 = 0, b.a(d, g) && (e3 += 1), b.a(d + 1, g) && (e3 += 1), b.a(d, g + 1) && (e3 += 1), b.a(d + 1, g + 1) && (e3 += 1), e3 == 0 || e3 == 4) c2 += 3;
                for(d = 0; d < a2; d += 1)for(g = 0; g < a2 - 6; g += 1)b.a(d, g) && !b.a(d, g + 1) && b.a(d, g + 2) && b.a(d, g + 3) && b.a(d, g + 4) && !b.a(d, g + 5) && b.a(d, g + 6) && (c2 += 40);
                for(g = 0; g < a2; g += 1)for(d = 0; d < a2 - 6; d += 1)b.a(d, g) && !b.a(d + 1, g) && b.a(d + 2, g) && b.a(d + 3, g) && b.a(d + 4, g) && !b.a(d + 5, g) && b.a(d + 6, g) && (c2 += 40);
                for(g = e3 = 0; g < a2; g += 1)for(d = 0; d < a2; d += 1)b.a(d, g) && (e3 += 1);
                return c2 += Math.abs(100 * e3 / a2 / a2 - 50) / 5 * 10;
            }
        };
        return e2;
    }(), v = function() {
        for(var c = Array(256), a = Array(256), e2 = 0; 8 > e2; e2 += 1)c[e2] = 1 << e2;
        for(e2 = 8; 256 > e2; e2 += 1)c[e2] = c[e2 - 4] ^ c[e2 - 5] ^ c[e2 - 6] ^ c[e2 - 8];
        for(e2 = 0; 255 > e2; e2 += 1)a[c[e2]] = e2;
        return {
            g: function(b) {
                if (1 > b) throw Error("glog(" + b + ")");
                return a[b];
            },
            i: function(b) {
                for(; 0 > b;)b += 255;
                for(; 256 <= b;)b -= 255;
                return c[b];
            }
        };
    }(), t = function() {
        function c(b, c2) {
            switch(c2){
                case A.L:
                    return a[4 * (b - 1)];
                case A.M:
                    return a[4 * (b - 1) + 1];
                case A.Q:
                    return a[4 * (b - 1) + 2];
                case A.H:
                    return a[4 * (b - 1) + 3];
            }
        }
        var a = [
            [
                1,
                26,
                19
            ],
            [
                1,
                26,
                16
            ],
            [
                1,
                26,
                13
            ],
            [
                1,
                26,
                9
            ],
            [
                1,
                44,
                34
            ],
            [
                1,
                44,
                28
            ],
            [
                1,
                44,
                22
            ],
            [
                1,
                44,
                16
            ],
            [
                1,
                70,
                55
            ],
            [
                1,
                70,
                44
            ],
            [
                2,
                35,
                17
            ],
            [
                2,
                35,
                13
            ],
            [
                1,
                100,
                80
            ],
            [
                2,
                50,
                32
            ],
            [
                2,
                50,
                24
            ],
            [
                4,
                25,
                9
            ],
            [
                1,
                134,
                108
            ],
            [
                2,
                67,
                43
            ],
            [
                2,
                33,
                15,
                2,
                34,
                16
            ],
            [
                2,
                33,
                11,
                2,
                34,
                12
            ],
            [
                2,
                86,
                68
            ],
            [
                4,
                43,
                27
            ],
            [
                4,
                43,
                19
            ],
            [
                4,
                43,
                15
            ],
            [
                2,
                98,
                78
            ],
            [
                4,
                49,
                31
            ],
            [
                2,
                32,
                14,
                4,
                33,
                15
            ],
            [
                4,
                39,
                13,
                1,
                40,
                14
            ],
            [
                2,
                121,
                97
            ],
            [
                2,
                60,
                38,
                2,
                61,
                39
            ],
            [
                4,
                40,
                18,
                2,
                41,
                19
            ],
            [
                4,
                40,
                14,
                2,
                41,
                15
            ],
            [
                2,
                146,
                116
            ],
            [
                3,
                58,
                36,
                2,
                59,
                37
            ],
            [
                4,
                36,
                16,
                4,
                37,
                17
            ],
            [
                4,
                36,
                12,
                4,
                37,
                13
            ],
            [
                2,
                86,
                68,
                2,
                87,
                69
            ],
            [
                4,
                69,
                43,
                1,
                70,
                44
            ],
            [
                6,
                43,
                19,
                2,
                44,
                20
            ],
            [
                6,
                43,
                15,
                2,
                44,
                16
            ],
            [
                4,
                101,
                81
            ],
            [
                1,
                80,
                50,
                4,
                81,
                51
            ],
            [
                4,
                50,
                22,
                4,
                51,
                23
            ],
            [
                3,
                36,
                12,
                8,
                37,
                13
            ],
            [
                2,
                116,
                92,
                2,
                117,
                93
            ],
            [
                6,
                58,
                36,
                2,
                59,
                37
            ],
            [
                4,
                46,
                20,
                6,
                47,
                21
            ],
            [
                7,
                42,
                14,
                4,
                43,
                15
            ],
            [
                4,
                133,
                107
            ],
            [
                8,
                59,
                37,
                1,
                60,
                38
            ],
            [
                8,
                44,
                20,
                4,
                45,
                21
            ],
            [
                12,
                33,
                11,
                4,
                34,
                12
            ],
            [
                3,
                145,
                115,
                1,
                146,
                116
            ],
            [
                4,
                64,
                40,
                5,
                65,
                41
            ],
            [
                11,
                36,
                16,
                5,
                37,
                17
            ],
            [
                11,
                36,
                12,
                5,
                37,
                13
            ],
            [
                5,
                109,
                87,
                1,
                110,
                88
            ],
            [
                5,
                65,
                41,
                5,
                66,
                42
            ],
            [
                5,
                54,
                24,
                7,
                55,
                25
            ],
            [
                11,
                36,
                12,
                7,
                37,
                13
            ],
            [
                5,
                122,
                98,
                1,
                123,
                99
            ],
            [
                7,
                73,
                45,
                3,
                74,
                46
            ],
            [
                15,
                43,
                19,
                2,
                44,
                20
            ],
            [
                3,
                45,
                15,
                13,
                46,
                16
            ],
            [
                1,
                135,
                107,
                5,
                136,
                108
            ],
            [
                10,
                74,
                46,
                1,
                75,
                47
            ],
            [
                1,
                50,
                22,
                15,
                51,
                23
            ],
            [
                2,
                42,
                14,
                17,
                43,
                15
            ],
            [
                5,
                150,
                120,
                1,
                151,
                121
            ],
            [
                9,
                69,
                43,
                4,
                70,
                44
            ],
            [
                17,
                50,
                22,
                1,
                51,
                23
            ],
            [
                2,
                42,
                14,
                19,
                43,
                15
            ],
            [
                3,
                141,
                113,
                4,
                142,
                114
            ],
            [
                3,
                70,
                44,
                11,
                71,
                45
            ],
            [
                17,
                47,
                21,
                4,
                48,
                22
            ],
            [
                9,
                39,
                13,
                16,
                40,
                14
            ],
            [
                3,
                135,
                107,
                5,
                136,
                108
            ],
            [
                3,
                67,
                41,
                13,
                68,
                42
            ],
            [
                15,
                54,
                24,
                5,
                55,
                25
            ],
            [
                15,
                43,
                15,
                10,
                44,
                16
            ],
            [
                4,
                144,
                116,
                4,
                145,
                117
            ],
            [
                17,
                68,
                42
            ],
            [
                17,
                50,
                22,
                6,
                51,
                23
            ],
            [
                19,
                46,
                16,
                6,
                47,
                17
            ],
            [
                2,
                139,
                111,
                7,
                140,
                112
            ],
            [
                17,
                74,
                46
            ],
            [
                7,
                54,
                24,
                16,
                55,
                25
            ],
            [
                34,
                37,
                13
            ],
            [
                4,
                151,
                121,
                5,
                152,
                122
            ],
            [
                4,
                75,
                47,
                14,
                76,
                48
            ],
            [
                11,
                54,
                24,
                14,
                55,
                25
            ],
            [
                16,
                45,
                15,
                14,
                46,
                16
            ],
            [
                6,
                147,
                117,
                4,
                148,
                118
            ],
            [
                6,
                73,
                45,
                14,
                74,
                46
            ],
            [
                11,
                54,
                24,
                16,
                55,
                25
            ],
            [
                30,
                46,
                16,
                2,
                47,
                17
            ],
            [
                8,
                132,
                106,
                4,
                133,
                107
            ],
            [
                8,
                75,
                47,
                13,
                76,
                48
            ],
            [
                7,
                54,
                24,
                22,
                55,
                25
            ],
            [
                22,
                45,
                15,
                13,
                46,
                16
            ],
            [
                10,
                142,
                114,
                2,
                143,
                115
            ],
            [
                19,
                74,
                46,
                4,
                75,
                47
            ],
            [
                28,
                50,
                22,
                6,
                51,
                23
            ],
            [
                33,
                46,
                16,
                4,
                47,
                17
            ],
            [
                8,
                152,
                122,
                4,
                153,
                123
            ],
            [
                22,
                73,
                45,
                3,
                74,
                46
            ],
            [
                8,
                53,
                23,
                26,
                54,
                24
            ],
            [
                12,
                45,
                15,
                28,
                46,
                16
            ],
            [
                3,
                147,
                117,
                10,
                148,
                118
            ],
            [
                3,
                73,
                45,
                23,
                74,
                46
            ],
            [
                4,
                54,
                24,
                31,
                55,
                25
            ],
            [
                11,
                45,
                15,
                31,
                46,
                16
            ],
            [
                7,
                146,
                116,
                7,
                147,
                117
            ],
            [
                21,
                73,
                45,
                7,
                74,
                46
            ],
            [
                1,
                53,
                23,
                37,
                54,
                24
            ],
            [
                19,
                45,
                15,
                26,
                46,
                16
            ],
            [
                5,
                145,
                115,
                10,
                146,
                116
            ],
            [
                19,
                75,
                47,
                10,
                76,
                48
            ],
            [
                15,
                54,
                24,
                25,
                55,
                25
            ],
            [
                23,
                45,
                15,
                25,
                46,
                16
            ],
            [
                13,
                145,
                115,
                3,
                146,
                116
            ],
            [
                2,
                74,
                46,
                29,
                75,
                47
            ],
            [
                42,
                54,
                24,
                1,
                55,
                25
            ],
            [
                23,
                45,
                15,
                28,
                46,
                16
            ],
            [
                17,
                145,
                115
            ],
            [
                10,
                74,
                46,
                23,
                75,
                47
            ],
            [
                10,
                54,
                24,
                35,
                55,
                25
            ],
            [
                19,
                45,
                15,
                35,
                46,
                16
            ],
            [
                17,
                145,
                115,
                1,
                146,
                116
            ],
            [
                14,
                74,
                46,
                21,
                75,
                47
            ],
            [
                29,
                54,
                24,
                19,
                55,
                25
            ],
            [
                11,
                45,
                15,
                46,
                46,
                16
            ],
            [
                13,
                145,
                115,
                6,
                146,
                116
            ],
            [
                14,
                74,
                46,
                23,
                75,
                47
            ],
            [
                44,
                54,
                24,
                7,
                55,
                25
            ],
            [
                59,
                46,
                16,
                1,
                47,
                17
            ],
            [
                12,
                151,
                121,
                7,
                152,
                122
            ],
            [
                12,
                75,
                47,
                26,
                76,
                48
            ],
            [
                39,
                54,
                24,
                14,
                55,
                25
            ],
            [
                22,
                45,
                15,
                41,
                46,
                16
            ],
            [
                6,
                151,
                121,
                14,
                152,
                122
            ],
            [
                6,
                75,
                47,
                34,
                76,
                48
            ],
            [
                46,
                54,
                24,
                10,
                55,
                25
            ],
            [
                2,
                45,
                15,
                64,
                46,
                16
            ],
            [
                17,
                152,
                122,
                4,
                153,
                123
            ],
            [
                29,
                74,
                46,
                14,
                75,
                47
            ],
            [
                49,
                54,
                24,
                10,
                55,
                25
            ],
            [
                24,
                45,
                15,
                46,
                46,
                16
            ],
            [
                4,
                152,
                122,
                18,
                153,
                123
            ],
            [
                13,
                74,
                46,
                32,
                75,
                47
            ],
            [
                48,
                54,
                24,
                14,
                55,
                25
            ],
            [
                42,
                45,
                15,
                32,
                46,
                16
            ],
            [
                20,
                147,
                117,
                4,
                148,
                118
            ],
            [
                40,
                75,
                47,
                7,
                76,
                48
            ],
            [
                43,
                54,
                24,
                22,
                55,
                25
            ],
            [
                10,
                45,
                15,
                67,
                46,
                16
            ],
            [
                19,
                148,
                118,
                6,
                149,
                119
            ],
            [
                18,
                75,
                47,
                31,
                76,
                48
            ],
            [
                34,
                54,
                24,
                34,
                55,
                25
            ],
            [
                20,
                45,
                15,
                61,
                46,
                16
            ]
        ], e2 = {
            I: function(b, a2) {
                var e3 = c(b, a2);
                if (typeof e3 == "undefined") throw Error("bad rs block @ typeNumber:" + b + "/errorCorrectLevel:" + a2);
                b = e3.length / 3;
                a2 = [];
                for(var d = 0; d < b; d += 1)for(var g = e3[3 * d], h = e3[3 * d + 1], t2 = e3[3 * d + 2], p = 0; p < g; p += 1){
                    var q = t2, f = {
                    };
                    f.o = h;
                    f.j = q;
                    a2.push(f);
                }
                return a2;
            }
        };
        return e2;
    }();
    return C;
}());
var qr_creator_es6_min_default = QrCreator;
// src/components/qr-code/qr-code.ts
var SlQrCode = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.value = "";
        this.label = "";
        this.size = 128;
        this.fill = "#000";
        this.background = "#fff";
        this.radius = 0;
        this.errorCorrection = "H";
    }
    firstUpdated() {
        this.generate();
    }
    generate() {
        if (!this.hasUpdated) return;
        qr_creator_es6_min_default.render({
            text: this.value,
            radius: this.radius,
            ecLevel: this.errorCorrection,
            fill: this.fill,
            background: this.background === "transparent" ? null : this.background,
            size: this.size * 2
        }, this.canvas);
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        class="qr-code"
        part="base"
        style=${_chunkDIYFVAUNJs.i({
            width: `${this.size}px`,
            height: `${this.size}px`
        })}
      >
        <canvas role="img" aria-label=${this.label || this.value}></canvas>
      </div>
    `;
    }
};
SlQrCode.styles = _chunkTVINGWXDJs.qr_code_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("canvas")
], SlQrCode.prototype, "canvas", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlQrCode.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlQrCode.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlQrCode.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlQrCode.prototype, "fill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlQrCode.prototype, "background", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlQrCode.prototype, "radius", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "error-correction"
    })
], SlQrCode.prototype, "errorCorrection", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("background"),
    _chunkBD26TKS4Js.watch("errorCorrection"),
    _chunkBD26TKS4Js.watch("fill"),
    _chunkBD26TKS4Js.watch("radius"),
    _chunkBD26TKS4Js.watch("size"),
    _chunkBD26TKS4Js.watch("value")
], SlQrCode.prototype, "generate", 1);
SlQrCode = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-qr-code")
], SlQrCode);

},{"./chunk.TVINGWXD.js":"cWUYS","./chunk.DIYFVAUN.js":"gJHLQ","./chunk.BD26TKS4.js":"1j2NX","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cWUYS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "qr_code_styles_default", ()=>qr_code_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/qr-code/qr-code.styles.ts
var qr_code_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .qr-code {
    position: relative;
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4AuE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlRadio", ()=>SlRadio
);
var _chunkK6ZGLWCAJs = require("./chunk.K6ZGLWCA.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/radio/radio.ts
var SlRadio = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this, {
            value: (control)=>control.checked ? control.value : void 0
        });
        this.hasFocus = false;
        this.disabled = false;
        this.checked = false;
        this.invalid = false;
    }
    firstUpdated() {
        const radios = this.getAllRadios();
        const checkedRadio = radios.find((radio)=>radio.checked
        );
        radios.map((radio)=>{
            if (radio.input) radio.input.tabIndex = -1;
        });
        if (checkedRadio) checkedRadio.input.tabIndex = 0;
        else if (radios.length) radios[0].input.tabIndex = 0;
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    getAllRadios() {
        const radioGroup = this.closest("sl-radio-group");
        if (!radioGroup) return [
            this
        ];
        return [
            ...radioGroup.querySelectorAll("sl-radio")
        ].filter((radio)=>radio.name === this.name
        );
    }
    getSiblingRadios() {
        return this.getAllRadios().filter((radio)=>radio !== this
        );
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleCheckedChange() {
        if (this.checked) {
            this.input.tabIndex = 0;
            this.getSiblingRadios().map((radio)=>{
                radio.input.tabIndex = -1;
                radio.checked = false;
            });
        }
    }
    handleClick() {
        this.checked = true;
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleKeyDown(event) {
        if ([
            "ArrowUp",
            "ArrowDown",
            "ArrowLeft",
            "ArrowRight"
        ].includes(event.key)) {
            const radios = this.getAllRadios().filter((radio)=>!radio.disabled
            );
            const incr = [
                "ArrowUp",
                "ArrowLeft"
            ].includes(event.key) ? -1 : 1;
            let index = radios.indexOf(this) + incr;
            if (index < 0) index = radios.length - 1;
            if (index > radios.length - 1) index = 0;
            this.getAllRadios().map((radio)=>{
                radio.checked = false;
                radio.input.tabIndex = -1;
            });
            radios[index].focus();
            radios[index].checked = true;
            radios[index].input.tabIndex = 0;
            _chunkI4TE3TJVJs.emit(radios[index], "sl-change");
            event.preventDefault();
        }
    }
    render() {
        this.setAttribute("role", "radio");
        this.setAttribute("aria-checked", this.checked ? "true" : "false");
        this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
        return _chunk2VBMOEKGJs.$`
      <label
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            radio: true,
            "radio--checked": this.checked,
            "radio--disabled": this.disabled,
            "radio--focused": this.hasFocus
        })}
        @keydown=${this.handleKeyDown}
      >
        <input
          class="radio__input"
          type="radio"
          name=${_chunkKJOCH52QJs.l(this.name)}
          value=${_chunkKJOCH52QJs.l(this.value)}
          .checked=${_chunkGPPFFSGRJs.l(this.checked)}
          .disabled=${this.disabled}
          aria-hidden="true"
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
        />
        <span part="control" class="radio__control">
          <span part="checked-icon" class="radio__icon">
            <svg viewBox="0 0 16 16">
              <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                <g fill="currentColor">
                  <circle cx="8" cy="8" r="3.42857143"></circle>
                </g>
              </g>
            </svg>
          </span>
        </span>

        <span part="label" class="radio__label">
          <slot></slot>
        </span>
      </label>
    `;
    }
};
SlRadio.styles = _chunkK6ZGLWCAJs.radio_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('input[type="radio"]')
], SlRadio.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlRadio.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRadio.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRadio.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRadio.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRadio.prototype, "checked", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlRadio.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("checked", {
        waitUntilFirstUpdate: true
    })
], SlRadio.prototype, "handleCheckedChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlRadio.prototype, "handleDisabledChange", 1);
SlRadio = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-radio")
], SlRadio);

},{"./chunk.K6ZGLWCA.js":"fCDJc","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCDJc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radio_styles_default", ()=>radio_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/radio/radio.styles.ts
var radio_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .radio {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .radio__icon {
    display: inline-flex;
    width: var(--sl-toggle-size);
    height: var(--sl-toggle-size);
  }

  .radio__icon svg {
    width: 100%;
    height: 100%;
  }

  .radio__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--sl-toggle-size);
    height: var(--sl-toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 50%;
    background-color: var(--sl-input-background-color);
    color: transparent;
    transition: var(--sl-transition-fast) border-color, var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color, var(--sl-transition-fast) box-shadow;
  }

  .radio__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Focus */
  .radio:not(.radio--checked):not(.radio--disabled) .radio__input${_chunkAN2XMPAVJs.focusVisibleSelector} ~ .radio__control {
    border-color: var(--sl-input-border-color-focus);
    background-color: var(--sl-input-background-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  /* Checked */
  .radio--checked .radio__control {
    color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked + hover */
  .radio.radio--checked:not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked + focus */
  .radio.radio--checked:not(.radio--disabled) .radio__input${_chunkAN2XMPAVJs.focusVisibleSelector} ~ .radio__control {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  /* Disabled */
  .radio--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When the control isn't checked, hide the circle for Windows High Contrast mode a11y */
  .radio:not(.radio--checked) svg circle {
    opacity: 0;
  }

  .radio__label {
    line-height: var(--sl-toggle-size);
    margin-left: 0.5em;
    user-select: none;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8heq6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlRadioGroup", ()=>SlRadioGroup
);
var _chunkZQO5EFLYJs = require("./chunk.ZQO5EFLY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/radio-group/radio-group.ts
var SlRadioGroup = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.label = "";
        this.fieldset = false;
    }
    handleFocusIn() {
        requestAnimationFrame(()=>{
            const checkedRadio = [
                ...this.defaultSlot.assignedElements({
                    flatten: true
                })
            ].find((el)=>el.tagName.toLowerCase() === "sl-radio" && el.checked
            );
            if (checkedRadio) checkedRadio.focus();
        });
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <fieldset
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "radio-group": true,
            "radio-group--has-fieldset": this.fieldset
        })}
        role="radiogroup"
        @focusin=${this.handleFocusIn}
      >
        <legend part="label" class="radio-group__label">
          <slot name="label">${this.label}</slot>
        </legend>
        <slot></slot>
      </fieldset>
    `;
    }
};
SlRadioGroup.styles = _chunkZQO5EFLYJs.radio_group_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("slot:not([name])")
], SlRadioGroup.prototype, "defaultSlot", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlRadioGroup.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        attribute: "fieldset"
    })
], SlRadioGroup.prototype, "fieldset", 2);
SlRadioGroup = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-radio-group")
], SlRadioGroup);

},{"./chunk.ZQO5EFLY.js":"e7Coz","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7Coz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radio_group_styles_default", ()=>radio_group_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/radio-group/radio-group.styles.ts
var radio_group_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .radio-group {
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding: var(--sl-spacing-large);
    padding-top: var(--sl-spacing-x-small);
  }

  .radio-group .radio-group__label {
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-color);
    padding: 0 var(--sl-spacing-2x-small);
  }

  ::slotted(sl-radio:not(:last-of-type)) {
    display: block;
    margin-bottom: var(--sl-spacing-2x-small);
  }

  .radio-group:not(.radio-group--has-fieldset) {
    border: none;
    padding: 0;
    margin: 0;
    min-width: 0;
  }

  .radio-group:not(.radio-group--has-fieldset) .radio-group__label {
    position: absolute;
    width: 0;
    height: 0;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    overflow: hidden;
    white-space: nowrap;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQH5f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlMenuItem", ()=>SlMenuItem
);
var _chunkXIW4B2T3Js = require("./chunk.XIW4B2T3.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/menu-item/menu-item.ts
var SlMenuItem = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.checked = false;
        this.value = "";
        this.disabled = false;
    }
    firstUpdated() {
        this.setAttribute("role", "menuitem");
    }
    handleCheckedChange() {
        this.setAttribute("aria-checked", String(this.checked));
    }
    handleDisabledChange() {
        this.setAttribute("aria-disabled", String(this.disabled));
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "menu-item": true,
            "menu-item--checked": this.checked,
            "menu-item--disabled": this.disabled
        })}
      >
        <sl-icon
          part="checked-icon"
          class="menu-item__check"
          name="check"
          library="system"
          aria-hidden="true"
        ></sl-icon>

        <span part="prefix" class="menu-item__prefix">
          <slot name="prefix"></slot>
        </span>

        <span part="label" class="menu-item__label">
          <slot></slot>
        </span>

        <span part="suffix" class="menu-item__suffix">
          <slot name="suffix"></slot>
        </span>
      </div>
    `;
    }
};
SlMenuItem.styles = _chunkXIW4B2T3Js.menu_item_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".menu-item")
], SlMenuItem.prototype, "menuItem", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlMenuItem.prototype, "checked", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlMenuItem.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlMenuItem.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("checked")
], SlMenuItem.prototype, "handleCheckedChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlMenuItem.prototype, "handleDisabledChange", 1);
SlMenuItem = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-menu-item")
], SlMenuItem);

},{"./chunk.XIW4B2T3.js":"5iFK0","./chunk.W2WMQSCE.js":"9o2tn","./chunk.BD26TKS4.js":"1j2NX","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iFK0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "menu_item_styles_default", ()=>menu_item_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/menu-item/menu-item.styles.ts
var menu_item_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .menu-item {
    position: relative;
    display: flex;
    align-items: stretch;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    text-align: left;
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-large);
    transition: var(--sl-transition-fast) fill;
    user-select: none;
    white-space: nowrap;
    cursor: pointer;
  }

  .menu-item.menu-item--disabled {
    outline: none;
    color: var(--sl-color-neutral-400);
    cursor: not-allowed;
  }

  .menu-item .menu-item__label {
    flex: 1 1 auto;
  }

  .menu-item .menu-item__prefix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__prefix ::slotted(*) {
    margin-right: var(--sl-spacing-x-small);
  }

  .menu-item .menu-item__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__suffix ::slotted(*) {
    margin-left: var(--sl-spacing-x-small);
  }

  :host(:focus) {
    outline: none;
  }

  :host(:hover:not([aria-disabled='true'])) .menu-item,
  :host(${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.sl-focus-invisible):not([aria-disabled='true'])) .menu-item {
    outline: none;
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .menu-item .menu-item__check {
    display: flex;
    position: absolute;
    left: 0.5em;
    top: calc(50% - 0.5em);
    visibility: hidden;
    align-items: center;
    font-size: inherit;
  }

  .menu-item--checked .menu-item__check {
    visibility: visible;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sIuf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlMenuLabel", ()=>SlMenuLabel
);
var _chunkNHYPQ5NUJs = require("./chunk.NHYPQ5NU.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/menu-label/menu-label.ts
var SlMenuLabel = class extends _chunk2VBMOEKGJs.s {
    render() {
        return _chunk2VBMOEKGJs.$`
      <div part="base" class="menu-label">
        <slot></slot>
      </div>
    `;
    }
};
SlMenuLabel.styles = _chunkNHYPQ5NUJs.menu_label_styles_default;
SlMenuLabel = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-menu-label")
], SlMenuLabel);

},{"./chunk.NHYPQ5NU.js":"41Ju4","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"41Ju4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "menu_label_styles_default", ()=>menu_label_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/menu-label/menu-label.styles.ts
var menu_label_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .menu-label {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-large);
    user-select: none;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sI8M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlMutationObserver", ()=>SlMutationObserver
);
var _chunk6D7VQJJDJs = require("./chunk.6D7VQJJD.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/mutation-observer/mutation-observer.ts
var SlMutationObserver = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.attrOldValue = false;
        this.charData = false;
        this.charDataOldValue = false;
        this.childList = false;
        this.disabled = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.handleMutation = this.handleMutation.bind(this);
        this.mutationObserver = new MutationObserver(this.handleMutation);
        if (!this.disabled) this.startObserver();
    }
    disconnectedCallback() {
        this.stopObserver();
    }
    handleDisabledChange() {
        if (this.disabled) this.stopObserver();
        else this.startObserver();
    }
    handleChange() {
        this.stopObserver();
        this.startObserver();
    }
    handleMutation(mutationList) {
        _chunkI4TE3TJVJs.emit(this, "sl-mutation", {
            detail: {
                mutationList
            }
        });
    }
    startObserver() {
        const observeAttributes = typeof this.attr === "string" && this.attr.length > 0;
        const attributeFilter = observeAttributes && this.attr !== "*" ? this.attr.split(" ") : void 0;
        try {
            this.mutationObserver.observe(this, {
                subtree: true,
                childList: this.childList,
                attributes: observeAttributes,
                attributeFilter,
                attributeOldValue: this.attrOldValue,
                characterData: this.charData,
                characterDataOldValue: this.charDataOldValue
            });
        } catch (e2) {
        }
    }
    stopObserver() {
        this.mutationObserver.disconnect();
    }
    render() {
        return _chunk2VBMOEKGJs.$` <slot></slot> `;
    }
};
SlMutationObserver.styles = _chunk6D7VQJJDJs.mutation_observer_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlMutationObserver.prototype, "attr", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "attr-old-value",
        type: Boolean,
        reflect: true
    })
], SlMutationObserver.prototype, "attrOldValue", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "char-data",
        type: Boolean,
        reflect: true
    })
], SlMutationObserver.prototype, "charData", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "char-data-old-value",
        type: Boolean,
        reflect: true
    })
], SlMutationObserver.prototype, "charDataOldValue", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "child-list",
        type: Boolean,
        reflect: true
    })
], SlMutationObserver.prototype, "childList", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlMutationObserver.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlMutationObserver.prototype, "handleDisabledChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("attr", {
        waitUntilFirstUpdate: true
    }),
    _chunkBD26TKS4Js.watch("attr-old-value", {
        waitUntilFirstUpdate: true
    }),
    _chunkBD26TKS4Js.watch("char-data", {
        waitUntilFirstUpdate: true
    }),
    _chunkBD26TKS4Js.watch("char-data-old-value", {
        waitUntilFirstUpdate: true
    }),
    _chunkBD26TKS4Js.watch("childList", {
        waitUntilFirstUpdate: true
    })
], SlMutationObserver.prototype, "handleChange", 1);
SlMutationObserver = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-mutation-observer")
], SlMutationObserver);

},{"./chunk.6D7VQJJD.js":"j0iGT","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j0iGT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mutation_observer_styles_default", ()=>mutation_observer_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/mutation-observer/mutation-observer.styles.ts
var mutation_observer_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: contents;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkzjD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlProgressBar", ()=>SlProgressBar
);
var _chunk3CC35VHZJs = require("./chunk.3CC35VHZ.js");
var _chunkDIYFVAUNJs = require("./chunk.DIYFVAUN.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/progress-bar/progress-bar.ts
var SlProgressBar = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.value = 0;
        this.indeterminate = false;
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "progress-bar": true,
            "progress-bar--indeterminate": this.indeterminate
        })}
        role="progressbar"
        title=${_chunkKJOCH52QJs.l(this.title)}
        aria-label=${this.label || this.localize.term("progress")}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow=${this.indeterminate ? 0 : this.value}
      >
        <div part="indicator" class="progress-bar__indicator" style=${_chunkDIYFVAUNJs.i({
            width: this.value + "%"
        })}>
          ${!this.indeterminate ? _chunk2VBMOEKGJs.$`
                <span part="label" class="progress-bar__label">
                  <slot></slot>
                </span>
              ` : ""}
        </div>
      </div>
    `;
    }
};
SlProgressBar.styles = _chunk3CC35VHZJs.progress_bar_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number,
        reflect: true
    })
], SlProgressBar.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlProgressBar.prototype, "indeterminate", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlProgressBar.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlProgressBar.prototype, "lang", 2);
SlProgressBar = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-progress-bar")
], SlProgressBar);

},{"./chunk.3CC35VHZ.js":"4S5t5","./chunk.DIYFVAUN.js":"gJHLQ","./chunk.CCTU25PV.js":"dUPzH","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4S5t5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "progress_bar_styles_default", ()=>progress_bar_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/progress-bar/progress-bar.styles.ts
var progress_bar_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --height: 1rem;
    --track-color: var(--sl-color-neutral-200);
    --indicator-color: var(--sl-color-primary-600);
    --label-color: var(--sl-color-neutral-0);

    display: block;
  }

  .progress-bar {
    position: relative;
    background-color: var(--track-color);
    height: var(--height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset var(--sl-shadow-small);
    overflow: hidden;
  }

  .progress-bar__indicator {
    height: 100%;
    font-family: var(--sl-font-sans);
    font-size: 12px;
    font-weight: var(--sl-font-weight-normal);
    background-color: var(--indicator-color);
    color: var(--label-color);
    text-align: center;
    line-height: var(--height);
    white-space: nowrap;
    overflow: hidden;
    transition: 400ms width, 400ms background-color;
    user-select: none;
  }

  /* Indeterminate */
  .progress-bar--indeterminate .progress-bar__indicator {
    position: absolute;
    animation: indeterminate 2.5s infinite cubic-bezier(0.37, 0, 0.63, 1);
  }

  @keyframes indeterminate {
    0% {
      left: -50%;
      width: 50%;
    }
    75%,
    100% {
      left: 100%;
      width: 50%;
    }
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ewttw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlImageComparer", ()=>SlImageComparer
);
var _chunk5LT34KCUJs = require("./chunk.5LT34KCU.js");
var _chunkT56CG5BMJs = require("./chunk.T56CG5BM.js");
var _chunkDIYFVAUNJs = require("./chunk.DIYFVAUN.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/image-comparer/image-comparer.ts
var SlImageComparer = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.position = 50;
    }
    handleDrag(event) {
        const { width  } = this.base.getBoundingClientRect();
        function drag(event2, container, onMove) {
            const move = (event3)=>{
                const { left  } = container.getBoundingClientRect();
                const { pageXOffset  } = container.ownerDocument.defaultView;
                const offsetX = left + pageXOffset;
                const x = (event3.changedTouches ? event3.changedTouches[0].pageX : event3.pageX) - offsetX;
                onMove(x);
            };
            move(event2);
            const stop = ()=>{
                document.removeEventListener("mousemove", move);
                document.removeEventListener("touchmove", move);
                document.removeEventListener("mouseup", stop);
                document.removeEventListener("touchend", stop);
            };
            document.addEventListener("mousemove", move);
            document.addEventListener("touchmove", move);
            document.addEventListener("mouseup", stop);
            document.addEventListener("touchend", stop);
        }
        event.preventDefault();
        drag(event, this.base, (x)=>{
            this.position = Number(_chunkT56CG5BMJs.clamp(x / width * 100, 0, 100).toFixed(2));
        });
    }
    handleKeyDown(event) {
        if ([
            "ArrowLeft",
            "ArrowRight",
            "Home",
            "End"
        ].includes(event.key)) {
            const incr = event.shiftKey ? 10 : 1;
            let newPosition = this.position;
            event.preventDefault();
            if (event.key === "ArrowLeft") newPosition = newPosition - incr;
            if (event.key === "ArrowRight") newPosition = newPosition + incr;
            if (event.key === "Home") newPosition = 0;
            if (event.key === "End") newPosition = 100;
            newPosition = _chunkT56CG5BMJs.clamp(newPosition, 0, 100);
            this.position = newPosition;
        }
    }
    handlePositionChange() {
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div part="base" class="image-comparer" @keydown=${this.handleKeyDown}>
        <div class="image-comparer__image">
          <div part="before" class="image-comparer__before">
            <slot name="before"></slot>
          </div>

          <div
            part="after"
            class="image-comparer__after"
            style=${_chunkDIYFVAUNJs.i({
            clipPath: `inset(0 ${100 - this.position}% 0 0)`
        })}
          >
            <slot name="after"></slot>
          </div>
        </div>

        <div
          part="divider"
          class="image-comparer__divider"
          style=${_chunkDIYFVAUNJs.i({
            left: this.position + "%"
        })}
          @mousedown=${this.handleDrag}
          @touchstart=${this.handleDrag}
        >
          <div
            part="handle"
            class="image-comparer__handle"
            role="scrollbar"
            aria-valuenow=${this.position}
            aria-valuemin="0"
            aria-valuemax="100"
            tabindex="0"
          >
            <slot name="handle-icon">
              <sl-icon class="image-comparer__handle-icon" name="grip-vertical" library="system"></sl-icon>
            </slot>
          </div>
        </div>
      </div>
    `;
    }
};
SlImageComparer.styles = _chunk5LT34KCUJs.image_comparer_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".image-comparer")
], SlImageComparer.prototype, "base", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".image-comparer__handle")
], SlImageComparer.prototype, "handle", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number,
        reflect: true
    })
], SlImageComparer.prototype, "position", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("position", {
        waitUntilFirstUpdate: true
    })
], SlImageComparer.prototype, "handlePositionChange", 1);
SlImageComparer = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-image-comparer")
], SlImageComparer);

},{"./chunk.5LT34KCU.js":"3VLMm","./chunk.T56CG5BM.js":"5yofy","./chunk.DIYFVAUN.js":"gJHLQ","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VLMm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "image_comparer_styles_default", ()=>image_comparer_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/image-comparer/image-comparer.styles.ts
var image_comparer_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --divider-width: 2px;
    --handle-size: 2.5rem;

    display: inline-block;
    position: relative;
  }

  .image-comparer {
    max-width: 100%;
    max-height: 100%;
    overflow: hidden;
  }

  .image-comparer__before,
  .image-comparer__after {
    pointer-events: none;
  }

  .image-comparer__before ::slotted(img),
  .image-comparer__after ::slotted(img),
  .image-comparer__before ::slotted(svg),
  .image-comparer__after ::slotted(svg) {
    display: block;
    max-width: 100% !important;
    height: auto;
  }

  .image-comparer__after {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  .image-comparer__divider {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    width: var(--divider-width);
    height: 100%;
    background-color: var(--sl-color-neutral-0);
    transform: translateX(calc(var(--divider-width) / -2));
    cursor: ew-resize;
  }

  .image-comparer__handle {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: calc(50% - (var(--handle-size) / 2));
    width: var(--handle-size);
    height: var(--handle-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: var(--sl-border-radius-circle);
    font-size: calc(var(--handle-size) * 0.5);
    color: var(--sl-color-neutral-600);
    cursor: inherit;
    z-index: 10;
  }

  .image-comparer__handle${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: var(--sl-focus-ring);
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2qBQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlInclude", ()=>SlInclude
);
var _chunkF4APDX5BJs = require("./chunk.F4APDX5B.js");
var _chunkVHNS4GLLJs = require("./chunk.VHNS4GLL.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/include/include.ts
var SlInclude = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.mode = "cors";
        this.allowScripts = false;
    }
    executeScript(script) {
        const newScript = document.createElement("script");
        [
            ...script.attributes
        ].map((attr)=>newScript.setAttribute(attr.name, attr.value)
        );
        newScript.textContent = script.textContent;
        script.parentNode.replaceChild(newScript, script);
    }
    async handleSrcChange() {
        try {
            const src = this.src;
            const file = await _chunkVHNS4GLLJs.requestInclude(src, this.mode);
            if (src !== this.src) return;
            if (!file) return;
            if (!file.ok) {
                _chunkI4TE3TJVJs.emit(this, "sl-error", {
                    detail: {
                        status: file.status
                    }
                });
                return;
            }
            this.innerHTML = file.html;
            if (this.allowScripts) [
                ...this.querySelectorAll("script")
            ].map((script)=>this.executeScript(script)
            );
            _chunkI4TE3TJVJs.emit(this, "sl-load");
        } catch (e2) {
            _chunkI4TE3TJVJs.emit(this, "sl-error", {
                detail: {
                    status: -1
                }
            });
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`<slot></slot>`;
    }
};
SlInclude.styles = _chunkF4APDX5BJs.include_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInclude.prototype, "src", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInclude.prototype, "mode", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "allow-scripts",
        type: Boolean
    })
], SlInclude.prototype, "allowScripts", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("src")
], SlInclude.prototype, "handleSrcChange", 1);
SlInclude = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-include")
], SlInclude);

},{"./chunk.F4APDX5B.js":"fm9pt","./chunk.VHNS4GLL.js":"6UezC","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fm9pt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "include_styles_default", ()=>include_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/include/include.styles.ts
var include_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UezC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestInclude", ()=>requestInclude
);
// src/components/include/request.ts
var includeFiles = /* @__PURE__ */ new Map();
var requestInclude = async (src, mode = "cors")=>{
    if (includeFiles.has(src)) return includeFiles.get(src);
    else {
        const request = fetch(src, {
            mode
        }).then(async (response)=>{
            return {
                ok: response.ok,
                status: response.status,
                html: await response.text()
            };
        });
        includeFiles.set(src, request);
        return request;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amP93":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlMenu", ()=>SlMenu
);
var _chunk6VMJHXFCJs = require("./chunk.6VMJHXFC.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/menu/menu.ts
var SlMenu = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.typeToSelectString = "";
    }
    firstUpdated() {
        this.setAttribute("role", "menu");
    }
    getAllItems(options = {
        includeDisabled: true
    }) {
        return [
            ...this.defaultSlot.assignedElements({
                flatten: true
            })
        ].filter((el)=>{
            if (el.getAttribute("role") !== "menuitem") return false;
            if (!(options == null ? void 0 : options.includeDisabled) && el.disabled) return false;
            return true;
        });
    }
    getCurrentItem() {
        return this.getAllItems({
            includeDisabled: false
        }).find((i2)=>i2.getAttribute("tabindex") === "0"
        );
    }
    setCurrentItem(item) {
        const items = this.getAllItems({
            includeDisabled: false
        });
        let activeItem = item.disabled ? items[0] : item;
        items.map((i2)=>i2.setAttribute("tabindex", i2 === activeItem ? "0" : "-1")
        );
    }
    typeToSelect(key) {
        const items = this.getAllItems({
            includeDisabled: false
        });
        clearTimeout(this.typeToSelectTimeout);
        this.typeToSelectTimeout = setTimeout(()=>this.typeToSelectString = ""
        , 750);
        this.typeToSelectString += key.toLowerCase();
        if (!_chunkAN2XMPAVJs.hasFocusVisible) items.map((item)=>item.classList.remove("sl-focus-invisible")
        );
        for (const item1 of items){
            const slot = item1.shadowRoot.querySelector("slot:not([name])");
            const label = _chunk5TL5QPK4Js.getTextContent(slot).toLowerCase().trim();
            if (label.substring(0, this.typeToSelectString.length) === this.typeToSelectString) {
                this.setCurrentItem(item1);
                item1.focus();
                break;
            }
        }
    }
    handleClick(event) {
        const target = event.target;
        const item = target.closest("sl-menu-item");
        if (item && !item.disabled) _chunkI4TE3TJVJs.emit(this, "sl-select", {
            detail: {
                item
            }
        });
    }
    handleKeyUp() {
        if (!_chunkAN2XMPAVJs.hasFocusVisible) {
            const items = this.getAllItems();
            items.map((item)=>item.classList.remove("sl-focus-invisible")
            );
        }
    }
    handleKeyDown(event) {
        if (event.key === "Enter") {
            const item = this.getCurrentItem();
            event.preventDefault();
            if (item) item.click();
        }
        if (event.key === " ") event.preventDefault();
        if ([
            "ArrowDown",
            "ArrowUp",
            "Home",
            "End"
        ].includes(event.key)) {
            const items = this.getAllItems({
                includeDisabled: false
            });
            const activeItem = this.getCurrentItem();
            let index = activeItem ? items.indexOf(activeItem) : 0;
            if (items.length) {
                event.preventDefault();
                if (event.key === "ArrowDown") index++;
                else if (event.key === "ArrowUp") index--;
                else if (event.key === "Home") index = 0;
                else if (event.key === "End") index = items.length - 1;
                if (index < 0) index = 0;
                if (index > items.length - 1) index = items.length - 1;
                this.setCurrentItem(items[index]);
                items[index].focus();
                return;
            }
        }
        this.typeToSelect(event.key);
    }
    handleMouseDown(event) {
        const target = event.target;
        if (target.getAttribute("role") === "menuitem") {
            this.setCurrentItem(target);
            if (!_chunkAN2XMPAVJs.hasFocusVisible) target.classList.add("sl-focus-invisible");
        }
    }
    handleSlotChange() {
        const items = this.getAllItems({
            includeDisabled: false
        });
        if (items.length) this.setCurrentItem(items[0]);
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class="menu"
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @keyup=${this.handleKeyUp}
        @mousedown=${this.handleMouseDown}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
      </div>
    `;
    }
};
SlMenu.styles = _chunk6VMJHXFCJs.menu_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".menu")
], SlMenu.prototype, "menu", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("slot")
], SlMenu.prototype, "defaultSlot", 2);
SlMenu = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-menu")
], SlMenu);

},{"./chunk.6VMJHXFC.js":"5KFV5","./chunk.5TL5QPK4.js":"akO45","./chunk.AN2XMPAV.js":"2bW2A","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5KFV5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "menu_styles_default", ()=>menu_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/menu/menu.styles.ts
var menu_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .menu {
    padding: var(--sl-spacing-x-small) 0;
  }

  ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9chM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlDrawer", ()=>SlDrawer
);
var _chunkZXQWYC2KJs = require("./chunk.ZXQWYC2K.js");
var _chunkSXNB3LL3Js = require("./chunk.SXNB3LL3.js");
var _chunkST4GEPNZJs = require("./chunk.ST4GEPNZ.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/internal/string.ts
function uppercaseFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
// src/components/drawer/drawer.ts
var hasPreventScroll = _chunkSXNB3LL3Js.isPreventScrollSupported();
var SlDrawer = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "footer");
        this.open = false;
        this.label = "";
        this.placement = "end";
        this.contained = false;
        this.noHeader = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.modal = new _chunkSXNB3LL3Js.Modal(this);
    }
    firstUpdated() {
        this.drawer.hidden = !this.open;
        if (this.open && !this.contained) {
            this.modal.activate();
            _chunkST4GEPNZJs.lockBodyScrolling(this);
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        _chunkST4GEPNZJs.unlockBodyScrolling(this);
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    requestClose() {
        const slRequestClose = _chunkI4TE3TJVJs.emit(this, "sl-request-close", {
            cancelable: true
        });
        if (slRequestClose.defaultPrevented) {
            const animation = _chunkUTEQRIIYJs.getAnimation(this, "drawer.denyClose");
            _chunk6JY65IM5Js.animateTo(this.panel, animation.keyframes, animation.options);
            return;
        }
        this.hide();
    }
    handleKeyDown(event) {
        if (event.key === "Escape") {
            event.stopPropagation();
            this.requestClose();
        }
    }
    async handleOpenChange() {
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            this.originalTrigger = document.activeElement;
            if (!this.contained) {
                this.modal.activate();
                _chunkST4GEPNZJs.lockBodyScrolling(this);
            }
            await Promise.all([
                _chunk6JY65IM5Js.stopAnimations(this.drawer),
                _chunk6JY65IM5Js.stopAnimations(this.overlay)
            ]);
            this.drawer.hidden = false;
            if (hasPreventScroll) {
                const slInitialFocus = _chunkI4TE3TJVJs.emit(this, "sl-initial-focus", {
                    cancelable: true
                });
                if (!slInitialFocus.defaultPrevented) this.panel.focus({
                    preventScroll: true
                });
            }
            const panelAnimation = _chunkUTEQRIIYJs.getAnimation(this, `drawer.show${uppercaseFirstLetter(this.placement)}`);
            const overlayAnimation = _chunkUTEQRIIYJs.getAnimation(this, "drawer.overlay.show");
            await Promise.all([
                _chunk6JY65IM5Js.animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                _chunk6JY65IM5Js.animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
            ]);
            if (!hasPreventScroll) {
                const slInitialFocus = _chunkI4TE3TJVJs.emit(this, "sl-initial-focus", {
                    cancelable: true
                });
                if (!slInitialFocus.defaultPrevented) this.panel.focus({
                    preventScroll: true
                });
            }
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            this.modal.deactivate();
            _chunkST4GEPNZJs.unlockBodyScrolling(this);
            await Promise.all([
                _chunk6JY65IM5Js.stopAnimations(this.drawer),
                _chunk6JY65IM5Js.stopAnimations(this.overlay)
            ]);
            const panelAnimation = _chunkUTEQRIIYJs.getAnimation(this, `drawer.hide${uppercaseFirstLetter(this.placement)}`);
            const overlayAnimation = _chunkUTEQRIIYJs.getAnimation(this, "drawer.overlay.hide");
            await Promise.all([
                _chunk6JY65IM5Js.animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                _chunk6JY65IM5Js.animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
            ]);
            this.drawer.hidden = true;
            const trigger = this.originalTrigger;
            if (trigger && typeof trigger.focus === "function") setTimeout(()=>trigger.focus()
            );
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            drawer: true,
            "drawer--open": this.open,
            "drawer--top": this.placement === "top",
            "drawer--end": this.placement === "end",
            "drawer--bottom": this.placement === "bottom",
            "drawer--start": this.placement === "start",
            "drawer--contained": this.contained,
            "drawer--fixed": !this.contained,
            "drawer--has-footer": this.hasSlotController.test("footer")
        })}
        @keydown=${this.handleKeyDown}
      >
        <div part="overlay" class="drawer__overlay" @click=${this.requestClose} tabindex="-1"></div>

        <div
          part="panel"
          class="drawer__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${_chunkKJOCH52QJs.l(this.noHeader ? this.label : void 0)}
          aria-labelledby=${_chunkKJOCH52QJs.l(!this.noHeader ? "title" : void 0)}
          tabindex="0"
        >
          ${!this.noHeader ? _chunk2VBMOEKGJs.$`
                <header part="header" class="drawer__header">
                  <span part="title" class="drawer__title" id="title">
                    <!-- If there's no label, use an invisible character to prevent the header from collapsing -->
                    <slot name="label"> ${this.label || String.fromCharCode(65279)} </slot>
                  </span>
                  <sl-icon-button
                    exportparts="base:close-button"
                    class="drawer__close"
                    name="x"
                    library="system"
                    @click=${this.requestClose}
                  ></sl-icon-button>
                </header>
              ` : ""}

          <div part="body" class="drawer__body">
            <slot></slot>
          </div>

          <footer part="footer" class="drawer__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
    }
};
SlDrawer.styles = _chunkZXQWYC2KJs.drawer_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".drawer")
], SlDrawer.prototype, "drawer", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".drawer__panel")
], SlDrawer.prototype, "panel", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".drawer__overlay")
], SlDrawer.prototype, "overlay", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDrawer.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlDrawer.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlDrawer.prototype, "placement", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDrawer.prototype, "contained", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "no-header",
        type: Boolean,
        reflect: true
    })
], SlDrawer.prototype, "noHeader", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlDrawer.prototype, "handleOpenChange", 1);
SlDrawer = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-drawer")
], SlDrawer);
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.showTop", {
    keyframes: [
        {
            opacity: 0,
            transform: "translateY(-100%)"
        },
        {
            opacity: 1,
            transform: "translateY(0)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.hideTop", {
    keyframes: [
        {
            opacity: 1,
            transform: "translateY(0)"
        },
        {
            opacity: 0,
            transform: "translateY(-100%)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.showEnd", {
    keyframes: [
        {
            opacity: 0,
            transform: "translateX(100%)"
        },
        {
            opacity: 1,
            transform: "translateX(0)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.hideEnd", {
    keyframes: [
        {
            opacity: 1,
            transform: "translateX(0)"
        },
        {
            opacity: 0,
            transform: "translateX(100%)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.showBottom", {
    keyframes: [
        {
            opacity: 0,
            transform: "translateY(100%)"
        },
        {
            opacity: 1,
            transform: "translateY(0)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.hideBottom", {
    keyframes: [
        {
            opacity: 1,
            transform: "translateY(0)"
        },
        {
            opacity: 0,
            transform: "translateY(100%)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.showStart", {
    keyframes: [
        {
            opacity: 0,
            transform: "translateX(-100%)"
        },
        {
            opacity: 1,
            transform: "translateX(0)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.hideStart", {
    keyframes: [
        {
            opacity: 1,
            transform: "translateX(0)"
        },
        {
            opacity: 0,
            transform: "translateX(-100%)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.denyClose", {
    keyframes: [
        {
            transform: "scale(1)"
        },
        {
            transform: "scale(1.01)"
        },
        {
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 250
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.overlay.show", {
    keyframes: [
        {
            opacity: 0
        },
        {
            opacity: 1
        }
    ],
    options: {
        duration: 250
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("drawer.overlay.hide", {
    keyframes: [
        {
            opacity: 1
        },
        {
            opacity: 0
        }
    ],
    options: {
        duration: 250
    }
});

},{"./chunk.ZXQWYC2K.js":"luWMM","./chunk.SXNB3LL3.js":"cN7v8","./chunk.ST4GEPNZ.js":"ao9ex","./chunk.5TL5QPK4.js":"akO45","./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luWMM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drawer_styles_default", ()=>drawer_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/drawer/drawer.styles.ts
var drawer_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --size: 25rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .drawer {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
  }

  .drawer--contained {
    position: absolute;
    z-index: initial;
  }

  .drawer--fixed {
    position: fixed;
    z-index: var(--sl-z-index-drawer);
  }

  .drawer__panel {
    position: absolute;
    display: flex;
    flex-direction: column;
    z-index: 2;
    max-width: 100%;
    max-height: 100%;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-large);
    transition: var(--sl-transition-medium) transform;
    overflow: auto;
    pointer-events: all;
  }

  .drawer__panel:focus {
    outline: none;
  }

  .drawer--top .drawer__panel {
    top: 0;
    right: auto;
    bottom: auto;
    left: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--end .drawer__panel {
    top: 0;
    right: 0;
    bottom: auto;
    left: auto;
    width: var(--size);
    height: 100%;
  }

  .drawer--bottom .drawer__panel {
    top: auto;
    right: auto;
    bottom: 0;
    left: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--start .drawer__panel {
    top: 0;
    right: auto;
    bottom: auto;
    left: 0;
    width: var(--size);
    height: 100%;
  }

  .drawer__header {
    display: flex;
  }

  .drawer__title {
    flex: 1 1 auto;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
  }

  .drawer__close {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-x-large);
    padding: 0 var(--header-spacing);
  }

  .drawer__body {
    flex: 1 1 auto;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .drawer__footer {
    text-align: right;
    padding: var(--footer-spacing);
  }

  .drawer__footer ::slotted(sl-button:not(:last-of-type)) {
    margin-right: var(--sl-spacing-x-small);
  }

  .drawer:not(.drawer--has-footer) .drawer__footer {
    display: none;
  }

  .drawer__overlay {
    display: block;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
    pointer-events: all;
  }

  .drawer--contained .drawer__overlay {
    position: absolute;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cN7v8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPreventScrollSupported", ()=>isPreventScrollSupported
);
parcelHelpers.export(exports, "Modal", ()=>Modal
);
var _chunkDTSUHNT6Js = require("./chunk.DTSUHNT6.js");
// src/internal/support.ts
function isPreventScrollSupported() {
    let supported = false;
    document.createElement("div").focus({
        get preventScroll () {
            supported = true;
            return false;
        }
    });
    return supported;
}
// src/internal/modal.ts
var activeModals = [];
var Modal = class {
    constructor(element){
        this.tabDirection = "forward";
        this.element = element;
        this.handleFocusIn = this.handleFocusIn.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);
    }
    activate() {
        activeModals.push(this.element);
        document.addEventListener("focusin", this.handleFocusIn);
        document.addEventListener("keydown", this.handleKeyDown);
    }
    deactivate() {
        activeModals = activeModals.filter((modal)=>modal !== this.element
        );
        document.removeEventListener("focusin", this.handleFocusIn);
        document.removeEventListener("keydown", this.handleKeyDown);
    }
    isActive() {
        return activeModals[activeModals.length - 1] === this.element;
    }
    handleFocusIn(event) {
        const path = event.composedPath();
        if (this.isActive() && !path.includes(this.element)) {
            const { start , end  } = _chunkDTSUHNT6Js.getTabbableBoundary(this.element);
            const target = this.tabDirection === "forward" ? start : end;
            if (typeof (target == null ? void 0 : target.focus) === "function") target.focus({
                preventScroll: true
            });
        }
    }
    handleKeyDown(event) {
        if (event.key === "Tab" && event.shiftKey) {
            this.tabDirection = "backward";
            setTimeout(()=>this.tabDirection = "forward"
            );
        }
    }
};

},{"./chunk.DTSUHNT6.js":"a7RTw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a7RTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTabbableBoundary", ()=>getTabbableBoundary
);
// src/internal/tabbable.ts
function isTabbable(el) {
    const tag = el.tagName.toLowerCase();
    if (el.getAttribute("tabindex") === "-1") return false;
    if (el.hasAttribute("disabled")) return false;
    if (el.hasAttribute("aria-disabled") && el.getAttribute("aria-disabled") !== "false") return false;
    if (tag === "input" && el.getAttribute("type") === "radio" && !el.hasAttribute("checked")) return false;
    if (!el.offsetParent) return false;
    if (window.getComputedStyle(el).visibility === "hidden") return false;
    if ((tag === "audio" || tag === "video") && el.hasAttribute("controls")) return true;
    if (el.hasAttribute("tabindex")) return true;
    if (el.hasAttribute("contenteditable") && el.getAttribute("contenteditable") !== "false") return true;
    return [
        "button",
        "input",
        "select",
        "textarea",
        "a",
        "audio",
        "video",
        "summary"
    ].includes(tag);
}
function getTabbableBoundary(root) {
    const allElements = [];
    function walk(el) {
        if (el instanceof HTMLElement) {
            allElements.push(el);
            if (el.shadowRoot && el.shadowRoot.mode === "open") walk(el.shadowRoot);
        }
        [
            ...el.querySelectorAll("*")
        ].map((e)=>walk(e)
        );
    }
    walk(root);
    const start = allElements.find((el)=>isTabbable(el)
    ) || null;
    const end = allElements.reverse().find((el)=>isTabbable(el)
    ) || null;
    return {
        start,
        end
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"48xqd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlFormatBytes", ()=>SlFormatBytes
);
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/internal/number.ts
function formatBytes(bytes, options) {
    options = Object.assign({
        unit: "bytes",
        formatter: (number)=>number.toLocaleString()
    }, options);
    const byteUnits = [
        "B",
        "kB",
        "MB",
        "GB",
        "TB",
        "PB",
        "EB",
        "ZB",
        "YB"
    ];
    const bitUnits = [
        "b",
        "kbit",
        "Mbit",
        "Gbit",
        "Tbit",
        "Pbit",
        "Ebit",
        "Zbit",
        "Ybit"
    ];
    const units = options.unit === "bytes" ? byteUnits : bitUnits;
    const isNegative = bytes < 0;
    bytes = Math.abs(bytes);
    if (bytes === 0) return "0 B";
    const i = Math.min(Math.floor(Math.log10(bytes) / 3), units.length - 1);
    const num = Number((bytes / Math.pow(1000, i)).toPrecision(3));
    const numString = options.formatter ? options.formatter(num) : num;
    const prefix = isNegative ? "-" : "";
    return `${prefix}${numString} ${units[i]}`;
}
// src/components/format-bytes/format-bytes.ts
var SlFormatBytes = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.value = 0;
        this.unit = "bytes";
    }
    render() {
        return formatBytes(this.value, {
            unit: this.unit,
            formatter: (num)=>this.localize.number(num)
        });
    }
};
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlFormatBytes.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatBytes.prototype, "unit", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatBytes.prototype, "lang", 2);
SlFormatBytes = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-format-bytes")
], SlFormatBytes);

},{"./chunk.CCTU25PV.js":"dUPzH","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64mIH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlFormatDate", ()=>SlFormatDate
);
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/format-date/format-date.ts
var SlFormatDate = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.date = new Date();
        this.hourFormat = "auto";
    }
    render() {
        const date = new Date(this.date);
        const hour12 = this.hourFormat === "auto" ? void 0 : this.hourFormat === "12";
        if (isNaN(date.getMilliseconds())) return;
        return this.localize.date(date, {
            weekday: this.weekday,
            era: this.era,
            year: this.year,
            month: this.month,
            day: this.day,
            hour: this.hour,
            minute: this.minute,
            second: this.second,
            timeZoneName: this.timeZoneName,
            timeZone: this.timeZone,
            hour12
        });
    }
};
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "date", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "lang", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "weekday", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "era", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "year", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "month", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "day", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "hour", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "minute", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatDate.prototype, "second", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "time-zone-name"
    })
], SlFormatDate.prototype, "timeZoneName", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "time-zone"
    })
], SlFormatDate.prototype, "timeZone", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "hour-format"
    })
], SlFormatDate.prototype, "hourFormat", 2);
SlFormatDate = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-format-date")
], SlFormatDate);

},{"./chunk.CCTU25PV.js":"dUPzH","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6qif":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlFormatNumber", ()=>SlFormatNumber
);
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/format-number/format-number.ts
var SlFormatNumber = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.value = 0;
        this.type = "decimal";
        this.noGrouping = false;
        this.currency = "USD";
        this.currencyDisplay = "symbol";
    }
    render() {
        if (isNaN(this.value)) return "";
        return this.localize.number(this.value, {
            style: this.type,
            currency: this.currency,
            currencyDisplay: this.currencyDisplay,
            useGrouping: !this.noGrouping,
            minimumIntegerDigits: this.minimumIntegerDigits,
            minimumFractionDigits: this.minimumFractionDigits,
            maximumFractionDigits: this.maximumFractionDigits,
            minimumSignificantDigits: this.minimumSignificantDigits,
            maximumSignificantDigits: this.maximumSignificantDigits
        });
    }
};
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlFormatNumber.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatNumber.prototype, "lang", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatNumber.prototype, "type", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "no-grouping",
        type: Boolean
    })
], SlFormatNumber.prototype, "noGrouping", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlFormatNumber.prototype, "currency", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "currency-display"
    })
], SlFormatNumber.prototype, "currencyDisplay", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "minimum-integer-digits",
        type: Number
    })
], SlFormatNumber.prototype, "minimumIntegerDigits", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "minimum-fraction-digits",
        type: Number
    })
], SlFormatNumber.prototype, "minimumFractionDigits", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "maximum-fraction-digits",
        type: Number
    })
], SlFormatNumber.prototype, "maximumFractionDigits", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "minimum-significant-digits",
        type: Number
    })
], SlFormatNumber.prototype, "minimumSignificantDigits", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "maximum-significant-digits",
        type: Number
    })
], SlFormatNumber.prototype, "maximumSignificantDigits", 2);
SlFormatNumber = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-format-number")
], SlFormatNumber);

},{"./chunk.CCTU25PV.js":"dUPzH","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"30fXD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlColorPicker", ()=>SlColorPicker
);
var _chunkT56CG5BMJs = require("./chunk.T56CG5BM.js");
var _chunkDIYFVAUNJs = require("./chunk.DIYFVAUN.js");
var _chunkCCTU25PVJs = require("./chunk.CCTU25PV.js");
var _chunkXGZZXZ23Js = require("./chunk.XGZZXZ23.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/color-name/index.js
var require_color_name = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color-name/index.js" (exports, module) {
        module.exports = {
            "aliceblue": [
                240,
                248,
                255
            ],
            "antiquewhite": [
                250,
                235,
                215
            ],
            "aqua": [
                0,
                255,
                255
            ],
            "aquamarine": [
                127,
                255,
                212
            ],
            "azure": [
                240,
                255,
                255
            ],
            "beige": [
                245,
                245,
                220
            ],
            "bisque": [
                255,
                228,
                196
            ],
            "black": [
                0,
                0,
                0
            ],
            "blanchedalmond": [
                255,
                235,
                205
            ],
            "blue": [
                0,
                0,
                255
            ],
            "blueviolet": [
                138,
                43,
                226
            ],
            "brown": [
                165,
                42,
                42
            ],
            "burlywood": [
                222,
                184,
                135
            ],
            "cadetblue": [
                95,
                158,
                160
            ],
            "chartreuse": [
                127,
                255,
                0
            ],
            "chocolate": [
                210,
                105,
                30
            ],
            "coral": [
                255,
                127,
                80
            ],
            "cornflowerblue": [
                100,
                149,
                237
            ],
            "cornsilk": [
                255,
                248,
                220
            ],
            "crimson": [
                220,
                20,
                60
            ],
            "cyan": [
                0,
                255,
                255
            ],
            "darkblue": [
                0,
                0,
                139
            ],
            "darkcyan": [
                0,
                139,
                139
            ],
            "darkgoldenrod": [
                184,
                134,
                11
            ],
            "darkgray": [
                169,
                169,
                169
            ],
            "darkgreen": [
                0,
                100,
                0
            ],
            "darkgrey": [
                169,
                169,
                169
            ],
            "darkkhaki": [
                189,
                183,
                107
            ],
            "darkmagenta": [
                139,
                0,
                139
            ],
            "darkolivegreen": [
                85,
                107,
                47
            ],
            "darkorange": [
                255,
                140,
                0
            ],
            "darkorchid": [
                153,
                50,
                204
            ],
            "darkred": [
                139,
                0,
                0
            ],
            "darksalmon": [
                233,
                150,
                122
            ],
            "darkseagreen": [
                143,
                188,
                143
            ],
            "darkslateblue": [
                72,
                61,
                139
            ],
            "darkslategray": [
                47,
                79,
                79
            ],
            "darkslategrey": [
                47,
                79,
                79
            ],
            "darkturquoise": [
                0,
                206,
                209
            ],
            "darkviolet": [
                148,
                0,
                211
            ],
            "deeppink": [
                255,
                20,
                147
            ],
            "deepskyblue": [
                0,
                191,
                255
            ],
            "dimgray": [
                105,
                105,
                105
            ],
            "dimgrey": [
                105,
                105,
                105
            ],
            "dodgerblue": [
                30,
                144,
                255
            ],
            "firebrick": [
                178,
                34,
                34
            ],
            "floralwhite": [
                255,
                250,
                240
            ],
            "forestgreen": [
                34,
                139,
                34
            ],
            "fuchsia": [
                255,
                0,
                255
            ],
            "gainsboro": [
                220,
                220,
                220
            ],
            "ghostwhite": [
                248,
                248,
                255
            ],
            "gold": [
                255,
                215,
                0
            ],
            "goldenrod": [
                218,
                165,
                32
            ],
            "gray": [
                128,
                128,
                128
            ],
            "green": [
                0,
                128,
                0
            ],
            "greenyellow": [
                173,
                255,
                47
            ],
            "grey": [
                128,
                128,
                128
            ],
            "honeydew": [
                240,
                255,
                240
            ],
            "hotpink": [
                255,
                105,
                180
            ],
            "indianred": [
                205,
                92,
                92
            ],
            "indigo": [
                75,
                0,
                130
            ],
            "ivory": [
                255,
                255,
                240
            ],
            "khaki": [
                240,
                230,
                140
            ],
            "lavender": [
                230,
                230,
                250
            ],
            "lavenderblush": [
                255,
                240,
                245
            ],
            "lawngreen": [
                124,
                252,
                0
            ],
            "lemonchiffon": [
                255,
                250,
                205
            ],
            "lightblue": [
                173,
                216,
                230
            ],
            "lightcoral": [
                240,
                128,
                128
            ],
            "lightcyan": [
                224,
                255,
                255
            ],
            "lightgoldenrodyellow": [
                250,
                250,
                210
            ],
            "lightgray": [
                211,
                211,
                211
            ],
            "lightgreen": [
                144,
                238,
                144
            ],
            "lightgrey": [
                211,
                211,
                211
            ],
            "lightpink": [
                255,
                182,
                193
            ],
            "lightsalmon": [
                255,
                160,
                122
            ],
            "lightseagreen": [
                32,
                178,
                170
            ],
            "lightskyblue": [
                135,
                206,
                250
            ],
            "lightslategray": [
                119,
                136,
                153
            ],
            "lightslategrey": [
                119,
                136,
                153
            ],
            "lightsteelblue": [
                176,
                196,
                222
            ],
            "lightyellow": [
                255,
                255,
                224
            ],
            "lime": [
                0,
                255,
                0
            ],
            "limegreen": [
                50,
                205,
                50
            ],
            "linen": [
                250,
                240,
                230
            ],
            "magenta": [
                255,
                0,
                255
            ],
            "maroon": [
                128,
                0,
                0
            ],
            "mediumaquamarine": [
                102,
                205,
                170
            ],
            "mediumblue": [
                0,
                0,
                205
            ],
            "mediumorchid": [
                186,
                85,
                211
            ],
            "mediumpurple": [
                147,
                112,
                219
            ],
            "mediumseagreen": [
                60,
                179,
                113
            ],
            "mediumslateblue": [
                123,
                104,
                238
            ],
            "mediumspringgreen": [
                0,
                250,
                154
            ],
            "mediumturquoise": [
                72,
                209,
                204
            ],
            "mediumvioletred": [
                199,
                21,
                133
            ],
            "midnightblue": [
                25,
                25,
                112
            ],
            "mintcream": [
                245,
                255,
                250
            ],
            "mistyrose": [
                255,
                228,
                225
            ],
            "moccasin": [
                255,
                228,
                181
            ],
            "navajowhite": [
                255,
                222,
                173
            ],
            "navy": [
                0,
                0,
                128
            ],
            "oldlace": [
                253,
                245,
                230
            ],
            "olive": [
                128,
                128,
                0
            ],
            "olivedrab": [
                107,
                142,
                35
            ],
            "orange": [
                255,
                165,
                0
            ],
            "orangered": [
                255,
                69,
                0
            ],
            "orchid": [
                218,
                112,
                214
            ],
            "palegoldenrod": [
                238,
                232,
                170
            ],
            "palegreen": [
                152,
                251,
                152
            ],
            "paleturquoise": [
                175,
                238,
                238
            ],
            "palevioletred": [
                219,
                112,
                147
            ],
            "papayawhip": [
                255,
                239,
                213
            ],
            "peachpuff": [
                255,
                218,
                185
            ],
            "peru": [
                205,
                133,
                63
            ],
            "pink": [
                255,
                192,
                203
            ],
            "plum": [
                221,
                160,
                221
            ],
            "powderblue": [
                176,
                224,
                230
            ],
            "purple": [
                128,
                0,
                128
            ],
            "rebeccapurple": [
                102,
                51,
                153
            ],
            "red": [
                255,
                0,
                0
            ],
            "rosybrown": [
                188,
                143,
                143
            ],
            "royalblue": [
                65,
                105,
                225
            ],
            "saddlebrown": [
                139,
                69,
                19
            ],
            "salmon": [
                250,
                128,
                114
            ],
            "sandybrown": [
                244,
                164,
                96
            ],
            "seagreen": [
                46,
                139,
                87
            ],
            "seashell": [
                255,
                245,
                238
            ],
            "sienna": [
                160,
                82,
                45
            ],
            "silver": [
                192,
                192,
                192
            ],
            "skyblue": [
                135,
                206,
                235
            ],
            "slateblue": [
                106,
                90,
                205
            ],
            "slategray": [
                112,
                128,
                144
            ],
            "slategrey": [
                112,
                128,
                144
            ],
            "snow": [
                255,
                250,
                250
            ],
            "springgreen": [
                0,
                255,
                127
            ],
            "steelblue": [
                70,
                130,
                180
            ],
            "tan": [
                210,
                180,
                140
            ],
            "teal": [
                0,
                128,
                128
            ],
            "thistle": [
                216,
                191,
                216
            ],
            "tomato": [
                255,
                99,
                71
            ],
            "turquoise": [
                64,
                224,
                208
            ],
            "violet": [
                238,
                130,
                238
            ],
            "wheat": [
                245,
                222,
                179
            ],
            "white": [
                255,
                255,
                255
            ],
            "whitesmoke": [
                245,
                245,
                245
            ],
            "yellow": [
                255,
                255,
                0
            ],
            "yellowgreen": [
                154,
                205,
                50
            ]
        };
    }
});
// node_modules/simple-swizzle/node_modules/is-arrayish/index.js
var require_is_arrayish = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/simple-swizzle/node_modules/is-arrayish/index.js" (exports, module) {
        module.exports = function isArrayish(obj) {
            if (!obj || typeof obj === "string") return false;
            return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
        };
    }
});
// node_modules/simple-swizzle/index.js
var require_simple_swizzle = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/simple-swizzle/index.js" (exports, module) {
        var isArrayish = require_is_arrayish();
        var concat = Array.prototype.concat;
        var slice = Array.prototype.slice;
        var swizzle = module.exports = function swizzle2(args) {
            var results = [];
            for(var i3 = 0, len = args.length; i3 < len; i3++){
                var arg = args[i3];
                if (isArrayish(arg)) results = concat.call(results, slice.call(arg));
                else results.push(arg);
            }
            return results;
        };
        swizzle.wrap = function(fn) {
            return function() {
                return fn(swizzle(arguments));
            };
        };
    }
});
// node_modules/color-string/index.js
var require_color_string = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color-string/index.js" (exports, module) {
        var colorNames = require_color_name();
        var swizzle = require_simple_swizzle();
        var hasOwnProperty = Object.hasOwnProperty;
        var reverseNames = {
        };
        for(name in colorNames)if (hasOwnProperty.call(colorNames, name)) reverseNames[colorNames[name]] = name;
        var name;
        var cs = module.exports = {
            to: {
            },
            get: {
            }
        };
        cs.get = function(string) {
            var prefix = string.substring(0, 3).toLowerCase();
            var val;
            var model;
            switch(prefix){
                case "hsl":
                    val = cs.get.hsl(string);
                    model = "hsl";
                    break;
                case "hwb":
                    val = cs.get.hwb(string);
                    model = "hwb";
                    break;
                default:
                    val = cs.get.rgb(string);
                    model = "rgb";
                    break;
            }
            if (!val) return null;
            return {
                model,
                value: val
            };
        };
        cs.get.rgb = function(string) {
            if (!string) return null;
            var abbr = /^#([a-f0-9]{3,4})$/i;
            var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
            var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
            var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
            var keyword = /^(\w+)$/;
            var rgb = [
                0,
                0,
                0,
                1
            ];
            var match;
            var i3;
            var hexAlpha;
            if (match = string.match(hex)) {
                hexAlpha = match[2];
                match = match[1];
                for(i3 = 0; i3 < 3; i3++){
                    var i22 = i3 * 2;
                    rgb[i3] = parseInt(match.slice(i22, i22 + 2), 16);
                }
                if (hexAlpha) rgb[3] = parseInt(hexAlpha, 16) / 255;
            } else if (match = string.match(abbr)) {
                match = match[1];
                hexAlpha = match[3];
                for(i3 = 0; i3 < 3; i3++)rgb[i3] = parseInt(match[i3] + match[i3], 16);
                if (hexAlpha) rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
            } else if (match = string.match(rgba)) {
                for(i3 = 0; i3 < 3; i3++)rgb[i3] = parseInt(match[i3 + 1], 0);
                if (match[4]) {
                    if (match[5]) rgb[3] = parseFloat(match[4]) * 0.01;
                    else rgb[3] = parseFloat(match[4]);
                }
            } else if (match = string.match(per)) {
                for(i3 = 0; i3 < 3; i3++)rgb[i3] = Math.round(parseFloat(match[i3 + 1]) * 2.55);
                if (match[4]) {
                    if (match[5]) rgb[3] = parseFloat(match[4]) * 0.01;
                    else rgb[3] = parseFloat(match[4]);
                }
            } else if (match = string.match(keyword)) {
                if (match[1] === "transparent") return [
                    0,
                    0,
                    0,
                    0
                ];
                if (!hasOwnProperty.call(colorNames, match[1])) return null;
                rgb = colorNames[match[1]];
                rgb[3] = 1;
                return rgb;
            } else return null;
            for(i3 = 0; i3 < 3; i3++)rgb[i3] = clamp2(rgb[i3], 0, 255);
            rgb[3] = clamp2(rgb[3], 0, 1);
            return rgb;
        };
        cs.get.hsl = function(string) {
            if (!string) return null;
            var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
            var match = string.match(hsl);
            if (match) {
                var alpha = parseFloat(match[4]);
                var h = (parseFloat(match[1]) % 360 + 360) % 360;
                var s2 = clamp2(parseFloat(match[2]), 0, 100);
                var l3 = clamp2(parseFloat(match[3]), 0, 100);
                var a = clamp2(isNaN(alpha) ? 1 : alpha, 0, 1);
                return [
                    h,
                    s2,
                    l3,
                    a
                ];
            }
            return null;
        };
        cs.get.hwb = function(string) {
            if (!string) return null;
            var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
            var match = string.match(hwb);
            if (match) {
                var alpha = parseFloat(match[4]);
                var h = (parseFloat(match[1]) % 360 + 360) % 360;
                var w = clamp2(parseFloat(match[2]), 0, 100);
                var b = clamp2(parseFloat(match[3]), 0, 100);
                var a = clamp2(isNaN(alpha) ? 1 : alpha, 0, 1);
                return [
                    h,
                    w,
                    b,
                    a
                ];
            }
            return null;
        };
        cs.to.hex = function() {
            var rgba = swizzle(arguments);
            return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
        };
        cs.to.rgb = function() {
            var rgba = swizzle(arguments);
            return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
        };
        cs.to.rgb.percent = function() {
            var rgba = swizzle(arguments);
            var r = Math.round(rgba[0] / 255 * 100);
            var g = Math.round(rgba[1] / 255 * 100);
            var b = Math.round(rgba[2] / 255 * 100);
            return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
        };
        cs.to.hsl = function() {
            var hsla = swizzle(arguments);
            return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
        };
        cs.to.hwb = function() {
            var hwba = swizzle(arguments);
            var a = "";
            if (hwba.length >= 4 && hwba[3] !== 1) a = ", " + hwba[3];
            return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
        };
        cs.to.keyword = function(rgb) {
            return reverseNames[rgb.slice(0, 3)];
        };
        function clamp2(num, min, max) {
            return Math.min(Math.max(min, num), max);
        }
        function hexDouble(num) {
            var str = Math.round(num).toString(16).toUpperCase();
            return str.length < 2 ? "0" + str : str;
        }
    }
});
// node_modules/color-convert/conversions.js
var require_conversions = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color-convert/conversions.js" (exports, module) {
        var cssKeywords = require_color_name();
        var reverseKeywords = {
        };
        for (const key of Object.keys(cssKeywords))reverseKeywords[cssKeywords[key]] = key;
        var convert = {
            rgb: {
                channels: 3,
                labels: "rgb"
            },
            hsl: {
                channels: 3,
                labels: "hsl"
            },
            hsv: {
                channels: 3,
                labels: "hsv"
            },
            hwb: {
                channels: 3,
                labels: "hwb"
            },
            cmyk: {
                channels: 4,
                labels: "cmyk"
            },
            xyz: {
                channels: 3,
                labels: "xyz"
            },
            lab: {
                channels: 3,
                labels: "lab"
            },
            lch: {
                channels: 3,
                labels: "lch"
            },
            hex: {
                channels: 1,
                labels: [
                    "hex"
                ]
            },
            keyword: {
                channels: 1,
                labels: [
                    "keyword"
                ]
            },
            ansi16: {
                channels: 1,
                labels: [
                    "ansi16"
                ]
            },
            ansi256: {
                channels: 1,
                labels: [
                    "ansi256"
                ]
            },
            hcg: {
                channels: 3,
                labels: [
                    "h",
                    "c",
                    "g"
                ]
            },
            apple: {
                channels: 3,
                labels: [
                    "r16",
                    "g16",
                    "b16"
                ]
            },
            gray: {
                channels: 1,
                labels: [
                    "gray"
                ]
            }
        };
        module.exports = convert;
        for (const model of Object.keys(convert)){
            if (!("channels" in convert[model])) throw new Error("missing channels property: " + model);
            if (!("labels" in convert[model])) throw new Error("missing channel labels property: " + model);
            if (convert[model].labels.length !== convert[model].channels) throw new Error("channel and label counts mismatch: " + model);
            const { channels , labels  } = convert[model];
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], "channels", {
                value: channels
            });
            Object.defineProperty(convert[model], "labels", {
                value: labels
            });
        }
        convert.rgb.hsl = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const min = Math.min(r, g, b);
            const max = Math.max(r, g, b);
            const delta = max - min;
            let h;
            let s2;
            if (max === min) h = 0;
            else if (r === max) h = (g - b) / delta;
            else if (g === max) h = 2 + (b - r) / delta;
            else if (b === max) h = 4 + (r - g) / delta;
            h = Math.min(h * 60, 360);
            if (h < 0) h += 360;
            const l3 = (min + max) / 2;
            if (max === min) s2 = 0;
            else if (l3 <= 0.5) s2 = delta / (max + min);
            else s2 = delta / (2 - max - min);
            return [
                h,
                s2 * 100,
                l3 * 100
            ];
        };
        convert.rgb.hsv = function(rgb) {
            let rdif;
            let gdif;
            let bdif;
            let h;
            let s2;
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const v = Math.max(r, g, b);
            const diff = v - Math.min(r, g, b);
            const diffc = function(c) {
                return (v - c) / 6 / diff + 0.5;
            };
            if (diff === 0) {
                h = 0;
                s2 = 0;
            } else {
                s2 = diff / v;
                rdif = diffc(r);
                gdif = diffc(g);
                bdif = diffc(b);
                if (r === v) h = bdif - gdif;
                else if (g === v) h = 1 / 3 + rdif - bdif;
                else if (b === v) h = 2 / 3 + gdif - rdif;
                if (h < 0) h += 1;
                else if (h > 1) h -= 1;
            }
            return [
                h * 360,
                s2 * 100,
                v * 100
            ];
        };
        convert.rgb.hwb = function(rgb) {
            const r = rgb[0];
            const g = rgb[1];
            let b = rgb[2];
            const h = convert.rgb.hsl(rgb)[0];
            const w = 1 / 255 * Math.min(r, Math.min(g, b));
            b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
            return [
                h,
                w * 100,
                b * 100
            ];
        };
        convert.rgb.cmyk = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const k = Math.min(1 - r, 1 - g, 1 - b);
            const c = (1 - r - k) / (1 - k) || 0;
            const m = (1 - g - k) / (1 - k) || 0;
            const y = (1 - b - k) / (1 - k) || 0;
            return [
                c * 100,
                m * 100,
                y * 100,
                k * 100
            ];
        };
        function comparativeDistance(x, y) {
            return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
        }
        convert.rgb.keyword = function(rgb) {
            const reversed = reverseKeywords[rgb];
            if (reversed) return reversed;
            let currentClosestDistance = Infinity;
            let currentClosestKeyword;
            for (const keyword of Object.keys(cssKeywords)){
                const value = cssKeywords[keyword];
                const distance = comparativeDistance(rgb, value);
                if (distance < currentClosestDistance) {
                    currentClosestDistance = distance;
                    currentClosestKeyword = keyword;
                }
            }
            return currentClosestKeyword;
        };
        convert.keyword.rgb = function(keyword) {
            return cssKeywords[keyword];
        };
        convert.rgb.xyz = function(rgb) {
            let r = rgb[0] / 255;
            let g = rgb[1] / 255;
            let b = rgb[2] / 255;
            r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
            g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
            b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
            const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
            const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
            const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
            return [
                x * 100,
                y * 100,
                z * 100
            ];
        };
        convert.rgb.lab = function(rgb) {
            const xyz = convert.rgb.xyz(rgb);
            let x = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l3 = 116 * y - 16;
            const a = 500 * (x - y);
            const b = 200 * (y - z);
            return [
                l3,
                a,
                b
            ];
        };
        convert.hsl.rgb = function(hsl) {
            const h = hsl[0] / 360;
            const s2 = hsl[1] / 100;
            const l3 = hsl[2] / 100;
            let t2;
            let t3;
            let val;
            if (s2 === 0) {
                val = l3 * 255;
                return [
                    val,
                    val,
                    val
                ];
            }
            if (l3 < 0.5) t2 = l3 * (1 + s2);
            else t2 = l3 + s2 - l3 * s2;
            const t1 = 2 * l3 - t2;
            const rgb = [
                0,
                0,
                0
            ];
            for(let i3 = 0; i3 < 3; i3++){
                t3 = h + 1 / 3 * -(i3 - 1);
                if (t3 < 0) t3++;
                if (t3 > 1) t3--;
                if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
                else if (2 * t3 < 1) val = t2;
                else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                else val = t1;
                rgb[i3] = val * 255;
            }
            return rgb;
        };
        convert.hsl.hsv = function(hsl) {
            const h = hsl[0];
            let s2 = hsl[1] / 100;
            let l3 = hsl[2] / 100;
            let smin = s2;
            const lmin = Math.max(l3, 0.01);
            l3 *= 2;
            s2 *= l3 <= 1 ? l3 : 2 - l3;
            smin *= lmin <= 1 ? lmin : 2 - lmin;
            const v = (l3 + s2) / 2;
            const sv = l3 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l3 + s2);
            return [
                h,
                sv * 100,
                v * 100
            ];
        };
        convert.hsv.rgb = function(hsv) {
            const h = hsv[0] / 60;
            const s2 = hsv[1] / 100;
            let v = hsv[2] / 100;
            const hi = Math.floor(h) % 6;
            const f = h - Math.floor(h);
            const p = 255 * v * (1 - s2);
            const q = 255 * v * (1 - s2 * f);
            const t2 = 255 * v * (1 - s2 * (1 - f));
            v *= 255;
            switch(hi){
                case 0:
                    return [
                        v,
                        t2,
                        p
                    ];
                case 1:
                    return [
                        q,
                        v,
                        p
                    ];
                case 2:
                    return [
                        p,
                        v,
                        t2
                    ];
                case 3:
                    return [
                        p,
                        q,
                        v
                    ];
                case 4:
                    return [
                        t2,
                        p,
                        v
                    ];
                case 5:
                    return [
                        v,
                        p,
                        q
                    ];
            }
        };
        convert.hsv.hsl = function(hsv) {
            const h = hsv[0];
            const s2 = hsv[1] / 100;
            const v = hsv[2] / 100;
            const vmin = Math.max(v, 0.01);
            let sl;
            let l3;
            l3 = (2 - s2) * v;
            const lmin = (2 - s2) * vmin;
            sl = s2 * vmin;
            sl /= lmin <= 1 ? lmin : 2 - lmin;
            sl = sl || 0;
            l3 /= 2;
            return [
                h,
                sl * 100,
                l3 * 100
            ];
        };
        convert.hwb.rgb = function(hwb) {
            const h = hwb[0] / 360;
            let wh = hwb[1] / 100;
            let bl = hwb[2] / 100;
            const ratio = wh + bl;
            let f;
            if (ratio > 1) {
                wh /= ratio;
                bl /= ratio;
            }
            const i3 = Math.floor(6 * h);
            const v = 1 - bl;
            f = 6 * h - i3;
            if ((i3 & 1) !== 0) f = 1 - f;
            const n2 = wh + f * (v - wh);
            let r;
            let g;
            let b;
            switch(i3){
                default:
                case 6:
                case 0:
                    r = v;
                    g = n2;
                    b = wh;
                    break;
                case 1:
                    r = n2;
                    g = v;
                    b = wh;
                    break;
                case 2:
                    r = wh;
                    g = v;
                    b = n2;
                    break;
                case 3:
                    r = wh;
                    g = n2;
                    b = v;
                    break;
                case 4:
                    r = n2;
                    g = wh;
                    b = v;
                    break;
                case 5:
                    r = v;
                    g = wh;
                    b = n2;
                    break;
            }
            return [
                r * 255,
                g * 255,
                b * 255
            ];
        };
        convert.cmyk.rgb = function(cmyk) {
            const c = cmyk[0] / 100;
            const m = cmyk[1] / 100;
            const y = cmyk[2] / 100;
            const k = cmyk[3] / 100;
            const r = 1 - Math.min(1, c * (1 - k) + k);
            const g = 1 - Math.min(1, m * (1 - k) + k);
            const b = 1 - Math.min(1, y * (1 - k) + k);
            return [
                r * 255,
                g * 255,
                b * 255
            ];
        };
        convert.xyz.rgb = function(xyz) {
            const x = xyz[0] / 100;
            const y = xyz[1] / 100;
            const z = xyz[2] / 100;
            let r;
            let g;
            let b;
            r = x * 3.2406 + y * -1.5372 + z * -0.4986;
            g = x * -0.9689 + y * 1.8758 + z * 0.0415;
            b = x * 0.0557 + y * -0.204 + z * 1.057;
            r = r > 0.0031308 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
            g = g > 0.0031308 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
            b = b > 0.0031308 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [
                r * 255,
                g * 255,
                b * 255
            ];
        };
        convert.xyz.lab = function(xyz) {
            let x = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l3 = 116 * y - 16;
            const a = 500 * (x - y);
            const b = 200 * (y - z);
            return [
                l3,
                a,
                b
            ];
        };
        convert.lab.xyz = function(lab) {
            const l3 = lab[0];
            const a = lab[1];
            const b = lab[2];
            let x;
            let y;
            let z;
            y = (l3 + 16) / 116;
            x = a / 500 + y;
            z = y - b / 200;
            const y2 = y ** 3;
            const x2 = x ** 3;
            const z2 = z ** 3;
            y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
            x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
            z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
            x *= 95.047;
            y *= 100;
            z *= 108.883;
            return [
                x,
                y,
                z
            ];
        };
        convert.lab.lch = function(lab) {
            const l3 = lab[0];
            const a = lab[1];
            const b = lab[2];
            let h;
            const hr = Math.atan2(b, a);
            h = hr * 360 / 2 / Math.PI;
            if (h < 0) h += 360;
            const c = Math.sqrt(a * a + b * b);
            return [
                l3,
                c,
                h
            ];
        };
        convert.lch.lab = function(lch) {
            const l3 = lch[0];
            const c = lch[1];
            const h = lch[2];
            const hr = h / 360 * 2 * Math.PI;
            const a = c * Math.cos(hr);
            const b = c * Math.sin(hr);
            return [
                l3,
                a,
                b
            ];
        };
        convert.rgb.ansi16 = function(args, saturation = null) {
            const [r, g, b] = args;
            let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
            value = Math.round(value / 50);
            if (value === 0) return 30;
            let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
            if (value === 2) ansi += 60;
            return ansi;
        };
        convert.hsv.ansi16 = function(args) {
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function(args) {
            const r = args[0];
            const g = args[1];
            const b = args[2];
            if (r === g && g === b) {
                if (r < 8) return 16;
                if (r > 248) return 231;
                return Math.round((r - 8) / 247 * 24) + 232;
            }
            const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
            return ansi;
        };
        convert.ansi16.rgb = function(args) {
            let color2 = args % 10;
            if (color2 === 0 || color2 === 7) {
                if (args > 50) color2 += 3.5;
                color2 = color2 / 10.5 * 255;
                return [
                    color2,
                    color2,
                    color2
                ];
            }
            const mult = (~~(args > 50) + 1) * 0.5;
            const r = (color2 & 1) * mult * 255;
            const g = (color2 >> 1 & 1) * mult * 255;
            const b = (color2 >> 2 & 1) * mult * 255;
            return [
                r,
                g,
                b
            ];
        };
        convert.ansi256.rgb = function(args) {
            if (args >= 232) {
                const c = (args - 232) * 10 + 8;
                return [
                    c,
                    c,
                    c
                ];
            }
            args -= 16;
            let rem;
            const r = Math.floor(args / 36) / 5 * 255;
            const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
            const b = rem % 6 / 5 * 255;
            return [
                r,
                g,
                b
            ];
        };
        convert.rgb.hex = function(args) {
            const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
            const string = integer.toString(16).toUpperCase();
            return "000000".substring(string.length) + string;
        };
        convert.hex.rgb = function(args) {
            const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
            if (!match) return [
                0,
                0,
                0
            ];
            let colorString = match[0];
            if (match[0].length === 3) colorString = colorString.split("").map((char)=>{
                return char + char;
            }).join("");
            const integer = parseInt(colorString, 16);
            const r = integer >> 16 & 255;
            const g = integer >> 8 & 255;
            const b = integer & 255;
            return [
                r,
                g,
                b
            ];
        };
        convert.rgb.hcg = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const max = Math.max(Math.max(r, g), b);
            const min = Math.min(Math.min(r, g), b);
            const chroma = max - min;
            let grayscale;
            let hue;
            if (chroma < 1) grayscale = min / (1 - chroma);
            else grayscale = 0;
            if (chroma <= 0) hue = 0;
            else if (max === r) hue = (g - b) / chroma % 6;
            else if (max === g) hue = 2 + (b - r) / chroma;
            else hue = 4 + (r - g) / chroma;
            hue /= 6;
            hue %= 1;
            return [
                hue * 360,
                chroma * 100,
                grayscale * 100
            ];
        };
        convert.hsl.hcg = function(hsl) {
            const s2 = hsl[1] / 100;
            const l3 = hsl[2] / 100;
            const c = l3 < 0.5 ? 2 * s2 * l3 : 2 * s2 * (1 - l3);
            let f = 0;
            if (c < 1) f = (l3 - 0.5 * c) / (1 - c);
            return [
                hsl[0],
                c * 100,
                f * 100
            ];
        };
        convert.hsv.hcg = function(hsv) {
            const s2 = hsv[1] / 100;
            const v = hsv[2] / 100;
            const c = s2 * v;
            let f = 0;
            if (c < 1) f = (v - c) / (1 - c);
            return [
                hsv[0],
                c * 100,
                f * 100
            ];
        };
        convert.hcg.rgb = function(hcg) {
            const h = hcg[0] / 360;
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            if (c === 0) return [
                g * 255,
                g * 255,
                g * 255
            ];
            const pure = [
                0,
                0,
                0
            ];
            const hi = h % 1 * 6;
            const v = hi % 1;
            const w = 1 - v;
            let mg = 0;
            switch(Math.floor(hi)){
                case 0:
                    pure[0] = 1;
                    pure[1] = v;
                    pure[2] = 0;
                    break;
                case 1:
                    pure[0] = w;
                    pure[1] = 1;
                    pure[2] = 0;
                    break;
                case 2:
                    pure[0] = 0;
                    pure[1] = 1;
                    pure[2] = v;
                    break;
                case 3:
                    pure[0] = 0;
                    pure[1] = w;
                    pure[2] = 1;
                    break;
                case 4:
                    pure[0] = v;
                    pure[1] = 0;
                    pure[2] = 1;
                    break;
                default:
                    pure[0] = 1;
                    pure[1] = 0;
                    pure[2] = w;
            }
            mg = (1 - c) * g;
            return [
                (c * pure[0] + mg) * 255,
                (c * pure[1] + mg) * 255,
                (c * pure[2] + mg) * 255
            ];
        };
        convert.hcg.hsv = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1 - c);
            let f = 0;
            if (v > 0) f = c / v;
            return [
                hcg[0],
                f * 100,
                v * 100
            ];
        };
        convert.hcg.hsl = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const l3 = g * (1 - c) + 0.5 * c;
            let s2 = 0;
            if (l3 > 0 && l3 < 0.5) s2 = c / (2 * l3);
            else if (l3 >= 0.5 && l3 < 1) s2 = c / (2 * (1 - l3));
            return [
                hcg[0],
                s2 * 100,
                l3 * 100
            ];
        };
        convert.hcg.hwb = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1 - c);
            return [
                hcg[0],
                (v - c) * 100,
                (1 - v) * 100
            ];
        };
        convert.hwb.hcg = function(hwb) {
            const w = hwb[1] / 100;
            const b = hwb[2] / 100;
            const v = 1 - b;
            const c = v - w;
            let g = 0;
            if (c < 1) g = (v - c) / (1 - c);
            return [
                hwb[0],
                c * 100,
                g * 100
            ];
        };
        convert.apple.rgb = function(apple) {
            return [
                apple[0] / 65535 * 255,
                apple[1] / 65535 * 255,
                apple[2] / 65535 * 255
            ];
        };
        convert.rgb.apple = function(rgb) {
            return [
                rgb[0] / 255 * 65535,
                rgb[1] / 255 * 65535,
                rgb[2] / 255 * 65535
            ];
        };
        convert.gray.rgb = function(args) {
            return [
                args[0] / 100 * 255,
                args[0] / 100 * 255,
                args[0] / 100 * 255
            ];
        };
        convert.gray.hsl = function(args) {
            return [
                0,
                0,
                args[0]
            ];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function(gray) {
            return [
                0,
                100,
                gray[0]
            ];
        };
        convert.gray.cmyk = function(gray) {
            return [
                0,
                0,
                0,
                gray[0]
            ];
        };
        convert.gray.lab = function(gray) {
            return [
                gray[0],
                0,
                0
            ];
        };
        convert.gray.hex = function(gray) {
            const val = Math.round(gray[0] / 100 * 255) & 255;
            const integer = (val << 16) + (val << 8) + val;
            const string = integer.toString(16).toUpperCase();
            return "000000".substring(string.length) + string;
        };
        convert.rgb.gray = function(rgb) {
            const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
            return [
                val / 255 * 100
            ];
        };
    }
});
// node_modules/color-convert/route.js
var require_route = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color-convert/route.js" (exports, module) {
        var conversions = require_conversions();
        function buildGraph() {
            const graph = {
            };
            const models = Object.keys(conversions);
            for(let len = models.length, i3 = 0; i3 < len; i3++)graph[models[i3]] = {
                distance: -1,
                parent: null
            };
            return graph;
        }
        function deriveBFS(fromModel) {
            const graph = buildGraph();
            const queue = [
                fromModel
            ];
            graph[fromModel].distance = 0;
            while(queue.length){
                const current = queue.pop();
                const adjacents = Object.keys(conversions[current]);
                for(let len = adjacents.length, i3 = 0; i3 < len; i3++){
                    const adjacent = adjacents[i3];
                    const node = graph[adjacent];
                    if (node.distance === -1) {
                        node.distance = graph[current].distance + 1;
                        node.parent = current;
                        queue.unshift(adjacent);
                    }
                }
            }
            return graph;
        }
        function link(from, to) {
            return function(args) {
                return to(from(args));
            };
        }
        function wrapConversion(toModel, graph) {
            const path = [
                graph[toModel].parent,
                toModel
            ];
            let fn = conversions[graph[toModel].parent][toModel];
            let cur = graph[toModel].parent;
            while(graph[cur].parent){
                path.unshift(graph[cur].parent);
                fn = link(conversions[graph[cur].parent][cur], fn);
                cur = graph[cur].parent;
            }
            fn.conversion = path;
            return fn;
        }
        module.exports = function(fromModel) {
            const graph = deriveBFS(fromModel);
            const conversion = {
            };
            const models = Object.keys(graph);
            for(let len = models.length, i3 = 0; i3 < len; i3++){
                const toModel = models[i3];
                const node = graph[toModel];
                if (node.parent === null) continue;
                conversion[toModel] = wrapConversion(toModel, graph);
            }
            return conversion;
        };
    }
});
// node_modules/color-convert/index.js
var require_color_convert = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color-convert/index.js" (exports, module) {
        var conversions = require_conversions();
        var route = require_route();
        var convert = {
        };
        var models = Object.keys(conversions);
        function wrapRaw(fn) {
            const wrappedFn = function(...args) {
                const arg0 = args[0];
                if (arg0 === void 0 || arg0 === null) return arg0;
                if (arg0.length > 1) args = arg0;
                return fn(args);
            };
            if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
            return wrappedFn;
        }
        function wrapRounded(fn) {
            const wrappedFn = function(...args) {
                const arg0 = args[0];
                if (arg0 === void 0 || arg0 === null) return arg0;
                if (arg0.length > 1) args = arg0;
                const result = fn(args);
                if (typeof result === "object") for(let len = result.length, i3 = 0; i3 < len; i3++)result[i3] = Math.round(result[i3]);
                return result;
            };
            if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
            return wrappedFn;
        }
        models.forEach((fromModel)=>{
            convert[fromModel] = {
            };
            Object.defineProperty(convert[fromModel], "channels", {
                value: conversions[fromModel].channels
            });
            Object.defineProperty(convert[fromModel], "labels", {
                value: conversions[fromModel].labels
            });
            const routes = route(fromModel);
            const routeModels = Object.keys(routes);
            routeModels.forEach((toModel)=>{
                const fn = routes[toModel];
                convert[fromModel][toModel] = wrapRounded(fn);
                convert[fromModel][toModel].raw = wrapRaw(fn);
            });
        });
        module.exports = convert;
    }
});
// node_modules/color/index.js
var require_color = _chunk4M3HOXYQJs.__commonJS({
    "node_modules/color/index.js" (exports, module) {
        var colorString = require_color_string();
        var convert = require_color_convert();
        var _slice = [].slice;
        var skippedModels = [
            "keyword",
            "gray",
            "hex"
        ];
        var hashedModelKeys = {
        };
        for (const model2 of Object.keys(convert))hashedModelKeys[_slice.call(convert[model2].labels).sort().join("")] = model2;
        var limiters = {
        };
        function Color(object, model) {
            if (!(this instanceof Color)) return new Color(object, model);
            if (model && model in skippedModels) model = null;
            if (model && !(model in convert)) throw new Error("Unknown model: " + model);
            let i3;
            let channels;
            if (object == null) {
                this.model = "rgb";
                this.color = [
                    0,
                    0,
                    0
                ];
                this.valpha = 1;
            } else if (object instanceof Color) {
                this.model = object.model;
                this.color = object.color.slice();
                this.valpha = object.valpha;
            } else if (typeof object === "string") {
                const result = colorString.get(object);
                if (result === null) throw new Error("Unable to parse color from string: " + object);
                this.model = result.model;
                channels = convert[this.model].channels;
                this.color = result.value.slice(0, channels);
                this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
            } else if (object.length > 0) {
                this.model = model || "rgb";
                channels = convert[this.model].channels;
                const newArray = _slice.call(object, 0, channels);
                this.color = zeroArray(newArray, channels);
                this.valpha = typeof object[channels] === "number" ? object[channels] : 1;
            } else if (typeof object === "number") {
                this.model = "rgb";
                this.color = [
                    object >> 16 & 255,
                    object >> 8 & 255,
                    object & 255
                ];
                this.valpha = 1;
            } else {
                this.valpha = 1;
                const keys = Object.keys(object);
                if ("alpha" in object) {
                    keys.splice(keys.indexOf("alpha"), 1);
                    this.valpha = typeof object.alpha === "number" ? object.alpha : 0;
                }
                const hashedKeys = keys.sort().join("");
                if (!(hashedKeys in hashedModelKeys)) throw new Error("Unable to parse color from object: " + JSON.stringify(object));
                this.model = hashedModelKeys[hashedKeys];
                const labels = convert[this.model].labels;
                const color2 = [];
                for(i3 = 0; i3 < labels.length; i3++)color2.push(object[labels[i3]]);
                this.color = zeroArray(color2);
            }
            if (limiters[this.model]) {
                channels = convert[this.model].channels;
                for(i3 = 0; i3 < channels; i3++){
                    const limit = limiters[this.model][i3];
                    if (limit) this.color[i3] = limit(this.color[i3]);
                }
            }
            this.valpha = Math.max(0, Math.min(1, this.valpha));
            if (Object.freeze) Object.freeze(this);
        }
        Color.prototype = {
            toString () {
                return this.string();
            },
            toJSON () {
                return this[this.model]();
            },
            string (places) {
                let self = this.model in colorString.to ? this : this.rgb();
                self = self.round(typeof places === "number" ? places : 1);
                const args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
                return colorString.to[self.model](args);
            },
            percentString (places) {
                const self = this.rgb().round(typeof places === "number" ? places : 1);
                const args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
                return colorString.to.rgb.percent(args);
            },
            array () {
                return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
            },
            object () {
                const result = {
                };
                const channels = convert[this.model].channels;
                const labels = convert[this.model].labels;
                for(let i3 = 0; i3 < channels; i3++)result[labels[i3]] = this.color[i3];
                if (this.valpha !== 1) result.alpha = this.valpha;
                return result;
            },
            unitArray () {
                const rgb = this.rgb().color;
                rgb[0] /= 255;
                rgb[1] /= 255;
                rgb[2] /= 255;
                if (this.valpha !== 1) rgb.push(this.valpha);
                return rgb;
            },
            unitObject () {
                const rgb = this.rgb().object();
                rgb.r /= 255;
                rgb.g /= 255;
                rgb.b /= 255;
                if (this.valpha !== 1) rgb.alpha = this.valpha;
                return rgb;
            },
            round (places) {
                places = Math.max(places || 0, 0);
                return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
            },
            alpha (value) {
                if (arguments.length > 0) return new Color(this.color.concat(Math.max(0, Math.min(1, value))), this.model);
                return this.valpha;
            },
            red: getset("rgb", 0, maxfn(255)),
            green: getset("rgb", 1, maxfn(255)),
            blue: getset("rgb", 2, maxfn(255)),
            hue: getset([
                "hsl",
                "hsv",
                "hsl",
                "hwb",
                "hcg"
            ], 0, (value)=>(value % 360 + 360) % 360
            ),
            saturationl: getset("hsl", 1, maxfn(100)),
            lightness: getset("hsl", 2, maxfn(100)),
            saturationv: getset("hsv", 1, maxfn(100)),
            value: getset("hsv", 2, maxfn(100)),
            chroma: getset("hcg", 1, maxfn(100)),
            gray: getset("hcg", 2, maxfn(100)),
            white: getset("hwb", 1, maxfn(100)),
            wblack: getset("hwb", 2, maxfn(100)),
            cyan: getset("cmyk", 0, maxfn(100)),
            magenta: getset("cmyk", 1, maxfn(100)),
            yellow: getset("cmyk", 2, maxfn(100)),
            black: getset("cmyk", 3, maxfn(100)),
            x: getset("xyz", 0, maxfn(100)),
            y: getset("xyz", 1, maxfn(100)),
            z: getset("xyz", 2, maxfn(100)),
            l: getset("lab", 0, maxfn(100)),
            a: getset("lab", 1),
            b: getset("lab", 2),
            keyword (value) {
                if (arguments.length > 0) return new Color(value);
                return convert[this.model].keyword(this.color);
            },
            hex (value) {
                if (arguments.length > 0) return new Color(value);
                return colorString.to.hex(this.rgb().round().color);
            },
            rgbNumber () {
                const rgb = this.rgb().color;
                return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
            },
            luminosity () {
                const rgb = this.rgb().color;
                const lum = [];
                for (const [i3, element] of rgb.entries()){
                    const chan = element / 255;
                    lum[i3] = chan <= 0.03928 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
                }
                return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
            },
            contrast (color2) {
                const lum1 = this.luminosity();
                const lum2 = color2.luminosity();
                if (lum1 > lum2) return (lum1 + 0.05) / (lum2 + 0.05);
                return (lum2 + 0.05) / (lum1 + 0.05);
            },
            level (color2) {
                const contrastRatio = this.contrast(color2);
                if (contrastRatio >= 7.1) return "AAA";
                return contrastRatio >= 4.5 ? "AA" : "";
            },
            isDark () {
                const rgb = this.rgb().color;
                const yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
                return yiq < 128;
            },
            isLight () {
                return !this.isDark();
            },
            negate () {
                const rgb = this.rgb();
                for(let i3 = 0; i3 < 3; i3++)rgb.color[i3] = 255 - rgb.color[i3];
                return rgb;
            },
            lighten (ratio) {
                const hsl = this.hsl();
                hsl.color[2] += hsl.color[2] * ratio;
                return hsl;
            },
            darken (ratio) {
                const hsl = this.hsl();
                hsl.color[2] -= hsl.color[2] * ratio;
                return hsl;
            },
            saturate (ratio) {
                const hsl = this.hsl();
                hsl.color[1] += hsl.color[1] * ratio;
                return hsl;
            },
            desaturate (ratio) {
                const hsl = this.hsl();
                hsl.color[1] -= hsl.color[1] * ratio;
                return hsl;
            },
            whiten (ratio) {
                const hwb = this.hwb();
                hwb.color[1] += hwb.color[1] * ratio;
                return hwb;
            },
            blacken (ratio) {
                const hwb = this.hwb();
                hwb.color[2] += hwb.color[2] * ratio;
                return hwb;
            },
            grayscale () {
                const rgb = this.rgb().color;
                const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
                return Color.rgb(value, value, value);
            },
            fade (ratio) {
                return this.alpha(this.valpha - this.valpha * ratio);
            },
            opaquer (ratio) {
                return this.alpha(this.valpha + this.valpha * ratio);
            },
            rotate (degrees) {
                const hsl = this.hsl();
                let hue = hsl.color[0];
                hue = (hue + degrees) % 360;
                hue = hue < 0 ? 360 + hue : hue;
                hsl.color[0] = hue;
                return hsl;
            },
            mix (mixinColor, weight) {
                if (!mixinColor || !mixinColor.rgb) throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
                const color1 = mixinColor.rgb();
                const color2 = this.rgb();
                const p = weight === void 0 ? 0.5 : weight;
                const w = 2 * p - 1;
                const a = color1.alpha() - color2.alpha();
                const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
                const w2 = 1 - w1;
                return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
            }
        };
        for (const model1 of Object.keys(convert)){
            if (skippedModels.includes(model1)) continue;
            const channels = convert[model1].channels;
            Color.prototype[model1] = function() {
                if (this.model === model1) return new Color(this);
                if (arguments.length > 0) return new Color(arguments, model1);
                const newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
                return new Color(assertArray(convert[this.model][model1].raw(this.color)).concat(newAlpha), model1);
            };
            Color[model1] = function(color2) {
                if (typeof color2 === "number") color2 = zeroArray(_slice.call(arguments), channels);
                return new Color(color2, model1);
            };
        }
        function roundTo(number, places) {
            return Number(number.toFixed(places));
        }
        function roundToPlace(places) {
            return function(number) {
                return roundTo(number, places);
            };
        }
        function getset(model, channel, modifier) {
            model = Array.isArray(model) ? model : [
                model
            ];
            for (const m of model)(limiters[m] || (limiters[m] = []))[channel] = modifier;
            model = model[0];
            return function(value) {
                let result;
                if (arguments.length > 0) {
                    if (modifier) value = modifier(value);
                    result = this[model]();
                    result.color[channel] = value;
                    return result;
                }
                result = this[model]().color[channel];
                if (modifier) result = modifier(result);
                return result;
            };
        }
        function maxfn(max) {
            return function(v) {
                return Math.max(0, Math.min(max, v));
            };
        }
        function assertArray(value) {
            return Array.isArray(value) ? value : [
                value
            ];
        }
        function zeroArray(array, length) {
            for(let i3 = 0; i3 < length; i3++)if (typeof array[i3] !== "number") array[i3] = 0;
            return array;
        }
        module.exports = Color;
    }
});
// src/components/color-picker/color-picker.ts
var import_color = _chunk4M3HOXYQJs.__toESM(require_color(), 1);
var hasEyeDropper = "EyeDropper" in window;
var SlColorPicker = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.isSafeValue = false;
        this.localize = new _chunkCCTU25PVJs.LocalizeController(this);
        this.inputValue = "";
        this.hue = 0;
        this.saturation = 100;
        this.lightness = 100;
        this.alpha = 100;
        this.value = "#ffffff";
        this.format = "hex";
        this.inline = false;
        this.size = "medium";
        this.noFormatToggle = false;
        this.name = "";
        this.disabled = false;
        this.invalid = false;
        this.hoist = false;
        this.opacity = false;
        this.uppercase = false;
        this.swatches = [
            "#d0021b",
            "#f5a623",
            "#f8e71c",
            "#8b572a",
            "#7ed321",
            "#417505",
            "#bd10e0",
            "#9013fe",
            "#4a90e2",
            "#50e3c2",
            "#b8e986",
            "#000",
            "#444",
            "#888",
            "#ccc",
            "#fff"
        ];
    }
    firstUpdated() {
        if (!this.setColor(this.value)) this.setColor(`#ffff`);
        this.inputValue = this.value;
        this.lastValueEmitted = this.value;
        this.syncValues();
    }
    getFormattedValue(format = "hex") {
        const currentColor = this.parseColor(`hsla(${this.hue}, ${this.saturation}%, ${this.lightness}%, ${this.alpha / 100})`);
        if (!currentColor) return "";
        switch(format){
            case "hex":
                return currentColor.hex;
            case "hexa":
                return currentColor.hexa;
            case "rgb":
                return currentColor.rgb.string;
            case "rgba":
                return currentColor.rgba.string;
            case "hsl":
                return currentColor.hsl.string;
            case "hsla":
                return currentColor.hsla.string;
            default:
                return "";
        }
    }
    reportValidity() {
        if (!this.inline && this.input.invalid) return new Promise((resolve)=>{
            this.dropdown.addEventListener("sl-after-show", ()=>{
                this.input.reportValidity();
                resolve();
            }, {
                once: true
            });
            this.dropdown.show();
        });
        else return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = this.input.invalid;
    }
    handleCopy() {
        this.input.select();
        document.execCommand("copy");
        this.previewButton.focus();
        this.previewButton.classList.add("color-picker__preview-color--copied");
        this.previewButton.addEventListener("animationend", ()=>this.previewButton.classList.remove("color-picker__preview-color--copied")
        );
    }
    handleFormatToggle() {
        const formats = [
            "hex",
            "rgb",
            "hsl"
        ];
        const nextIndex = (formats.indexOf(this.format) + 1) % formats.length;
        this.format = formats[nextIndex];
    }
    handleAlphaDrag(event) {
        const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__alpha");
        const handle = container.querySelector(".color-picker__slider-handle");
        const { width  } = container.getBoundingClientRect();
        handle.focus();
        event.preventDefault();
        this.handleDrag(event, container, (x)=>{
            this.alpha = _chunkT56CG5BMJs.clamp(x / width * 100, 0, 100);
            this.syncValues();
        });
    }
    handleHueDrag(event) {
        const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__hue");
        const handle = container.querySelector(".color-picker__slider-handle");
        const { width  } = container.getBoundingClientRect();
        handle.focus();
        event.preventDefault();
        this.handleDrag(event, container, (x)=>{
            this.hue = _chunkT56CG5BMJs.clamp(x / width * 360, 0, 360);
            this.syncValues();
        });
    }
    handleGridDrag(event) {
        const grid = this.shadowRoot.querySelector(".color-picker__grid");
        const handle = grid.querySelector(".color-picker__grid-handle");
        const { width , height  } = grid.getBoundingClientRect();
        handle.focus();
        event.preventDefault();
        this.handleDrag(event, grid, (x, y)=>{
            this.saturation = _chunkT56CG5BMJs.clamp(x / width * 100, 0, 100);
            this.lightness = _chunkT56CG5BMJs.clamp(100 - y / height * 100, 0, 100);
            this.syncValues();
        });
    }
    handleDrag(event, container, onMove) {
        if (this.disabled) return;
        const move = (event2)=>{
            const dims = container.getBoundingClientRect();
            const defaultView = container.ownerDocument.defaultView;
            const offsetX = dims.left + defaultView.pageXOffset;
            const offsetY = dims.top + defaultView.pageYOffset;
            const x = (event2.changedTouches ? event2.changedTouches[0].pageX : event2.pageX) - offsetX;
            const y = (event2.changedTouches ? event2.changedTouches[0].pageY : event2.pageY) - offsetY;
            onMove(x, y);
        };
        move(event);
        const stop = ()=>{
            document.removeEventListener("mousemove", move);
            document.removeEventListener("touchmove", move);
            document.removeEventListener("mouseup", stop);
            document.removeEventListener("touchend", stop);
        };
        document.addEventListener("mousemove", move);
        document.addEventListener("touchmove", move);
        document.addEventListener("mouseup", stop);
        document.addEventListener("touchend", stop);
    }
    handleAlphaKeyDown(event) {
        const increment = event.shiftKey ? 10 : 1;
        if (event.key === "ArrowLeft") {
            event.preventDefault();
            this.alpha = _chunkT56CG5BMJs.clamp(this.alpha - increment, 0, 100);
            this.syncValues();
        }
        if (event.key === "ArrowRight") {
            event.preventDefault();
            this.alpha = _chunkT56CG5BMJs.clamp(this.alpha + increment, 0, 100);
            this.syncValues();
        }
        if (event.key === "Home") {
            event.preventDefault();
            this.alpha = 0;
            this.syncValues();
        }
        if (event.key === "End") {
            event.preventDefault();
            this.alpha = 100;
            this.syncValues();
        }
    }
    handleHueKeyDown(event) {
        const increment = event.shiftKey ? 10 : 1;
        if (event.key === "ArrowLeft") {
            event.preventDefault();
            this.hue = _chunkT56CG5BMJs.clamp(this.hue - increment, 0, 360);
            this.syncValues();
        }
        if (event.key === "ArrowRight") {
            event.preventDefault();
            this.hue = _chunkT56CG5BMJs.clamp(this.hue + increment, 0, 360);
            this.syncValues();
        }
        if (event.key === "Home") {
            event.preventDefault();
            this.hue = 0;
            this.syncValues();
        }
        if (event.key === "End") {
            event.preventDefault();
            this.hue = 360;
            this.syncValues();
        }
    }
    handleGridKeyDown(event) {
        const increment = event.shiftKey ? 10 : 1;
        if (event.key === "ArrowLeft") {
            event.preventDefault();
            this.saturation = _chunkT56CG5BMJs.clamp(this.saturation - increment, 0, 100);
            this.syncValues();
        }
        if (event.key === "ArrowRight") {
            event.preventDefault();
            this.saturation = _chunkT56CG5BMJs.clamp(this.saturation + increment, 0, 100);
            this.syncValues();
        }
        if (event.key === "ArrowUp") {
            event.preventDefault();
            this.lightness = _chunkT56CG5BMJs.clamp(this.lightness + increment, 0, 100);
            this.syncValues();
        }
        if (event.key === "ArrowDown") {
            event.preventDefault();
            this.lightness = _chunkT56CG5BMJs.clamp(this.lightness - increment, 0, 100);
            this.syncValues();
        }
    }
    handleInputChange(event) {
        const target = event.target;
        this.setColor(target.value);
        target.value = this.value;
        event.stopPropagation();
    }
    handleInputKeyDown(event) {
        if (event.key === "Enter") {
            this.setColor(this.input.value);
            this.input.value = this.value;
            setTimeout(()=>this.input.select()
            );
        }
    }
    normalizeColorString(colorString) {
        if (/rgba?/i.test(colorString)) {
            const rgba = colorString.replace(/[^\d.%]/g, " ").split(" ").map((val)=>val.trim()
            ).filter((val)=>val.length
            );
            if (rgba.length < 4) rgba[3] = "1";
            if (rgba[3].indexOf("%") > -1) rgba[3] = (Number(rgba[3].replace(/%/g, "")) / 100).toString();
            return `rgba(${rgba[0]}, ${rgba[1]}, ${rgba[2]}, ${rgba[3]})`;
        }
        if (/hsla?/i.test(colorString)) {
            const hsla = colorString.replace(/[^\d.%]/g, " ").split(" ").map((val)=>val.trim()
            ).filter((val)=>val.length
            );
            if (hsla.length < 4) hsla[3] = "1";
            if (hsla[3].indexOf("%") > -1) hsla[3] = (Number(hsla[3].replace(/%/g, "")) / 100).toString();
            return `hsla(${hsla[0]}, ${hsla[1]}, ${hsla[2]}, ${hsla[3]})`;
        }
        if (/^[0-9a-f]+$/i.test(colorString)) return `#${colorString}`;
        return colorString;
    }
    parseColor(colorString) {
        function toHex(value) {
            const hex2 = Math.round(value).toString(16);
            return hex2.length === 1 ? `0${hex2}` : hex2;
        }
        let parsed;
        colorString = this.normalizeColorString(colorString);
        try {
            parsed = (0, import_color.default)(colorString);
        } catch (e2) {
            return false;
        }
        const hsl = {
            h: parsed.hsl().color[0],
            s: parsed.hsl().color[1],
            l: parsed.hsl().color[2],
            a: parsed.hsl().valpha
        };
        const rgb = {
            r: parsed.rgb().color[0],
            g: parsed.rgb().color[1],
            b: parsed.rgb().color[2],
            a: parsed.rgb().valpha
        };
        const hex = {
            r: toHex(parsed.rgb().color[0]),
            g: toHex(parsed.rgb().color[1]),
            b: toHex(parsed.rgb().color[2]),
            a: toHex(parsed.rgb().valpha * 255)
        };
        return {
            hsl: {
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                string: this.setLetterCase(`hsl(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%)`)
            },
            hsla: {
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                a: hsl.a,
                string: this.setLetterCase(`hsla(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%, ${Number(hsl.a.toFixed(2).toString())})`)
            },
            rgb: {
                r: rgb.r,
                g: rgb.g,
                b: rgb.b,
                string: this.setLetterCase(`rgb(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)})`)
            },
            rgba: {
                r: rgb.r,
                g: rgb.g,
                b: rgb.b,
                a: rgb.a,
                string: this.setLetterCase(`rgba(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)}, ${Number(rgb.a.toFixed(2).toString())})`)
            },
            hex: this.setLetterCase(`#${hex.r}${hex.g}${hex.b}`),
            hexa: this.setLetterCase(`#${hex.r}${hex.g}${hex.b}${hex.a}`)
        };
    }
    setColor(colorString) {
        const newColor = this.parseColor(colorString);
        if (!newColor) return false;
        this.hue = newColor.hsla.h;
        this.saturation = newColor.hsla.s;
        this.lightness = newColor.hsla.l;
        this.alpha = this.opacity ? newColor.hsla.a * 100 : 100;
        this.syncValues();
        return true;
    }
    setLetterCase(string) {
        if (typeof string !== "string") return "";
        return this.uppercase ? string.toUpperCase() : string.toLowerCase();
    }
    async syncValues() {
        const currentColor = this.parseColor(`hsla(${this.hue}, ${this.saturation}%, ${this.lightness}%, ${this.alpha / 100})`);
        if (!currentColor) return;
        if (this.format === "hsl") this.inputValue = this.opacity ? currentColor.hsla.string : currentColor.hsl.string;
        else if (this.format === "rgb") this.inputValue = this.opacity ? currentColor.rgba.string : currentColor.rgb.string;
        else this.inputValue = this.opacity ? currentColor.hexa : currentColor.hex;
        this.isSafeValue = true;
        this.value = this.inputValue;
        await this.updateComplete;
        this.isSafeValue = false;
    }
    handleAfterHide() {
        this.previewButton.classList.remove("color-picker__preview-color--copied");
    }
    handleEyeDropper() {
        if (!hasEyeDropper) return;
        const eyeDropper = new EyeDropper();
        eyeDropper.open().then((colorSelectionResult)=>this.setColor(colorSelectionResult.sRGBHex)
        ).catch(()=>{
        });
    }
    handleFormatChange() {
        this.syncValues();
    }
    handleOpacityChange() {
        this.alpha = 100;
    }
    handleValueChange(oldValue, newValue) {
        if (!this.isSafeValue) {
            const newColor = this.parseColor(newValue);
            if (newColor) {
                this.inputValue = this.value;
                this.hue = newColor.hsla.h;
                this.saturation = newColor.hsla.s;
                this.lightness = newColor.hsla.l;
                this.alpha = newColor.hsla.a * 100;
            } else this.inputValue = oldValue;
        }
        if (this.value !== this.lastValueEmitted) {
            _chunkI4TE3TJVJs.emit(this, "sl-change");
            this.lastValueEmitted = this.value;
        }
    }
    render() {
        const x = this.saturation;
        const y = 100 - this.lightness;
        const colorPicker = _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "color-picker": true,
            "color-picker--inline": this.inline,
            "color-picker--disabled": this.disabled
        })}
        aria-disabled=${this.disabled ? "true" : "false"}
      >
        <div
          part="grid"
          class="color-picker__grid"
          style=${_chunkDIYFVAUNJs.i({
            backgroundColor: `hsl(${this.hue}deg, 100%, 50%)`
        })}
          @mousedown=${this.handleGridDrag}
          @touchstart=${this.handleGridDrag}
        >
          <span
            part="grid-handle"
            class="color-picker__grid-handle"
            style=${_chunkDIYFVAUNJs.i({
            top: `${y}%`,
            left: `${x}%`,
            backgroundColor: `hsla(${this.hue}deg, ${this.saturation}%, ${this.lightness}%)`
        })}
            role="slider"
            aria-label="HSL"
            aria-valuetext=${`hsl(${Math.round(this.hue)}, ${Math.round(this.saturation)}%, ${Math.round(this.lightness)}%)`}
            tabindex=${_chunkKJOCH52QJs.l(this.disabled ? void 0 : "0")}
            @keydown=${this.handleGridKeyDown}
          ></span>
        </div>

        <div class="color-picker__controls">
          <div class="color-picker__sliders">
            <div
              part="slider hue-slider"
              class="color-picker__hue color-picker__slider"
              @mousedown=${this.handleHueDrag}
              @touchstart=${this.handleHueDrag}
            >
              <span
                part="slider-handle"
                class="color-picker__slider-handle"
                style=${_chunkDIYFVAUNJs.i({
            left: `${this.hue === 0 ? 0 : 100 / (360 / this.hue)}%`
        })}
                role="slider"
                aria-label="hue"
                aria-orientation="horizontal"
                aria-valuemin="0"
                aria-valuemax="360"
                aria-valuenow=${Math.round(this.hue)}
                tabindex=${_chunkKJOCH52QJs.l(this.disabled ? void 0 : "0")}
                @keydown=${this.handleHueKeyDown}
              ></span>
            </div>

            ${this.opacity ? _chunk2VBMOEKGJs.$`
                  <div
                    part="slider opacity-slider"
                    class="color-picker__alpha color-picker__slider color-picker__transparent-bg"
                    @mousedown="${this.handleAlphaDrag}"
                    @touchstart="${this.handleAlphaDrag}"
                  >
                    <div
                      class="color-picker__alpha-gradient"
                      style=${_chunkDIYFVAUNJs.i({
            backgroundImage: `linear-gradient(
                          to right,
                          hsl(${this.hue}deg, ${this.saturation}%, ${this.lightness}%, 0%) 0%,
                          hsl(${this.hue}deg, ${this.saturation}%, ${this.lightness}%) 100%
                        )`
        })}
                    ></div>
                    <span
                      part="slider-handle"
                      class="color-picker__slider-handle"
                      style=${_chunkDIYFVAUNJs.i({
            left: `${this.alpha}%`
        })}
                      role="slider"
                      aria-label="alpha"
                      aria-orientation="horizontal"
                      aria-valuemin="0"
                      aria-valuemax="100"
                      aria-valuenow=${Math.round(this.alpha)}
                      tabindex=${_chunkKJOCH52QJs.l(this.disabled ? void 0 : "0")}
                      @keydown=${this.handleAlphaKeyDown}
                    ></span>
                  </div>
                ` : ""}
          </div>

          <button
            type="button"
            part="preview"
            class="color-picker__preview color-picker__transparent-bg"
            aria-label=${this.localize.term("copy")}
            style=${_chunkDIYFVAUNJs.i({
            "--preview-color": `hsla(${this.hue}deg, ${this.saturation}%, ${this.lightness}%, ${this.alpha / 100})`
        })}
            @click=${this.handleCopy}
          ></button>
        </div>

        <div class="color-picker__user-input">
          <sl-input
            part="input"
            type="text"
            name=${this.name}
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
            .value=${_chunkGPPFFSGRJs.l(this.inputValue)}
            ?disabled=${this.disabled}
            @keydown=${this.handleInputKeyDown}
            @sl-change=${this.handleInputChange}
          ></sl-input>

          <sl-button-group>
            ${!this.noFormatToggle ? _chunk2VBMOEKGJs.$`
                  <sl-button
                    aria-label=${this.localize.term("toggle_color_format")}
                    exportparts="base:format-button"
                    @click=${this.handleFormatToggle}
                  >
                    ${this.setLetterCase(this.format)}
                  </sl-button>
                ` : ""}
            ${hasEyeDropper ? _chunk2VBMOEKGJs.$`
                  <sl-button exportparts="base:eye-dropper-button" @click=${this.handleEyeDropper}>
                    <sl-icon
                      library="system"
                      name="eyedropper"
                      label=${this.localize.term("select_a_color_from_the_screen")}
                    ></sl-icon>
                  </sl-button>
                ` : ""}
          </sl-button-group>
        </div>

        ${this.swatches ? _chunk2VBMOEKGJs.$`
              <div part="swatches" class="color-picker__swatches">
                ${this.swatches.map((swatch)=>{
            return _chunk2VBMOEKGJs.$`
                    <div
                      part="swatch"
                      class="color-picker__swatch color-picker__transparent-bg"
                      tabindex=${_chunkKJOCH52QJs.l(this.disabled ? void 0 : "0")}
                      role="button"
                      aria-label=${swatch}
                      @click=${()=>!this.disabled && this.setColor(swatch)
            }
                      @keydown=${(event)=>!this.disabled && event.key === "Enter" && this.setColor(swatch)
            }
                    >
                      <div class="color-picker__swatch-color" style=${_chunkDIYFVAUNJs.i({
                backgroundColor: swatch
            })}></div>
                    </div>
                  `;
        })}
              </div>
            ` : ""}
      </div>
    `;
        if (this.inline) return colorPicker;
        return _chunk2VBMOEKGJs.$`
      <sl-dropdown
        class="color-dropdown"
        aria-disabled=${this.disabled ? "true" : "false"}
        .containing-element=${this}
        ?disabled=${this.disabled}
        ?hoist=${this.hoist}
        @sl-after-hide=${this.handleAfterHide}
      >
        <button
          part="trigger"
          slot="trigger"
          class=${_chunkW2WMQSCEJs.o({
            "color-dropdown__trigger": true,
            "color-dropdown__trigger--disabled": this.disabled,
            "color-dropdown__trigger--small": this.size === "small",
            "color-dropdown__trigger--medium": this.size === "medium",
            "color-dropdown__trigger--large": this.size === "large",
            "color-picker__transparent-bg": true
        })}
          style=${_chunkDIYFVAUNJs.i({
            color: `hsla(${this.hue}deg, ${this.saturation}%, ${this.lightness}%, ${this.alpha / 100})`
        })}
          type="button"
        ></button>
        ${colorPicker}
      </sl-dropdown>
    `;
    }
};
SlColorPicker.styles = _chunkXGZZXZ23Js.color_picker_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('[part="input"]')
], SlColorPicker.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('[part="preview"]')
], SlColorPicker.prototype, "previewButton", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".color-dropdown")
], SlColorPicker.prototype, "dropdown", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlColorPicker.prototype, "inputValue", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlColorPicker.prototype, "hue", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlColorPicker.prototype, "saturation", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlColorPicker.prototype, "lightness", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlColorPicker.prototype, "alpha", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlColorPicker.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlColorPicker.prototype, "format", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlColorPicker.prototype, "inline", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlColorPicker.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "no-format-toggle",
        type: Boolean
    })
], SlColorPicker.prototype, "noFormatToggle", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlColorPicker.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlColorPicker.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlColorPicker.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlColorPicker.prototype, "hoist", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlColorPicker.prototype, "opacity", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlColorPicker.prototype, "uppercase", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: false
    })
], SlColorPicker.prototype, "swatches", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlColorPicker.prototype, "lang", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("format")
], SlColorPicker.prototype, "handleFormatChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("opacity")
], SlColorPicker.prototype, "handleOpacityChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value")
], SlColorPicker.prototype, "handleValueChange", 1);
SlColorPicker = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-color-picker")
], SlColorPicker);

},{"./chunk.T56CG5BM.js":"5yofy","./chunk.DIYFVAUN.js":"gJHLQ","./chunk.CCTU25PV.js":"dUPzH","./chunk.XGZZXZ23.js":"lWraZ","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWraZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color_picker_styles_default", ()=>color_picker_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/color-picker/color-picker.styles.ts
var color_picker_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --grid-width: 280px;
    --grid-height: 200px;
    --grid-handle-size: 16px;
    --slider-height: 15px;
    --slider-handle-size: 17px;
    --swatch-size: 25px;

    display: inline-block;
  }

  .color-picker {
    width: var(--grid-width);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    color: var(--color);
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    user-select: none;
  }

  .color-picker--inline {
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
  }

  .color-picker__grid {
    position: relative;
    height: var(--grid-height);
    background-image: linear-gradient(
        to bottom,
        hsl(0, 0%, 100%) 0%,
        hsla(0, 0%, 100%, 0) 50%,
        hsla(0, 0%, 0%, 0) 50%,
        hsl(0, 0%, 0%) 100%
      ),
      linear-gradient(to right, hsl(0, 0%, 50%) 0%, hsla(0, 0%, 50%, 0) 100%);
    border-top-left-radius: var(--sl-border-radius-medium);
    border-top-right-radius: var(--sl-border-radius-medium);
    cursor: crosshair;
  }

  .color-picker__grid-handle {
    position: absolute;
    width: var(--grid-handle-size);
    height: var(--grid-handle-size);
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    border: solid 2px white;
    margin-top: calc(var(--grid-handle-size) / -2);
    margin-left: calc(var(--grid-handle-size) / -2);
  }

  .color-picker__grid-handle${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: 0 0 0 1px var(--sl-color-primary-500), var(--sl-focus-ring);
  }

  .color-picker__controls {
    padding: var(--sl-spacing-small);
    display: flex;
    align-items: center;
  }

  .color-picker__sliders {
    flex: 1 1 auto;
  }

  .color-picker__slider {
    position: relative;
    height: var(--slider-height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);
  }

  .color-picker__slider:not(:last-of-type) {
    margin-bottom: var(--sl-spacing-small);
  }

  .color-picker__slider-handle {
    position: absolute;
    top: calc(50% - var(--slider-handle-size) / 2);
    width: var(--slider-handle-size);
    height: var(--slider-handle-size);
    background-color: white;
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    margin-left: calc(var(--slider-handle-size) / -2);
  }

  .color-picker__slider-handle${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: 0 0 0 1px var(--sl-color-primary-500), var(--sl-focus-ring);
  }

  .color-picker__hue {
    background-image: linear-gradient(
      to right,
      rgb(255, 0, 0) 0%,
      rgb(255, 255, 0) 17%,
      rgb(0, 255, 0) 33%,
      rgb(0, 255, 255) 50%,
      rgb(0, 0, 255) 67%,
      rgb(255, 0, 255) 83%,
      rgb(255, 0, 0) 100%
    );
  }

  .color-picker__alpha .color-picker__alpha-gradient {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
  }

  .color-picker__preview {
    flex: 0 0 auto;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: 3.25rem;
    height: 2.25rem;
    border: none;
    border-radius: var(--sl-input-border-radius-medium);
    background: none;
    margin-left: var(--sl-spacing-small);
    cursor: copy;
  }

  .color-picker__preview:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);

    /* We use a custom property in lieu of currentColor because of https://bugs.webkit.org/show_bug.cgi?id=216780 */
    background-color: var(--preview-color);
  }

  .color-picker__preview${_chunkAN2XMPAVJs.focusVisibleSelector} {
    box-shadow: var(--sl-focus-ring);
    outline: none;
  }

  .color-picker__preview-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
  }

  .color-picker__preview-color--copied {
    animation: pulse 0.75s;
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--sl-color-primary-500);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }

  .color-picker__user-input {
    display: flex;
    padding: 0 var(--sl-spacing-small) var(--sl-spacing-small) var(--sl-spacing-small);
  }

  .color-picker__user-input sl-input {
    min-width: 0; /* fix input width in Safari */
    flex: 1 1 auto;
  }

  .color-picker__user-input sl-button-group {
    margin-left: var(--sl-spacing-small);
  }

  .color-picker__user-input sl-button {
    min-width: 3.25rem;
    max-width: 3.25rem;
    font-size: 1rem;
  }

  .color-picker__swatches {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-gap: 0.5rem;
    justify-items: center;
    border-top: solid 1px var(--sl-color-neutral-200);
    padding: var(--sl-spacing-small);
  }

  .color-picker__swatch {
    position: relative;
    width: var(--swatch-size);
    height: var(--swatch-size);
    border-radius: var(--sl-border-radius-small);
  }

  .color-picker__swatch .color-picker__swatch-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
    border-radius: inherit;
    cursor: pointer;
  }

  .color-picker__swatch${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: var(--sl-focus-ring);
  }

  .color-picker__transparent-bg {
    background-image: linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%);
    background-size: 10px 10px;
    background-position: 0 0, 0 0, -5px -5px, 5px 5px;
  }

  .color-picker--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .color-picker--disabled .color-picker__grid,
  .color-picker--disabled .color-picker__grid-handle,
  .color-picker--disabled .color-picker__slider,
  .color-picker--disabled .color-picker__slider-handle,
  .color-picker--disabled .color-picker__preview,
  .color-picker--disabled .color-picker__swatch,
  .color-picker--disabled .color-picker__swatch-color {
    pointer-events: none;
  }

  /*
   * Color dropdown
   */

  .color-dropdown::part(panel) {
    max-height: none;
    overflow: visible;
  }

  .color-dropdown__trigger {
    display: inline-block;
    position: relative;
    background-color: transparent;
    border: none;
    cursor: pointer;
    transition: var(--sl-transition-fast) box-shadow;
  }

  .color-dropdown__trigger.color-dropdown__trigger--small {
    width: var(--sl-input-height-small);
    height: var(--sl-input-height-small);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--medium {
    width: var(--sl-input-height-medium);
    height: var(--sl-input-height-medium);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--large {
    width: var(--sl-input-height-large);
    height: var(--sl-input-height-large);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    background-color: currentColor;
    box-shadow: inset 0 0 0 2px var(--sl-input-border-color), inset 0 0 0 4px var(--sl-color-neutral-0);
    transition: inherit;
  }

  .color-dropdown__trigger${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
  }

  .color-dropdown__trigger${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.color-dropdown__trigger--disabled) {
    box-shadow: var(--sl-focus-ring);
    outline: none;
  }

  .color-dropdown__trigger${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.color-dropdown__trigger--disabled):before {
    box-shadow: inset 0 0 0 1px var(--sl-color-primary-500);
  }

  .color-dropdown__trigger.color-dropdown__trigger--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ovDH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlInput", ()=>SlInput
);
var _chunkA7SZ5Z2OJs = require("./chunk.A7SZ5Z2O.js");
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/input/input.ts
var id = 0;
var SlInput = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "help-text", "label");
        this.inputId = `input-${++id}`;
        this.helpTextId = `input-help-text-${id}`;
        this.labelId = `input-label-${id}`;
        this.hasFocus = false;
        this.isPasswordVisible = false;
        this.type = "text";
        this.size = "medium";
        this.value = "";
        this.filled = false;
        this.pill = false;
        this.helpText = "";
        this.clearable = false;
        this.togglePassword = false;
        this.disabled = false;
        this.readonly = false;
        this.required = false;
        this.invalid = false;
    }
    get valueAsDate() {
        return this.input.valueAsDate;
    }
    set valueAsDate(newValue) {
        this.input.valueAsDate = newValue;
        this.value = this.input.value;
    }
    get valueAsNumber() {
        return this.input.valueAsNumber;
    }
    set valueAsNumber(newValue) {
        this.input.valueAsNumber = newValue;
        this.value = this.input.value;
    }
    firstUpdated() {
        this.invalid = !this.input.checkValidity();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    select() {
        return this.input.select();
    }
    setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
        return this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
    }
    setRangeText(replacement, start, end, selectMode = "preserve") {
        this.input.setRangeText(replacement, start, end, selectMode);
        if (this.value !== this.input.value) {
            this.value = this.input.value;
            _chunkI4TE3TJVJs.emit(this, "sl-input");
            _chunkI4TE3TJVJs.emit(this, "sl-change");
        }
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleChange() {
        this.value = this.input.value;
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    handleClearClick(event) {
        this.value = "";
        _chunkI4TE3TJVJs.emit(this, "sl-clear");
        _chunkI4TE3TJVJs.emit(this, "sl-input");
        _chunkI4TE3TJVJs.emit(this, "sl-change");
        this.input.focus();
        event.stopPropagation();
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleInput() {
        this.value = this.input.value;
        _chunkI4TE3TJVJs.emit(this, "sl-input");
    }
    handleInvalid() {
        this.invalid = true;
    }
    handlePasswordToggle() {
        this.isPasswordVisible = !this.isPasswordVisible;
    }
    handleValueChange() {
        if (this.input) this.invalid = !this.input.checkValidity();
    }
    render() {
        var _a, _b;
        const hasLabelSlot = this.hasSlotController.test("label");
        const hasHelpTextSlot = this.hasSlotController.test("help-text");
        return _chunk4654KI5LJs.renderFormControl({
            inputId: this.inputId,
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpTextId: this.helpTextId,
            helpText: this.helpText,
            hasHelpTextSlot,
            size: this.size
        }, _chunk2VBMOEKGJs.$`
        <div
          part="base"
          class=${_chunkW2WMQSCEJs.o({
            input: true,
            "input--small": this.size === "small",
            "input--medium": this.size === "medium",
            "input--large": this.size === "large",
            "input--pill": this.pill,
            "input--standard": !this.filled,
            "input--filled": this.filled,
            "input--disabled": this.disabled,
            "input--focused": this.hasFocus,
            "input--empty": ((_a = this.value) == null ? void 0 : _a.length) === 0,
            "input--invalid": this.invalid
        })}
        >
          <span part="prefix" class="input__prefix">
            <slot name="prefix"></slot>
          </span>

          <input
            part="input"
            id=${this.inputId}
            class="input__control"
            type=${this.type === "password" && this.isPasswordVisible ? "text" : this.type}
            name=${_chunkKJOCH52QJs.l(this.name)}
            ?disabled=${this.disabled}
            ?readonly=${this.readonly}
            ?required=${this.required}
            placeholder=${_chunkKJOCH52QJs.l(this.placeholder)}
            minlength=${_chunkKJOCH52QJs.l(this.minlength)}
            maxlength=${_chunkKJOCH52QJs.l(this.maxlength)}
            min=${_chunkKJOCH52QJs.l(this.min)}
            max=${_chunkKJOCH52QJs.l(this.max)}
            step=${_chunkKJOCH52QJs.l(this.step)}
            .value=${_chunkGPPFFSGRJs.l(this.value)}
            autocapitalize=${_chunkKJOCH52QJs.l(this.autocapitalize)}
            autocomplete=${_chunkKJOCH52QJs.l(this.autocomplete)}
            autocorrect=${_chunkKJOCH52QJs.l(this.autocorrect)}
            ?autofocus=${this.autofocus}
            spellcheck=${_chunkKJOCH52QJs.l(this.spellcheck)}
            pattern=${_chunkKJOCH52QJs.l(this.pattern)}
            inputmode=${_chunkKJOCH52QJs.l(this.inputmode)}
            aria-labelledby=${_chunkKJOCH52QJs.l(_chunk4654KI5LJs.getLabelledBy({
            label: this.label,
            labelId: this.labelId,
            hasLabelSlot,
            helpText: this.helpText,
            helpTextId: this.helpTextId,
            hasHelpTextSlot
        }))}
            aria-invalid=${this.invalid ? "true" : "false"}
            @change=${this.handleChange}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @focus=${this.handleFocus}
            @blur=${this.handleBlur}
          />

          ${this.clearable && ((_b = this.value) == null ? void 0 : _b.length) > 0 ? _chunk2VBMOEKGJs.$`
                <button
                  part="clear-button"
                  class="input__clear"
                  type="button"
                  @click=${this.handleClearClick}
                  tabindex="-1"
                >
                  <slot name="clear-icon">
                    <sl-icon name="x-circle-fill" library="system"></sl-icon>
                  </slot>
                </button>
              ` : ""}
          ${this.togglePassword ? _chunk2VBMOEKGJs.$`
                <button
                  part="password-toggle-button"
                  class="input__password-toggle"
                  type="button"
                  @click=${this.handlePasswordToggle}
                  tabindex="-1"
                >
                  ${this.isPasswordVisible ? _chunk2VBMOEKGJs.$`
                        <slot name="show-password-icon">
                          <sl-icon name="eye-slash" library="system"></sl-icon>
                        </slot>
                      ` : _chunk2VBMOEKGJs.$`
                        <slot name="hide-password-icon">
                          <sl-icon name="eye" library="system"></sl-icon>
                        </slot>
                      `}
                </button>
              ` : ""}

          <span part="suffix" class="input__suffix">
            <slot name="suffix"></slot>
          </span>
        </div>
      `);
    }
};
SlInput.styles = _chunkA7SZ5Z2OJs.input_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".input__control")
], SlInput.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlInput.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlInput.prototype, "isPasswordVisible", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlInput.prototype, "type", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlInput.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "filled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "pill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "help-text"
    })
], SlInput.prototype, "helpText", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlInput.prototype, "clearable", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "toggle-password",
        type: Boolean
    })
], SlInput.prototype, "togglePassword", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "placeholder", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "readonly", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlInput.prototype, "minlength", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlInput.prototype, "maxlength", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "min", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "max", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlInput.prototype, "step", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "pattern", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "required", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlInput.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "autocapitalize", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "autocorrect", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "autocomplete", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlInput.prototype, "autofocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlInput.prototype, "spellcheck", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlInput.prototype, "inputmode", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlInput.prototype, "handleDisabledChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("value")
], SlInput.prototype, "handleValueChange", 1);
SlInput = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-input")
], SlInput);

},{"./chunk.A7SZ5Z2O.js":"3gOK5","./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gOK5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "input_styles_default", ()=>input_styles_default
);
var _chunkP2AL2I6LJs = require("./chunk.P2AL2I6L.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/input/input.styles.ts
var input_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}
  ${_chunkP2AL2I6LJs.form_control_styles_default}

  :host {
    display: block;
  }

  .input {
    flex: 1 1 auto;
    display: inline-flex;
    align-items: stretch;
    justify-content: start;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: text;
    transition: var(--sl-transition-fast) color, var(--sl-transition-fast) border, var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  /* Standard inputs */
  .input--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .input--standard:hover:not(.input--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }

  .input--standard.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  .input--standard.input--focused:not(.input--disabled) .input__control {
    color: var(--sl-input-color-focus);
  }

  .input--standard.input--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input--standard.input--disabled .input__control {
    color: var(--sl-input-color-disabled);
  }

  .input--standard.input--disabled .input__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled inputs */
  .input--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .input--filled:hover:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .input--filled.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  .input--filled.input--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input__control {
    flex: 1 1 auto;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    min-width: 0;
    height: 100%;
    color: var(--sl-input-color);
    border: none;
    background: none;
    box-shadow: none;
    padding: 0;
    margin: 0;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .input__control::-webkit-search-decoration,
  .input__control::-webkit-search-cancel-button,
  .input__control::-webkit-search-results-button,
  .input__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .input__control:-webkit-autofill,
  .input__control:-webkit-autofill:hover,
  .input__control:-webkit-autofill:focus,
  .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-background-color-hover) inset !important;
    -webkit-text-fill-color: var(--sl-color-primary-500);
    caret-color: var(--sl-input-color);
  }

  .input--filled .input__control:-webkit-autofill,
  .input--filled .input__control:-webkit-autofill:hover,
  .input--filled .input__control:-webkit-autofill:focus,
  .input--filled .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-filled-background-color) inset !important;
  }

  .input__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
  }

  .input:hover:not(.input--disabled) .input__control {
    color: var(--sl-input-color-hover);
  }

  .input__control:focus {
    outline: none;
  }

  .input__prefix,
  .input__suffix {
    display: inline-flex;
    flex: 0 0 auto;
    align-items: center;
    cursor: default;
  }

  .input__prefix ::slotted(sl-icon),
  .input__suffix ::slotted(sl-icon) {
    color: var(--sl-input-icon-color);
  }

  /*
   * Size modifiers
   */

  .input--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    height: var(--sl-input-height-small);
  }

  .input--small .input__control {
    height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-small);
  }

  .input--small .input__clear,
  .input--small .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-small) * 2);
  }

  .input--small .input__prefix ::slotted(*) {
    padding-left: var(--sl-input-spacing-small);
  }

  .input--small .input__suffix ::slotted(*) {
    padding-right: var(--sl-input-spacing-small);
  }

  .input--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    height: var(--sl-input-height-medium);
  }

  .input--medium .input__control {
    height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-medium);
  }

  .input--medium .input__clear,
  .input--medium .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-medium) * 2);
  }

  .input--medium .input__prefix ::slotted(*) {
    padding-left: var(--sl-input-spacing-medium);
  }

  .input--medium .input__suffix ::slotted(*) {
    padding-right: var(--sl-input-spacing-medium);
  }

  .input--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    height: var(--sl-input-height-large);
  }

  .input--large .input__control {
    height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-large);
  }

  .input--large .input__clear,
  .input--large .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-large) * 2);
  }

  .input--large .input__prefix ::slotted(*) {
    padding-left: var(--sl-input-spacing-large);
  }

  .input--large .input__suffix ::slotted(*) {
    padding-right: var(--sl-input-spacing-large);
  }

  /*
   * Pill modifier
   */

  .input--pill.input--small {
    border-radius: var(--sl-input-height-small);
  }

  .input--pill.input--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .input--pill.input--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Clearable + Password Toggle
   */

  .input__clear,
  .input__password-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .input__clear:hover,
  .input__password-toggle:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .input__clear:focus,
  .input__password-toggle:focus {
    outline: none;
  }

  .input--empty .input__clear {
    visibility: hidden;
  }

  /* Don't show the browser's password toggle in Edge */
  ::-ms-reveal {
    display: none;
  }
`;

},{"./chunk.P2AL2I6L.js":"4a66x","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0TfW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlDropdown", ()=>SlDropdown
);
var _chunkMMVA6LRDJs = require("./chunk.MMVA6LRD.js");
var _chunk5FSRBGWTJs = require("./chunk.5FSRBGWT.js");
var _chunkDTSUHNT6Js = require("./chunk.DTSUHNT6.js");
var _chunkST4GEPNZJs = require("./chunk.ST4GEPNZ.js");
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/dropdown/dropdown.ts
var SlDropdown = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.open = false;
        this.placement = "bottom-start";
        this.disabled = false;
        this.stayOpenOnSelect = false;
        this.distance = 0;
        this.skidding = 0;
        this.hoist = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.handleMenuItemActivate = this.handleMenuItemActivate.bind(this);
        this.handlePanelSelect = this.handlePanelSelect.bind(this);
        this.handleDocumentKeyDown = this.handleDocumentKeyDown.bind(this);
        this.handleDocumentMouseDown = this.handleDocumentMouseDown.bind(this);
        if (!this.containingElement) this.containingElement = this;
        this.updateComplete.then(()=>{
            this.popover = _chunkMMVA6LRDJs.createPopper(this.trigger, this.positioner, {
                placement: this.placement,
                strategy: this.hoist ? "fixed" : "absolute",
                modifiers: [
                    {
                        name: "flip",
                        options: {
                            boundary: "viewport"
                        }
                    },
                    {
                        name: "offset",
                        options: {
                            offset: [
                                this.skidding,
                                this.distance
                            ]
                        }
                    }
                ]
            });
        });
    }
    firstUpdated() {
        this.panel.hidden = !this.open;
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.hide();
        if (this.popover) this.popover.destroy();
    }
    focusOnTrigger() {
        const slot = this.trigger.querySelector("slot");
        const trigger = slot.assignedElements({
            flatten: true
        })[0];
        if (trigger && typeof trigger.focus === "function") trigger.focus();
    }
    getMenu() {
        const slot = this.panel.querySelector("slot");
        return slot.assignedElements({
            flatten: true
        }).filter((el)=>el.tagName.toLowerCase() === "sl-menu"
        )[0];
    }
    handleDocumentKeyDown(event) {
        var _a;
        if (event.key === "Escape") {
            this.hide();
            this.focusOnTrigger();
            return;
        }
        if (event.key === "Tab") {
            if (this.open && ((_a = document.activeElement) == null ? void 0 : _a.tagName.toLowerCase()) === "sl-menu-item") {
                event.preventDefault();
                this.hide();
                this.focusOnTrigger();
                return;
            }
            setTimeout(()=>{
                var _a2, _b;
                const activeElement = this.containingElement.getRootNode() instanceof ShadowRoot ? (_b = (_a2 = document.activeElement) == null ? void 0 : _a2.shadowRoot) == null ? void 0 : _b.activeElement : document.activeElement;
                if ((activeElement == null ? void 0 : activeElement.closest(this.containingElement.tagName.toLowerCase())) !== this.containingElement) {
                    this.hide();
                    return;
                }
            });
        }
    }
    handleDocumentMouseDown(event) {
        const path = event.composedPath();
        if (!path.includes(this.containingElement)) {
            this.hide();
            return;
        }
    }
    handleMenuItemActivate(event) {
        const item = event.target;
        _chunkST4GEPNZJs.scrollIntoView(item, this.panel);
    }
    handlePanelSelect(event) {
        const target = event.target;
        if (!this.stayOpenOnSelect && target.tagName.toLowerCase() === "sl-menu") {
            this.hide();
            this.focusOnTrigger();
        }
    }
    handlePopoverOptionsChange() {
        if (this.popover) this.popover.setOptions({
            placement: this.placement,
            strategy: this.hoist ? "fixed" : "absolute",
            modifiers: [
                {
                    name: "flip",
                    options: {
                        boundary: "viewport"
                    }
                },
                {
                    name: "offset",
                    options: {
                        offset: [
                            this.skidding,
                            this.distance
                        ]
                    }
                }
            ]
        });
    }
    handleTriggerClick() {
        this.open ? this.hide() : this.show();
    }
    handleTriggerKeyDown(event) {
        const menu = this.getMenu();
        const menuItems = menu ? [
            ...menu.querySelectorAll("sl-menu-item")
        ] : [];
        const firstMenuItem = menuItems[0];
        const lastMenuItem = menuItems[menuItems.length - 1];
        if (event.key === "Escape") {
            this.focusOnTrigger();
            this.hide();
            return;
        }
        if ([
            " ",
            "Enter"
        ].includes(event.key)) {
            event.preventDefault();
            this.open ? this.hide() : this.show();
            return;
        }
        if ([
            "ArrowDown",
            "ArrowUp"
        ].includes(event.key)) {
            event.preventDefault();
            if (!this.open) this.show();
            if (event.key === "ArrowDown" && firstMenuItem) {
                const menu2 = this.getMenu();
                menu2.setCurrentItem(firstMenuItem);
                firstMenuItem.focus();
                return;
            }
            if (event.key === "ArrowUp" && lastMenuItem) {
                menu.setCurrentItem(lastMenuItem);
                lastMenuItem.focus();
                return;
            }
        }
        const ignoredKeys = [
            "Tab",
            "Shift",
            "Meta",
            "Ctrl",
            "Alt"
        ];
        if (this.open && menu && !ignoredKeys.includes(event.key)) {
            menu.typeToSelect(event.key);
            return;
        }
    }
    handleTriggerKeyUp(event) {
        if (event.key === " ") event.preventDefault();
    }
    handleTriggerSlotChange() {
        this.updateAccessibleTrigger();
    }
    updateAccessibleTrigger() {
        if (this.trigger) {
            const slot = this.trigger.querySelector("slot");
            const assignedElements = slot.assignedElements({
                flatten: true
            });
            const accessibleTrigger = assignedElements.find((el)=>_chunkDTSUHNT6Js.getTabbableBoundary(el).start
            );
            if (accessibleTrigger) {
                accessibleTrigger.setAttribute("aria-haspopup", "true");
                accessibleTrigger.setAttribute("aria-expanded", this.open ? "true" : "false");
            }
        }
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    reposition() {
        if (!this.open) return;
        this.popover.update();
    }
    async handleOpenChange() {
        if (this.disabled) return;
        this.updateAccessibleTrigger();
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            this.panel.addEventListener("sl-activate", this.handleMenuItemActivate);
            this.panel.addEventListener("sl-select", this.handlePanelSelect);
            document.addEventListener("keydown", this.handleDocumentKeyDown);
            document.addEventListener("mousedown", this.handleDocumentMouseDown);
            await _chunk6JY65IM5Js.stopAnimations(this);
            this.popover.update();
            this.panel.hidden = false;
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "dropdown.show");
            await _chunk6JY65IM5Js.animateTo(this.panel, keyframes, options);
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            this.panel.removeEventListener("sl-activate", this.handleMenuItemActivate);
            this.panel.removeEventListener("sl-select", this.handlePanelSelect);
            document.removeEventListener("keydown", this.handleDocumentKeyDown);
            document.removeEventListener("mousedown", this.handleDocumentMouseDown);
            await _chunk6JY65IM5Js.stopAnimations(this);
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "dropdown.hide");
            await _chunk6JY65IM5Js.animateTo(this.panel, keyframes, options);
            this.panel.hidden = true;
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        id="dropdown"
        class=${_chunkW2WMQSCEJs.o({
            dropdown: true,
            "dropdown--open": this.open
        })}
      >
        <span
          part="trigger"
          class="dropdown__trigger"
          @click=${this.handleTriggerClick}
          @keydown=${this.handleTriggerKeyDown}
          @keyup=${this.handleTriggerKeyUp}
        >
          <slot name="trigger" @slotchange=${this.handleTriggerSlotChange}></slot>
        </span>

        <!-- Position the panel with a wrapper since the popover makes use of translate. This let's us add animations
        on the panel without interfering with the position. -->
        <div class="dropdown__positioner">
          <div
            part="panel"
            class="dropdown__panel"
            aria-hidden=${this.open ? "false" : "true"}
            aria-labelledby="dropdown"
          >
            <slot></slot>
          </div>
        </div>
      </div>
    `;
    }
};
SlDropdown.styles = _chunk5FSRBGWTJs.dropdown_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dropdown__trigger")
], SlDropdown.prototype, "trigger", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dropdown__panel")
], SlDropdown.prototype, "panel", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dropdown__positioner")
], SlDropdown.prototype, "positioner", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDropdown.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlDropdown.prototype, "placement", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlDropdown.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "stay-open-on-select",
        type: Boolean,
        reflect: true
    })
], SlDropdown.prototype, "stayOpenOnSelect", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: false
    })
], SlDropdown.prototype, "containingElement", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlDropdown.prototype, "distance", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlDropdown.prototype, "skidding", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean
    })
], SlDropdown.prototype, "hoist", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("distance"),
    _chunkBD26TKS4Js.watch("hoist"),
    _chunkBD26TKS4Js.watch("placement"),
    _chunkBD26TKS4Js.watch("skidding")
], SlDropdown.prototype, "handlePopoverOptionsChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlDropdown.prototype, "handleOpenChange", 1);
SlDropdown = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-dropdown")
], SlDropdown);
_chunkUTEQRIIYJs.setDefaultAnimation("dropdown.show", {
    keyframes: [
        {
            opacity: 0,
            transform: "scale(0.9)"
        },
        {
            opacity: 1,
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 100,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("dropdown.hide", {
    keyframes: [
        {
            opacity: 1,
            transform: "scale(1)"
        },
        {
            opacity: 0,
            transform: "scale(0.9)"
        }
    ],
    options: {
        duration: 100,
        easing: "ease"
    }
});

},{"./chunk.MMVA6LRD.js":"gVisE","./chunk.5FSRBGWT.js":"byf0G","./chunk.DTSUHNT6.js":"a7RTw","./chunk.ST4GEPNZ.js":"ao9ex","./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byf0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dropdown_styles_default", ()=>dropdown_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/dropdown/dropdown.styles.ts
var dropdown_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .dropdown {
    position: relative;
  }

  .dropdown__trigger {
    display: block;
  }

  .dropdown__positioner {
    position: absolute;
    z-index: var(--sl-z-index-dropdown);
  }

  .dropdown__panel {
    max-height: 75vh;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    color: var(--color);
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    box-shadow: var(--sl-shadow-large);
    overflow: auto;
    overscroll-behavior: none;
    pointer-events: none;
  }

  .dropdown--open .dropdown__panel {
    pointer-events: all;
  }

  .dropdown__positioner[data-popper-placement^='top'] .dropdown__panel {
    transform-origin: bottom;
  }

  .dropdown__positioner[data-popper-placement^='bottom'] .dropdown__panel {
    transform-origin: top;
  }

  .dropdown__positioner[data-popper-placement^='left'] .dropdown__panel {
    transform-origin: right;
  }

  .dropdown__positioner[data-popper-placement^='right'] .dropdown__panel {
    transform-origin: left;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hrctM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlDetails", ()=>SlDetails
);
var _chunkHCWNSG4VJs = require("./chunk.HCWNSG4V.js");
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/details/details.ts
var SlDetails = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.open = false;
        this.disabled = false;
    }
    firstUpdated() {
        this.body.hidden = !this.open;
        this.body.style.height = this.open ? "auto" : "0";
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    handleSummaryClick() {
        if (!this.disabled) {
            this.open ? this.hide() : this.show();
            this.header.focus();
        }
    }
    handleSummaryKeyDown(event) {
        if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            this.open ? this.hide() : this.show();
        }
        if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
            event.preventDefault();
            this.hide();
        }
        if (event.key === "ArrowDown" || event.key === "ArrowRight") {
            event.preventDefault();
            this.show();
        }
    }
    async handleOpenChange() {
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            await _chunk6JY65IM5Js.stopAnimations(this);
            this.body.hidden = false;
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "details.show");
            await _chunk6JY65IM5Js.animateTo(this.body, _chunk6JY65IM5Js.shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
            this.body.style.height = "auto";
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            await _chunk6JY65IM5Js.stopAnimations(this);
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "details.hide");
            await _chunk6JY65IM5Js.animateTo(this.body, _chunk6JY65IM5Js.shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
            this.body.hidden = true;
            this.body.style.height = "auto";
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            details: true,
            "details--open": this.open,
            "details--disabled": this.disabled
        })}
      >
        <header
          part="header"
          id="header"
          class="details__header"
          role="button"
          aria-expanded=${this.open ? "true" : "false"}
          aria-controls="content"
          aria-disabled=${this.disabled ? "true" : "false"}
          tabindex=${this.disabled ? "-1" : "0"}
          @click=${this.handleSummaryClick}
          @keydown=${this.handleSummaryKeyDown}
        >
          <div part="summary" class="details__summary">
            <slot name="summary">${this.summary}</slot>
          </div>

          <span part="summary-icon" class="details__summary-icon">
            <sl-icon name="chevron-right" library="system"></sl-icon>
          </span>
        </header>

        <div class="details__body">
          <div part="content" id="content" class="details__content" role="region" aria-labelledby="header">
            <slot></slot>
          </div>
        </div>
      </div>
    `;
    }
};
SlDetails.styles = _chunkHCWNSG4VJs.details_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".details")
], SlDetails.prototype, "details", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".details__header")
], SlDetails.prototype, "header", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".details__body")
], SlDetails.prototype, "body", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDetails.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlDetails.prototype, "summary", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDetails.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlDetails.prototype, "handleOpenChange", 1);
SlDetails = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-details")
], SlDetails);
_chunkUTEQRIIYJs.setDefaultAnimation("details.show", {
    keyframes: [
        {
            height: "0",
            opacity: "0"
        },
        {
            height: "auto",
            opacity: "1"
        }
    ],
    options: {
        duration: 250,
        easing: "linear"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("details.hide", {
    keyframes: [
        {
            height: "auto",
            opacity: "1"
        },
        {
            height: "0",
            opacity: "0"
        }
    ],
    options: {
        duration: 250,
        easing: "linear"
    }
});

},{"./chunk.HCWNSG4V.js":"iOasC","./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iOasC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "details_styles_default", ()=>details_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/details/details.styles.ts
var details_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: block;
  }

  .details {
    border: solid 1px var(--sl-color-neutral-200);
    border-radius: var(--sl-border-radius-medium);
    background-color: var(--sl-color-neutral-0);
    overflow-anchor: none;
  }

  .details--disabled {
    opacity: 0.5;
  }

  .details__header {
    display: flex;
    align-items: center;
    border-radius: inherit;
    padding: var(--sl-spacing-medium);
    user-select: none;
    cursor: pointer;
  }

  .details__header:focus {
    outline: none;
  }

  .details__header${_chunkAN2XMPAVJs.focusVisibleSelector} {
    box-shadow: var(--sl-focus-ring);
  }

  .details--disabled .details__header {
    cursor: not-allowed;
  }

  .details--disabled .details__header${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: none;
  }

  .details__summary {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
  }

  .details__summary-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) transform ease;
  }

  .details--open .details__summary-icon {
    transform: rotate(90deg);
  }

  .details__body {
    overflow: hidden;
  }

  .details__content {
    padding: var(--sl-spacing-medium);
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FlqbK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlDialog", ()=>SlDialog
);
var _chunkSXNB3LL3Js = require("./chunk.SXNB3LL3.js");
var _chunkST4GEPNZJs = require("./chunk.ST4GEPNZ.js");
var _chunkDREYVBRRJs = require("./chunk.DREYVBRR.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/dialog/dialog.ts
var hasPreventScroll = _chunkSXNB3LL3Js.isPreventScrollSupported();
var SlDialog = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "footer");
        this.open = false;
        this.label = "";
        this.noHeader = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.modal = new _chunkSXNB3LL3Js.Modal(this);
    }
    firstUpdated() {
        this.dialog.hidden = !this.open;
        if (this.open) {
            this.modal.activate();
            _chunkST4GEPNZJs.lockBodyScrolling(this);
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        _chunkST4GEPNZJs.unlockBodyScrolling(this);
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    requestClose() {
        const slRequestClose = _chunkI4TE3TJVJs.emit(this, "sl-request-close", {
            cancelable: true
        });
        if (slRequestClose.defaultPrevented) {
            const animation = _chunkUTEQRIIYJs.getAnimation(this, "dialog.denyClose");
            _chunk6JY65IM5Js.animateTo(this.panel, animation.keyframes, animation.options);
            return;
        }
        this.hide();
    }
    handleKeyDown(event) {
        if (event.key === "Escape") {
            event.stopPropagation();
            this.requestClose();
        }
    }
    async handleOpenChange() {
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            this.originalTrigger = document.activeElement;
            this.modal.activate();
            _chunkST4GEPNZJs.lockBodyScrolling(this);
            await Promise.all([
                _chunk6JY65IM5Js.stopAnimations(this.dialog),
                _chunk6JY65IM5Js.stopAnimations(this.overlay)
            ]);
            this.dialog.hidden = false;
            if (hasPreventScroll) {
                const slInitialFocus = _chunkI4TE3TJVJs.emit(this, "sl-initial-focus", {
                    cancelable: true
                });
                if (!slInitialFocus.defaultPrevented) this.panel.focus({
                    preventScroll: true
                });
            }
            const panelAnimation = _chunkUTEQRIIYJs.getAnimation(this, "dialog.show");
            const overlayAnimation = _chunkUTEQRIIYJs.getAnimation(this, "dialog.overlay.show");
            await Promise.all([
                _chunk6JY65IM5Js.animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                _chunk6JY65IM5Js.animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
            ]);
            if (!hasPreventScroll) {
                const slInitialFocus = _chunkI4TE3TJVJs.emit(this, "sl-initial-focus", {
                    cancelable: true
                });
                if (!slInitialFocus.defaultPrevented) this.panel.focus({
                    preventScroll: true
                });
            }
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            this.modal.deactivate();
            await Promise.all([
                _chunk6JY65IM5Js.stopAnimations(this.dialog),
                _chunk6JY65IM5Js.stopAnimations(this.overlay)
            ]);
            const panelAnimation = _chunkUTEQRIIYJs.getAnimation(this, "dialog.hide");
            const overlayAnimation = _chunkUTEQRIIYJs.getAnimation(this, "dialog.overlay.hide");
            await Promise.all([
                _chunk6JY65IM5Js.animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                _chunk6JY65IM5Js.animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
            ]);
            this.dialog.hidden = true;
            _chunkST4GEPNZJs.unlockBodyScrolling(this);
            const trigger = this.originalTrigger;
            if (trigger && typeof trigger.focus === "function") setTimeout(()=>trigger.focus()
            );
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            dialog: true,
            "dialog--open": this.open,
            "dialog--has-footer": this.hasSlotController.test("footer")
        })}
        @keydown=${this.handleKeyDown}
      >
        <div part="overlay" class="dialog__overlay" @click=${this.requestClose} tabindex="-1"></div>

        <div
          part="panel"
          class="dialog__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${_chunkKJOCH52QJs.l(this.noHeader ? this.label : void 0)}
          aria-labelledby=${_chunkKJOCH52QJs.l(!this.noHeader ? "title" : void 0)}
          tabindex="0"
        >
          ${!this.noHeader ? _chunk2VBMOEKGJs.$`
                <header part="header" class="dialog__header">
                  <span part="title" class="dialog__title" id="title">
                    <slot name="label"> ${this.label || String.fromCharCode(65279)} </slot>
                  </span>
                  <sl-icon-button
                    exportparts="base:close-button"
                    class="dialog__close"
                    name="x"
                    library="system"
                    @click="${this.requestClose}"
                  ></sl-icon-button>
                </header>
              ` : ""}

          <div part="body" class="dialog__body">
            <slot></slot>
          </div>

          <footer part="footer" class="dialog__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
    }
};
SlDialog.styles = _chunkDREYVBRRJs.dialog_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dialog")
], SlDialog.prototype, "dialog", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dialog__panel")
], SlDialog.prototype, "panel", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".dialog__overlay")
], SlDialog.prototype, "overlay", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDialog.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlDialog.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "no-header",
        type: Boolean,
        reflect: true
    })
], SlDialog.prototype, "noHeader", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlDialog.prototype, "handleOpenChange", 1);
SlDialog = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-dialog")
], SlDialog);
_chunkUTEQRIIYJs.setDefaultAnimation("dialog.show", {
    keyframes: [
        {
            opacity: 0,
            transform: "scale(0.8)"
        },
        {
            opacity: 1,
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("dialog.hide", {
    keyframes: [
        {
            opacity: 1,
            transform: "scale(1)"
        },
        {
            opacity: 0,
            transform: "scale(0.8)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("dialog.denyClose", {
    keyframes: [
        {
            transform: "scale(1)"
        },
        {
            transform: "scale(1.02)"
        },
        {
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 250
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("dialog.overlay.show", {
    keyframes: [
        {
            opacity: 0
        },
        {
            opacity: 1
        }
    ],
    options: {
        duration: 250
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("dialog.overlay.hide", {
    keyframes: [
        {
            opacity: 1
        },
        {
            opacity: 0
        }
    ],
    options: {
        duration: 250
    }
});

},{"./chunk.SXNB3LL3.js":"cN7v8","./chunk.ST4GEPNZ.js":"ao9ex","./chunk.DREYVBRR.js":"jLpn7","./chunk.5TL5QPK4.js":"akO45","./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLpn7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dialog_styles_default", ()=>dialog_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/dialog/dialog.styles.ts
var dialog_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --width: 31rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .dialog {
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: var(--sl-z-index-dialog);
  }

  .dialog__panel {
    display: flex;
    flex-direction: column;
    z-index: 2;
    width: var(--width);
    max-width: calc(100% - var(--sl-spacing-2x-large));
    max-height: calc(100% - var(--sl-spacing-2x-large));
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    box-shadow: var(--sl-shadow-x-large);
  }

  .dialog__panel:focus {
    outline: none;
  }

  /* Ensure there's enough vertical padding for phones that don't update vh when chrome appears (e.g. iPhone) */
  @media screen and (max-width: 420px) {
    .dialog__panel {
      max-height: 80vh;
    }
  }

  .dialog--open .dialog__panel {
    display: flex;
    opacity: 1;
    transform: none;
  }

  .dialog__header {
    flex: 0 0 auto;
    display: flex;
  }

  .dialog__title {
    flex: 1 1 auto;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
  }

  .dialog__close {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-x-large);
    padding: 0 var(--header-spacing);
  }

  .dialog__body {
    flex: 1 1 auto;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .dialog__footer {
    flex: 0 0 auto;
    text-align: right;
    padding: var(--footer-spacing);
  }

  .dialog__footer ::slotted(sl-button:not(:first-of-type)) {
    margin-left: var(--sl-spacing-x-small);
  }

  .dialog:not(.dialog--has-footer) .dialog__footer {
    display: none;
  }

  .dialog__overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnIja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlDivider", ()=>SlDivider
);
var _chunkIDWMMLZBJs = require("./chunk.IDWMMLZB.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/divider/divider.ts
var SlDivider = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.vertical = false;
    }
    firstUpdated() {
        this.setAttribute("role", "separator");
    }
    handleVerticalChange() {
        this.setAttribute("aria-orientation", this.vertical ? "vertical" : "horizontal");
    }
};
SlDivider.styles = _chunkIDWMMLZBJs.divider_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlDivider.prototype, "vertical", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("vertical")
], SlDivider.prototype, "handleVerticalChange", 1);
SlDivider = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-divider")
], SlDivider);

},{"./chunk.IDWMMLZB.js":"cNUUD","./chunk.BD26TKS4.js":"1j2NX","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNUUD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divider_styles_default", ()=>divider_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/divider/divider.styles.ts
var divider_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --color: var(--sl-panel-border-color);
    --width: var(--sl-panel-border-width);
    --spacing: var(--sl-spacing-medium);
  }

  :host(:not([vertical])) {
    display: block;
    border-top: solid var(--width) var(--color);
    margin: var(--spacing) 0;
  }

  :host([vertical]) {
    display: inline-block;
    height: 100%;
    border-left: solid var(--width) var(--color);
    margin: 0 var(--spacing);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7CRU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlButtonGroup", ()=>SlButtonGroup
);
var _chunkTQAMNUHMJs = require("./chunk.TQAMNUHM.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/button-group/button-group.ts
var SlButtonGroup = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.label = "";
    }
    handleFocus(event) {
        const button = findButton(event.target);
        button == null || button.classList.add("sl-button-group__button--focus");
    }
    handleBlur(event) {
        const button = findButton(event.target);
        button == null || button.classList.remove("sl-button-group__button--focus");
    }
    handleMouseOver(event) {
        const button = findButton(event.target);
        button == null || button.classList.add("sl-button-group__button--hover");
    }
    handleMouseOut(event) {
        const button = findButton(event.target);
        button == null || button.classList.remove("sl-button-group__button--hover");
    }
    handleSlotChange() {
        const slottedElements = [
            ...this.defaultSlot.assignedElements({
                flatten: true
            })
        ];
        slottedElements.map((el)=>{
            const index = slottedElements.indexOf(el);
            const button = findButton(el);
            if (button) {
                button.classList.add("sl-button-group__button");
                button.classList.toggle("sl-button-group__button--first", index === 0);
                button.classList.toggle("sl-button-group__button--inner", index > 0 && index < slottedElements.length - 1);
                button.classList.toggle("sl-button-group__button--last", index === slottedElements.length - 1);
            }
        });
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class="button-group"
        role="group"
        aria-label=${this.label}
        @focusout=${this.handleBlur}
        @focusin=${this.handleFocus}
        @mouseover=${this.handleMouseOver}
        @mouseout=${this.handleMouseOut}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
      </div>
    `;
    }
};
SlButtonGroup.styles = _chunkTQAMNUHMJs.button_group_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("slot")
], SlButtonGroup.prototype, "defaultSlot", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButtonGroup.prototype, "label", 2);
SlButtonGroup = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-button-group")
], SlButtonGroup);
function findButton(el) {
    return el.tagName.toLowerCase() === "sl-button" ? el : el.querySelector("sl-button");
}

},{"./chunk.TQAMNUHM.js":"7wsuv","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wsuv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "button_group_styles_default", ()=>button_group_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/button-group/button-group.styles.ts
var button_group_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .button-group {
    display: flex;
    flex-wrap: nowrap;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98Wo8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlButton", ()=>SlButton
) /**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ ;
var _chunkNTBOGFL4Js = require("./chunk.NTBOGFL4.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/lit-html/static.js
var r = (t2, ...e2)=>({
        _$litStatic$: e2.reduce((e3, o2, r2)=>e3 + ((t3)=>{
                if (t3._$litStatic$ !== void 0) return t3._$litStatic$;
                throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t3}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
            })(o2) + t2[r2 + 1]
        , t2[0])
    })
;
var i2 = /* @__PURE__ */ new Map();
var a = (t2)=>(e2, ...o2)=>{
        var r2;
        const a2 = o2.length;
        let l3, s3;
        const n2 = [], u = [];
        let c, $2 = 0, v = false;
        for(; $2 < a2;){
            for(c = e2[$2]; $2 < a2 && (s3 = o2[$2], l3 = (r2 = s3) === null || r2 === void 0 ? void 0 : r2._$litStatic$) !== void 0;)c += l3 + e2[++$2], v = true;
            u.push(s3), n2.push(c), $2++;
        }
        if ($2 === a2 && n2.push(e2[a2]), v) {
            const t3 = n2.join("$$lit$$");
            (e2 = i2.get(t3)) === void 0 && (n2.raw = n2, i2.set(t3, e2 = n2)), o2 = u;
        }
        return t2(e2, ...o2);
    }
;
var l2 = a(_chunk2VBMOEKGJs.$);
var s2 = a(_chunk2VBMOEKGJs.y);
// src/components/button/button.ts
var SlButton = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "[default]", "prefix", "suffix");
        this.hasFocus = false;
        this.variant = "default";
        this.size = "medium";
        this.caret = false;
        this.disabled = false;
        this.loading = false;
        this.outline = false;
        this.pill = false;
        this.circle = false;
        this.type = "button";
    }
    click() {
        this.button.click();
    }
    focus(options) {
        this.button.focus(options);
    }
    blur() {
        this.button.blur();
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleClick(event) {
        if (this.disabled || this.loading) {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        if (this.type === "submit") this.formSubmitController.submit();
    }
    render() {
        const isLink = this.href ? true : false;
        const tag = isLink ? r`a` : r`button`;
        return l2`
      <${tag}
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            button: true,
            "button--default": this.variant === "default",
            "button--primary": this.variant === "primary",
            "button--success": this.variant === "success",
            "button--neutral": this.variant === "neutral",
            "button--warning": this.variant === "warning",
            "button--danger": this.variant === "danger",
            "button--text": this.variant === "text",
            "button--small": this.size === "small",
            "button--medium": this.size === "medium",
            "button--large": this.size === "large",
            "button--caret": this.caret,
            "button--circle": this.circle,
            "button--disabled": this.disabled,
            "button--focused": this.hasFocus,
            "button--loading": this.loading,
            "button--standard": !this.outline,
            "button--outline": this.outline,
            "button--pill": this.pill,
            "button--has-label": this.hasSlotController.test("[default]"),
            "button--has-prefix": this.hasSlotController.test("prefix"),
            "button--has-suffix": this.hasSlotController.test("suffix")
        })}
        ?disabled=${_chunkKJOCH52QJs.l(isLink ? void 0 : this.disabled)}
        type=${this.type}
        name=${_chunkKJOCH52QJs.l(isLink ? void 0 : this.name)}
        value=${_chunkKJOCH52QJs.l(isLink ? void 0 : this.value)}
        href=${_chunkKJOCH52QJs.l(this.href)}
        target=${_chunkKJOCH52QJs.l(this.target)}
        download=${_chunkKJOCH52QJs.l(this.download)}
        rel=${_chunkKJOCH52QJs.l(this.target ? "noreferrer noopener" : void 0)}
        role="button"
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @click=${this.handleClick}
      >
        <span part="prefix" class="button__prefix">
          <slot name="prefix"></slot>
        </span>
        <span part="label" class="button__label">
          <slot></slot>
        </span>
        <span part="suffix" class="button__suffix">
          <slot name="suffix"></slot>
        </span>
        ${this.caret ? l2`
                <span part="caret" class="button__caret">
                  <svg
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polyline points="6 9 12 15 18 9"></polyline>
                  </svg>
                </span>
              ` : ""}
        ${this.loading ? l2`<sl-spinner></sl-spinner>` : ""}
      </${tag}>
    `;
    }
};
SlButton.styles = _chunkNTBOGFL4Js.button_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".button")
], SlButton.prototype, "button", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlButton.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlButton.prototype, "variant", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlButton.prototype, "size", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "caret", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "loading", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "outline", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "pill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlButton.prototype, "circle", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "type", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "href", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "target", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlButton.prototype, "download", 2);
SlButton = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-button")
], SlButton);

},{"./chunk.NTBOGFL4.js":"45eD3","./chunk.4654KI5L.js":"3AQaY","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45eD3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "button_styles_default", ()=>button_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/button/button.styles.ts
var button_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
    position: relative;
    width: auto;
    cursor: pointer;
  }

  .button {
    display: inline-flex;
    align-items: stretch;
    justify-content: center;
    width: 100%;
    border-style: solid;
    border-width: var(--sl-input-border-width);
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-font-weight-semibold);
    text-decoration: none;
    user-select: none;
    white-space: nowrap;
    vertical-align: middle;
    padding: 0;
    transition: var(--sl-transition-fast) background-color, var(--sl-transition-fast) color,
      var(--sl-transition-fast) border, var(--sl-transition-fast) box-shadow;
    cursor: inherit;
  }

  .button::-moz-focus-inner {
    border: 0;
  }

  .button:focus {
    outline: none;
  }

  .button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When disabled, prevent mouse events from bubbling up */
  .button--disabled * {
    pointer-events: none;
  }

  .button__prefix,
  .button__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    pointer-events: none;
  }

  .button__label ::slotted(sl-icon) {
    vertical-align: -2px;
  }

  /*
   * Standard buttons
   */

  /* Default */
  .button--standard.button--default {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-neutral-300);
    color: var(--sl-color-neutral-700);
  }

  .button--standard.button--default:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-300);
    color: var(--sl-color-primary-700);
  }

  .button--standard.button--default${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-400);
    color: var(--sl-color-primary-700);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--default:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-100);
    border-color: var(--sl-color-primary-400);
    color: var(--sl-color-primary-700);
  }

  /* Primary */
  .button--standard.button--primary {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    color: var(--sl-color-neutral-0);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--primary:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--standard.button--success {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:hover:not(.button--disabled) {
    background-color: var(--sl-color-success-500);
    border-color: var(--sl-color-success-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--success:active:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--standard.button--neutral {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:hover:not(.button--disabled) {
    background-color: var(--sl-color-neutral-500);
    border-color: var(--sl-color-neutral-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-neutral-500);
    border-color: var(--sl-color-neutral-500);
    color: var(--sl-color-neutral-0);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--neutral:active:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--standard.button--warning {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }
  .button--standard.button--warning:hover:not(.button--disabled) {
    background-color: var(--sl-color-warning-500);
    border-color: var(--sl-color-warning-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--warning${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-warning-500);
    border-color: var(--sl-color-warning-500);
    color: var(--sl-color-neutral-0);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--warning:active:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--standard.button--danger {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:hover:not(.button--disabled) {
    background-color: var(--sl-color-danger-500);
    border-color: var(--sl-color-danger-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: var(--sl-color-danger-500);
    border-color: var(--sl-color-danger-500);
    color: var(--sl-color-neutral-0);
    box-shadow: var(--sl-focus-ring);
  }

  .button--standard.button--danger:active:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /*
   * Outline buttons
   */

  .button--outline {
    background: none;
    border: solid 1px;
  }

  /* Default */
  .button--outline.button--default {
    border-color: var(--sl-color-neutral-300);
    color: var(--sl-color-neutral-700);
  }

  .button--outline.button--default:hover:not(.button--disabled) {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--default${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--default:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Primary */
  .button--outline.button--primary {
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-primary-600);
  }

  .button--outline.button--primary:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--primary${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--primary:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--outline.button--success {
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-success-600);
  }

  .button--outline.button--success:hover:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--success${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-success-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--success:active:not(.button--disabled) {
    border-color: var(--sl-color-success-700);
    background-color: var(--sl-color-success-700);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--outline.button--neutral {
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-600);
  }

  .button--outline.button--neutral:hover:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--neutral${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-neutral-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--neutral:active:not(.button--disabled) {
    border-color: var(--sl-color-neutral-700);
    background-color: var(--sl-color-neutral-700);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--outline.button--warning {
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-warning-600);
  }

  .button--outline.button--warning:hover:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--warning${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-warning-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--warning:active:not(.button--disabled) {
    border-color: var(--sl-color-warning-700);
    background-color: var(--sl-color-warning-700);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--outline.button--danger {
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-danger-600);
  }

  .button--outline.button--danger:hover:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--danger${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    border-color: var(--sl-color-danger-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--outline.button--danger:active:not(.button--disabled) {
    border-color: var(--sl-color-danger-700);
    background-color: var(--sl-color-danger-700);
    color: var(--sl-color-neutral-0);
  }

  /*
   * Text buttons
   */

  .button--text {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-600);
  }

  .button--text:hover:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text${_chunkAN2XMPAVJs.focusVisibleSelector}:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  .button--text:active:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-700);
  }

  /*
   * Size modifiers
   */

  .button--small {
    font-size: var(--sl-button-font-size-small);
    height: var(--sl-input-height-small);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
  }

  .button--medium {
    font-size: var(--sl-button-font-size-medium);
    height: var(--sl-input-height-medium);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
  }

  .button--large {
    font-size: var(--sl-button-font-size-large);
    height: var(--sl-input-height-large);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
  }

  /*
   * Pill modifier
   */

  .button--pill.button--small {
    border-radius: var(--sl-input-height-small);
  }

  .button--pill.button--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .button--pill.button--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Circle modifier
   */

  .button--circle {
    padding-left: 0;
    padding-right: 0;
  }

  .button--circle.button--small {
    width: var(--sl-input-height-small);
    border-radius: 50%;
  }

  .button--circle.button--medium {
    width: var(--sl-input-height-medium);
    border-radius: 50%;
  }

  .button--circle.button--large {
    width: var(--sl-input-height-large);
    border-radius: 50%;
  }

  .button--circle .button__prefix,
  .button--circle .button__suffix,
  .button--circle .button__caret {
    display: none;
  }

  /*
   * Caret modifier
   */

  .button--caret .button__suffix {
    display: none;
  }

  .button--caret .button__caret {
    display: flex;
    align-items: center;
  }

  .button--caret .button__caret svg {
    width: 1em;
    height: 1em;
  }

  /*
   * Loading modifier
   */

  .button--loading {
    position: relative;
    cursor: wait;
  }

  .button--loading .button__prefix,
  .button--loading .button__label,
  .button--loading .button__suffix,
  .button--loading .button__caret {
    visibility: hidden;
  }

  .button--loading sl-spinner {
    --indicator-color: currentColor;
    position: absolute;
    font-size: 1em;
    height: 1em;
    width: 1em;
    top: calc(50% - 0.5em);
    left: calc(50% - 0.5em);
  }

  /*
   * Badges
   */

  .button ::slotted(sl-badge) {
    position: absolute;
    top: 0;
    right: 0;
    transform: translateY(-50%) translateX(50%);
    pointer-events: none;
  }

  /*
   * Button spacing
   */

  .button--has-label.button--small .button__label {
    padding: 0 var(--sl-spacing-small);
  }

  .button--has-label.button--medium .button__label {
    padding: 0 var(--sl-spacing-medium);
  }

  .button--has-label.button--large .button__label {
    padding: 0 var(--sl-spacing-large);
  }

  .button--has-prefix.button--small {
    padding-left: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--small .button__label {
    padding-left: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--medium {
    padding-left: var(--sl-spacing-small);
  }

  .button--has-prefix.button--medium .button__label {
    padding-left: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large {
    padding-left: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large .button__label {
    padding-left: var(--sl-spacing-small);
  }

  .button--has-suffix.button--small,
  .button--caret.button--small {
    padding-right: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--small .button__label,
  .button--caret.button--small .button__label {
    padding-right: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--medium,
  .button--caret.button--medium {
    padding-right: var(--sl-spacing-small);
  }

  .button--has-suffix.button--medium .button__label,
  .button--caret.button--medium .button__label {
    padding-right: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large,
  .button--caret.button--large {
    padding-right: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large .button__label,
  .button--caret.button--large .button__label {
    padding-right: var(--sl-spacing-small);
  }

  /*
   * Button groups support a variety of button types (e.g. buttons with tooltips, buttons as dropdown triggers, etc.).
   * This means buttons aren't always direct descendants of the button group, thus we can't target them with the
   * ::slotted selector. To work around this, the button group component does some magic to add these special classes to
   * buttons and we style them here instead.
   */

  :host(.sl-button-group__button--first:not(.sl-button-group__button--last)) .button {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  :host(.sl-button-group__button--inner) .button {
    border-radius: 0;
  }

  :host(.sl-button-group__button--last:not(.sl-button-group__button--first)) .button {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /* All except the first */
  :host(.sl-button-group__button:not(.sl-button-group__button--first)) {
    margin-left: calc(-1 * var(--sl-input-border-width));
  }

  /* Add a visual separator between solid buttons */
  :host(.sl-button-group__button:not(.sl-button-group__button--focus, .sl-button-group__button--first, [variant='default']):not(:hover, :active, :focus))
    .button:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    border-left: solid 1px rgb(128 128 128 / 33%);
    mix-blend-mode: multiply;
  }

  /* Bump focused buttons up so their focus ring isn't clipped */
  :host(.sl-button-group__button--hover) {
    z-index: 1;
  }

  :host(.sl-button-group__button--focus) {
    z-index: 2;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9L9Hz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlSpinner", ()=>SlSpinner
);
var _chunk2G6AZSJBJs = require("./chunk.2G6AZSJB.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/spinner/spinner.ts
var SlSpinner = class extends _chunk2VBMOEKGJs.s {
    render() {
        return _chunk2VBMOEKGJs.$`
      <svg part="base" class="spinner" role="status">
        <circle class="spinner__track"></circle>
        <circle class="spinner__indicator"></circle>
      </svg>
    `;
    }
};
SlSpinner.styles = _chunk2G6AZSJBJs.spinner_styles_default;
SlSpinner = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-spinner")
], SlSpinner);

},{"./chunk.2G6AZSJB.js":"7xhPc","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xhPc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spinner_styles_default", ()=>spinner_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/spinner/spinner.styles.ts
var spinner_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --track-width: 2px;
    --track-color: rgb(128 128 128 / 25%);
    --indicator-color: var(--sl-color-primary-600);
    --speed: 800ms;

    display: inline-flex;
    width: 1em;
    height: 1em;
  }

  .spinner {
    flex: 1 1 auto;
    height: 100%;
    width: 100%;
  }

  .spinner__track,
  .spinner__indicator {
    fill: none;
    stroke-width: var(--track-width);
    r: calc(0.5em - var(--track-width) / 2);
    cx: 0.5em;
    cy: 0.5em;
    transform-origin: 50% 50%;
  }

  .spinner__track {
    stroke: var(--track-color);
    transform-origin: 0% 0%;
    mix-blend-mode: multiply;
  }

  .spinner__indicator {
    stroke: var(--indicator-color);
    stroke-linecap: round;
    stroke-dasharray: 150% 75%;
    animation: spin var(--speed) linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9EyI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlCard", ()=>SlCard
);
var _chunkSYKJSKOBJs = require("./chunk.SYKJSKOB.js");
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/card/card.ts
var SlCard = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "footer", "header", "image");
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            card: true,
            "card--has-footer": this.hasSlotController.test("footer"),
            "card--has-image": this.hasSlotController.test("image"),
            "card--has-header": this.hasSlotController.test("header")
        })}
      >
        <div part="image" class="card__image">
          <slot name="image"></slot>
        </div>

        <div part="header" class="card__header">
          <slot name="header"></slot>
        </div>

        <div part="body" class="card__body">
          <slot></slot>
        </div>

        <div part="footer" class="card__footer">
          <slot name="footer"></slot>
        </div>
      </div>
    `;
    }
};
SlCard.styles = _chunkSYKJSKOBJs.card_styles_default;
SlCard = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-card")
], SlCard);

},{"./chunk.SYKJSKOB.js":"d9cu7","./chunk.5TL5QPK4.js":"akO45","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9cu7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "card_styles_default", ()=>card_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/card/card.styles.ts
var card_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --border-color: var(--sl-color-neutral-200);
    --border-radius: var(--sl-border-radius-medium);
    --border-width: 1px;
    --padding: var(--sl-spacing-large);

    display: inline-block;
  }

  .card {
    display: flex;
    flex-direction: column;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-small);
    border: solid var(--border-width) var(--border-color);
    border-radius: var(--border-radius);
  }

  .card__image {
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
    margin: calc(-1 * var(--border-width));
    overflow: hidden;
  }

  .card__image ::slotted(img) {
    display: block;
    width: 100%;
  }

  .card:not(.card--has-image) .card__image {
    display: none;
  }

  .card__header {
    border-bottom: solid var(--border-width) var(--border-color);
    padding: calc(var(--padding) / 2) var(--padding);
  }

  .card:not(.card--has-header) .card__header {
    display: none;
  }

  .card__body {
    padding: var(--padding);
  }

  .card--has-footer .card__footer {
    border-top: solid var(--border-width) var(--border-color);
    padding: var(--padding);
  }

  .card:not(.card--has-footer) .card__footer {
    display: none;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kvLJw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlCheckbox", ()=>SlCheckbox
);
var _chunkGPPFFSGRJs = require("./chunk.GPPFFSGR.js");
var _chunk4654KI5LJs = require("./chunk.4654KI5L.js");
var _chunkB3QJZERKJs = require("./chunk.B3QJZERK.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/checkbox/checkbox.ts
var id = 0;
var SlCheckbox = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.formSubmitController = new _chunk4654KI5LJs.FormSubmitController(this, {
            value: (control)=>control.checked ? control.value : void 0
        });
        this.inputId = `checkbox-${++id}`;
        this.labelId = `checkbox-label-${id}`;
        this.hasFocus = false;
        this.disabled = false;
        this.required = false;
        this.checked = false;
        this.indeterminate = false;
        this.invalid = false;
    }
    firstUpdated() {
        this.invalid = !this.input.checkValidity();
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleClick() {
        this.checked = !this.checked;
        this.indeterminate = false;
        _chunkI4TE3TJVJs.emit(this, "sl-change");
    }
    handleBlur() {
        this.hasFocus = false;
        _chunkI4TE3TJVJs.emit(this, "sl-blur");
    }
    handleDisabledChange() {
        if (this.input) {
            this.input.disabled = this.disabled;
            this.invalid = !this.input.checkValidity();
        }
    }
    handleFocus() {
        this.hasFocus = true;
        _chunkI4TE3TJVJs.emit(this, "sl-focus");
    }
    handleStateChange() {
        this.invalid = !this.input.checkValidity();
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <label
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            checkbox: true,
            "checkbox--checked": this.checked,
            "checkbox--disabled": this.disabled,
            "checkbox--focused": this.hasFocus,
            "checkbox--indeterminate": this.indeterminate
        })}
        for=${this.inputId}
      >
        <input
          id=${this.inputId}
          class="checkbox__input"
          type="checkbox"
          name=${_chunkKJOCH52QJs.l(this.name)}
          value=${_chunkKJOCH52QJs.l(this.value)}
          .indeterminate=${_chunkGPPFFSGRJs.l(this.indeterminate)}
          .checked=${_chunkGPPFFSGRJs.l(this.checked)}
          .disabled=${this.disabled}
          .required=${this.required}
          role="checkbox"
          aria-checked=${this.checked ? "true" : "false"}
          aria-labelledby=${this.labelId}
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
        />

        <span part="control" class="checkbox__control">
          ${this.checked ? _chunk2VBMOEKGJs.$`
                <span part="checked-icon" class="checkbox__icon">
                  <svg viewBox="0 0 16 16">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
                      <g stroke="currentColor" stroke-width="2">
                        <g transform="translate(3.428571, 3.428571)">
                          <path d="M0,5.71428571 L3.42857143,9.14285714"></path>
                          <path d="M9.14285714,0 L3.42857143,9.14285714"></path>
                        </g>
                      </g>
                    </g>
                  </svg>
                </span>
              ` : ""}
          ${!this.checked && this.indeterminate ? _chunk2VBMOEKGJs.$`
                <span part="indeterminate-icon" class="checkbox__icon">
                  <svg viewBox="0 0 16 16">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
                      <g stroke="currentColor" stroke-width="2">
                        <g transform="translate(2.285714, 6.857143)">
                          <path d="M10.2857143,1.14285714 L1.14285714,1.14285714"></path>
                        </g>
                      </g>
                    </g>
                  </svg>
                </span>
              ` : ""}
        </span>

        <span part="label" id=${this.labelId} class="checkbox__label">
          <slot></slot>
        </span>
      </label>
    `;
    }
};
SlCheckbox.styles = _chunkB3QJZERKJs.checkbox_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('input[type="checkbox"]')
], SlCheckbox.prototype, "input", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlCheckbox.prototype, "hasFocus", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlCheckbox.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlCheckbox.prototype, "value", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlCheckbox.prototype, "disabled", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlCheckbox.prototype, "required", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlCheckbox.prototype, "checked", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlCheckbox.prototype, "indeterminate", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlCheckbox.prototype, "invalid", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("disabled")
], SlCheckbox.prototype, "handleDisabledChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("checked", {
        waitUntilFirstUpdate: true
    }),
    _chunkBD26TKS4Js.watch("indeterminate", {
        waitUntilFirstUpdate: true
    })
], SlCheckbox.prototype, "handleStateChange", 1);
SlCheckbox = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-checkbox")
], SlCheckbox);

},{"./chunk.GPPFFSGR.js":"cl2mB","./chunk.4654KI5L.js":"3AQaY","./chunk.B3QJZERK.js":"Iy7So","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Iy7So":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkbox_styles_default", ()=>checkbox_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/checkbox/checkbox.styles.ts
var checkbox_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .checkbox {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .checkbox__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--sl-toggle-size);
    height: var(--sl-toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 2px;
    background-color: var(--sl-input-background-color);
    color: var(--sl-color-neutral-0);
    transition: var(--sl-transition-fast) border-color, var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color, var(--sl-transition-fast) box-shadow;
  }

  .checkbox__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  .checkbox__control .checkbox__icon {
    display: inline-flex;
    width: var(--sl-toggle-size);
    height: var(--sl-toggle-size);
  }

  .checkbox__control .checkbox__icon svg {
    width: 100%;
    height: 100%;
  }

  /* Hover */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Focus */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled)
    .checkbox__input${_chunkAN2XMPAVJs.focusVisibleSelector}
    ~ .checkbox__control {
    border-color: var(--sl-input-border-color-focus);
    background-color: var(--sl-input-background-color-focus);
    box-shadow: var(--sl-focus-ring);
  }

  /* Checked/indeterminate */
  .checkbox--checked .checkbox__control,
  .checkbox--indeterminate .checkbox__control {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked/indeterminate + hover */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked/indeterminate + focus */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__input${_chunkAN2XMPAVJs.focusVisibleSelector} ~ .checkbox__control,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled)
    .checkbox__input${_chunkAN2XMPAVJs.focusVisibleSelector}
    ~ .checkbox__control {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
    box-shadow: var(--sl-focus-ring);
  }

  /* Disabled */
  .checkbox--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .checkbox__label {
    line-height: var(--sl-toggle-size);
    margin-left: 0.5em;
    user-select: none;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"haGFF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlAvatar", ()=>SlAvatar
);
var _chunkLLDC53GLJs = require("./chunk.LLDC53GL.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/avatar/avatar.ts
var SlAvatar = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasError = false;
        this.shape = "circle";
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            avatar: true,
            "avatar--circle": this.shape === "circle",
            "avatar--rounded": this.shape === "rounded",
            "avatar--square": this.shape === "square"
        })}
        role="img"
        aria-label=${this.label}
      >
        ${this.initials ? _chunk2VBMOEKGJs.$` <div part="initials" class="avatar__initials">${this.initials}</div> ` : _chunk2VBMOEKGJs.$`
              <div part="icon" class="avatar__icon" aria-hidden="true">
                <slot name="icon">
                  <sl-icon name="person-fill" library="system"></sl-icon>
                </slot>
              </div>
            `}
        ${this.image && !this.hasError ? _chunk2VBMOEKGJs.$`
              <img
                part="image"
                class="avatar__image"
                src="${this.image}"
                alt=""
                @error="${()=>this.hasError = true
        }"
              />
            ` : ""}
      </div>
    `;
    }
};
SlAvatar.styles = _chunkLLDC53GLJs.avatar_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlAvatar.prototype, "hasError", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAvatar.prototype, "image", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAvatar.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAvatar.prototype, "initials", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlAvatar.prototype, "shape", 2);
SlAvatar = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-avatar")
], SlAvatar);

},{"./chunk.LLDC53GL.js":"a2Diq","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2Diq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avatar_styles_default", ()=>avatar_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/avatar/avatar.styles.ts
var avatar_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;

    --size: 3rem;
  }

  .avatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: var(--size);
    height: var(--size);
    background-color: var(--sl-color-neutral-400);
    font-family: var(--sl-font-sans);
    font-size: calc(var(--size) * 0.5);
    font-weight: var(--sl-font-weight-normal);
    color: var(--sl-color-neutral-0);
    overflow: hidden;
    user-select: none;
    vertical-align: middle;
  }

  .avatar--circle {
    border-radius: var(--sl-border-radius-circle);
  }

  .avatar--rounded {
    border-radius: var(--sl-border-radius-medium);
  }

  .avatar--square {
    border-radius: 0;
  }

  .avatar__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .avatar__initials {
    line-height: 1;
    text-transform: uppercase;
  }

  .avatar__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9bGyV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlBadge", ()=>SlBadge
);
var _chunkLX3FJWTQJs = require("./chunk.LX3FJWTQ.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/badge/badge.ts
var SlBadge = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.variant = "primary";
        this.pill = false;
        this.pulse = false;
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <span
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            badge: true,
            "badge--primary": this.variant === "primary",
            "badge--success": this.variant === "success",
            "badge--neutral": this.variant === "neutral",
            "badge--warning": this.variant === "warning",
            "badge--danger": this.variant === "danger",
            "badge--pill": this.pill,
            "badge--pulse": this.pulse
        })}
        role="status"
      >
        <slot></slot>
      </span>
    `;
    }
};
SlBadge.styles = _chunkLX3FJWTQJs.badge_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlBadge.prototype, "variant", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlBadge.prototype, "pill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlBadge.prototype, "pulse", 2);
SlBadge = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-badge")
], SlBadge);

},{"./chunk.LX3FJWTQ.js":"3OBBm","./chunk.W2WMQSCE.js":"9o2tn","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OBBm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "badge_styles_default", ()=>badge_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/badge/badge.styles.ts
var badge_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-flex;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: var(--sl-font-size-x-small);
    font-weight: var(--sl-font-weight-semibold);
    letter-spacing: var(--sl-letter-spacing-normal);
    line-height: 1;
    border-radius: var(--sl-border-radius-small);
    border: solid 1px var(--sl-color-neutral-0);
    white-space: nowrap;
    padding: 3px 6px;
    user-select: none;
    cursor: inherit;
  }

  /* Variant modifiers */
  .badge--primary {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--success {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--neutral {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--warning {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--danger {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /* Pill modifier */
  .badge--pill {
    border-radius: var(--sl-border-radius-pill);
  }

  /* Pulse modifier */
  .badge--pulse {
    animation: pulse 1.5s infinite;
  }

  .badge--pulse.badge--primary {
    --pulse-color: var(--sl-color-primary-600);
  }

  .badge--pulse.badge--success {
    --pulse-color: var(--sl-color-success-600);
  }

  .badge--pulse.badge--neutral {
    --pulse-color: var(--sl-color-neutral-600);
  }

  .badge--pulse.badge--warning {
    --pulse-color: var(--sl-color-warning-600);
  }

  .badge--pulse.badge--danger {
    --pulse-color: var(--sl-color-danger-600);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--pulse-color);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qy7P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlBreadcrumb", ()=>SlBreadcrumb
);
var _chunkSGGKF7FJJs = require("./chunk.SGGKF7FJ.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/breadcrumb/breadcrumb.ts
var SlBreadcrumb = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.label = "Breadcrumb";
    }
    getSeparator() {
        const separator = this.separatorSlot.assignedElements({
            flatten: true
        })[0];
        const clone = separator.cloneNode(true);
        [
            clone,
            ...clone.querySelectorAll("[id]")
        ].map((el)=>el.removeAttribute("id")
        );
        clone.slot = "separator";
        return clone;
    }
    handleSlotChange() {
        const items = [
            ...this.defaultSlot.assignedElements({
                flatten: true
            })
        ].filter((item)=>item.tagName.toLowerCase() === "sl-breadcrumb-item"
        );
        items.map((item, index)=>{
            const separator = item.querySelector('[slot="separator"]');
            if (!separator) item.append(this.getSeparator());
            if (index === items.length - 1) item.setAttribute("aria-current", "page");
            else item.removeAttribute("aria-current");
        });
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <nav part="base" class="breadcrumb" aria-label=${this.label}>
        <slot @slotchange=${this.handleSlotChange}></slot>
      </nav>

      <slot name="separator" hidden aria-hidden="true">
        <sl-icon name="chevron-right" library="system"></sl-icon>
      </slot>
    `;
    }
};
SlBreadcrumb.styles = _chunkSGGKF7FJJs.breadcrumb_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("slot")
], SlBreadcrumb.prototype, "defaultSlot", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('slot[name="separator"]')
], SlBreadcrumb.prototype, "separatorSlot", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlBreadcrumb.prototype, "label", 2);
SlBreadcrumb = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-breadcrumb")
], SlBreadcrumb);

},{"./chunk.SGGKF7FJ.js":"tUqLP","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"tUqLP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breadcrumb_styles_default", ()=>breadcrumb_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/breadcrumb/breadcrumb.styles.ts
var breadcrumb_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  .breadcrumb {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2n45":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlBreadcrumbItem", ()=>SlBreadcrumbItem
);
var _chunk5TL5QPK4Js = require("./chunk.5TL5QPK4.js");
var _chunk5NXHIG6MJs = require("./chunk.5NXHIG6M.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/breadcrumb-item/breadcrumb-item.ts
var SlBreadcrumbItem = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasSlotController = new _chunk5TL5QPK4Js.HasSlotController(this, "prefix", "suffix");
        this.rel = "noreferrer noopener";
    }
    render() {
        const isLink = this.href ? true : false;
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            "breadcrumb-item": true,
            "breadcrumb-item--has-prefix": this.hasSlotController.test("prefix"),
            "breadcrumb-item--has-suffix": this.hasSlotController.test("suffix")
        })}
      >
        <span part="prefix" class="breadcrumb-item__prefix">
          <slot name="prefix"></slot>
        </span>

        ${isLink ? _chunk2VBMOEKGJs.$`
              <a
                part="label"
                class="breadcrumb-item__label breadcrumb-item__label--link"
                href="${this.href}"
                target="${this.target}"
                rel=${_chunkKJOCH52QJs.l(this.target ? this.rel : void 0)}
              >
                <slot></slot>
              </a>
            ` : _chunk2VBMOEKGJs.$`
              <button part="label" type="button" class="breadcrumb-item__label breadcrumb-item__label--button">
                <slot></slot>
              </button>
            `}

        <span part="suffix" class="breadcrumb-item__suffix">
          <slot name="suffix"></slot>
        </span>

        <span part="separator" class="breadcrumb-item__separator" aria-hidden="true">
          <slot name="separator"></slot>
        </span>
      </div>
    `;
    }
};
SlBreadcrumbItem.styles = _chunk5NXHIG6MJs.breadcrumb_item_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlBreadcrumbItem.prototype, "href", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlBreadcrumbItem.prototype, "target", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlBreadcrumbItem.prototype, "rel", 2);
SlBreadcrumbItem = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-breadcrumb-item")
], SlBreadcrumbItem);

},{"./chunk.5TL5QPK4.js":"akO45","./chunk.5NXHIG6M.js":"lzVZW","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzVZW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "breadcrumb_item_styles_default", ()=>breadcrumb_item_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/breadcrumb-item/breadcrumb-item.styles.ts
var breadcrumb_item_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-flex;
  }

  .breadcrumb-item {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    color: var(--sl-color-neutral-600);
    line-height: var(--sl-line-height-normal);
    white-space: nowrap;
  }

  .breadcrumb-item__label {
    display: inline-block;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    text-decoration: none;
    color: inherit;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    padding: 0;
    margin: 0;
    cursor: pointer;
    transition: var(--sl-transition-fast) --color;
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label {
    color: var(--sl-color-primary-600);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:hover {
    color: var(--sl-color-primary-500);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:active {
    color: var(--sl-color-primary-600);
  }

  .breadcrumb-item__label${_chunkAN2XMPAVJs.focusVisibleSelector} {
    outline: none;
    box-shadow: var(--sl-focus-ring);
  }

  .breadcrumb-item__prefix,
  .breadcrumb-item__suffix {
    display: none;
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .breadcrumb-item--has-prefix .breadcrumb-item__prefix {
    display: inline-flex;
    margin-right: var(--sl-spacing-x-small);
  }

  .breadcrumb-item--has-suffix .breadcrumb-item__suffix {
    display: inline-flex;
    margin-left: var(--sl-spacing-x-small);
  }

  :host(:last-of-type) .breadcrumb-item__separator {
    display: none;
  }

  .breadcrumb-item__separator {
    display: inline-flex;
    align-items: center;
    margin: 0 var(--sl-spacing-x-small);
    user-select: none;
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fr9xc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlAnimation", ()=>SlAnimation
);
var _chunkPSXSU6WUJs = require("./chunk.PSXSU6WU.js");
var _chunk437GBGKRJs = require("./chunk.437GBGKR.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/animation/animation.ts
var SlAnimation = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.hasStarted = false;
        this.name = "none";
        this.play = false;
        this.delay = 0;
        this.direction = "normal";
        this.duration = 1000;
        this.easing = "linear";
        this.endDelay = 0;
        this.fill = "auto";
        this.iterations = Infinity;
        this.iterationStart = 0;
        this.playbackRate = 1;
    }
    get currentTime() {
        var _a;
        return ((_a = this.animation) == null ? void 0 : _a.currentTime) || 0;
    }
    set currentTime(time) {
        if (this.animation) this.animation.currentTime = time;
    }
    connectedCallback() {
        super.connectedCallback();
        this.createAnimation();
        this.handleAnimationCancel = this.handleAnimationCancel.bind(this);
        this.handleAnimationFinish = this.handleAnimationFinish.bind(this);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.destroyAnimation();
    }
    async handleAnimationChange() {
        if (!this.hasUpdated) return;
        this.createAnimation();
    }
    handleAnimationFinish() {
        this.play = false;
        this.hasStarted = false;
        _chunkI4TE3TJVJs.emit(this, "sl-finish");
    }
    handleAnimationCancel() {
        this.play = false;
        this.hasStarted = false;
        _chunkI4TE3TJVJs.emit(this, "sl-cancel");
    }
    handlePlayChange() {
        if (this.animation) {
            if (this.play && !this.hasStarted) {
                this.hasStarted = true;
                _chunkI4TE3TJVJs.emit(this, "sl-start");
            }
            this.play ? this.animation.play() : this.animation.pause();
            return true;
        } else return false;
    }
    handlePlaybackRateChange() {
        if (this.animation) this.animation.playbackRate = this.playbackRate;
    }
    handleSlotChange() {
        this.destroyAnimation();
        this.createAnimation();
    }
    async createAnimation() {
        const easing = _chunk437GBGKRJs.dist_exports.easings[this.easing] || this.easing;
        const keyframes = this.keyframes ? this.keyframes : _chunk437GBGKRJs.dist_exports[this.name];
        const slot = await this.defaultSlot;
        const element = slot.assignedElements()[0];
        if (!element) return false;
        this.destroyAnimation();
        this.animation = element.animate(keyframes, {
            delay: this.delay,
            direction: this.direction,
            duration: this.duration,
            easing,
            endDelay: this.endDelay,
            fill: this.fill,
            iterationStart: this.iterationStart,
            iterations: this.iterations
        });
        this.animation.playbackRate = this.playbackRate;
        this.animation.addEventListener("cancel", this.handleAnimationCancel);
        this.animation.addEventListener("finish", this.handleAnimationFinish);
        if (this.play) {
            this.hasStarted = true;
            _chunkI4TE3TJVJs.emit(this, "sl-start");
        } else this.animation.pause();
        return true;
    }
    destroyAnimation() {
        if (this.animation) {
            this.animation.cancel();
            this.animation.removeEventListener("cancel", this.handleAnimationCancel);
            this.animation.removeEventListener("finish", this.handleAnimationFinish);
            this.hasStarted = false;
        }
    }
    cancel() {
        try {
            this.animation.cancel();
        } catch (e3) {
        }
    }
    finish() {
        try {
            this.animation.finish();
        } catch (e3) {
        }
    }
    render() {
        return _chunk2VBMOEKGJs.$` <slot @slotchange=${this.handleSlotChange}></slot> `;
    }
};
SlAnimation.styles = _chunkPSXSU6WUJs.animation_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e2("slot")
], SlAnimation.prototype, "defaultSlot", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimation.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlAnimation.prototype, "play", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlAnimation.prototype, "delay", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimation.prototype, "direction", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlAnimation.prototype, "duration", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimation.prototype, "easing", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "end-delay",
        type: Number
    })
], SlAnimation.prototype, "endDelay", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimation.prototype, "fill", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlAnimation.prototype, "iterations", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "iteration-start",
        type: Number
    })
], SlAnimation.prototype, "iterationStart", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: false
    })
], SlAnimation.prototype, "keyframes", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        attribute: "playback-rate",
        type: Number
    })
], SlAnimation.prototype, "playbackRate", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("name"),
    _chunkBD26TKS4Js.watch("delay"),
    _chunkBD26TKS4Js.watch("direction"),
    _chunkBD26TKS4Js.watch("duration"),
    _chunkBD26TKS4Js.watch("easing"),
    _chunkBD26TKS4Js.watch("endDelay"),
    _chunkBD26TKS4Js.watch("fill"),
    _chunkBD26TKS4Js.watch("iterations"),
    _chunkBD26TKS4Js.watch("iterationsStart"),
    _chunkBD26TKS4Js.watch("keyframes")
], SlAnimation.prototype, "handleAnimationChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("play")
], SlAnimation.prototype, "handlePlayChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("playbackRate")
], SlAnimation.prototype, "handlePlaybackRateChange", 1);
SlAnimation = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-animation")
], SlAnimation);

},{"./chunk.PSXSU6WU.js":"gMTYr","./chunk.437GBGKR.js":"bwWOC","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMTYr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animation_styles_default", ()=>animation_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/animation/animation.styles.ts
var animation_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: contents;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwWOC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dist_exports", ()=>dist_exports
);
parcelHelpers.export(exports, "getAnimationNames", ()=>getAnimationNames
);
parcelHelpers.export(exports, "getEasingNames", ()=>getEasingNames
);
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// node_modules/@shoelace-style/animations/dist/index.js
var dist_exports = {
};
_chunk4M3HOXYQJs.__export(dist_exports, {
    backInDown: ()=>backInDown
    ,
    backInLeft: ()=>backInLeft
    ,
    backInRight: ()=>backInRight
    ,
    backInUp: ()=>backInUp
    ,
    backOutDown: ()=>backOutDown
    ,
    backOutLeft: ()=>backOutLeft
    ,
    backOutRight: ()=>backOutRight
    ,
    backOutUp: ()=>backOutUp
    ,
    bounce: ()=>bounce
    ,
    bounceIn: ()=>bounceIn
    ,
    bounceInDown: ()=>bounceInDown
    ,
    bounceInLeft: ()=>bounceInLeft
    ,
    bounceInRight: ()=>bounceInRight
    ,
    bounceInUp: ()=>bounceInUp
    ,
    bounceOut: ()=>bounceOut
    ,
    bounceOutDown: ()=>bounceOutDown
    ,
    bounceOutLeft: ()=>bounceOutLeft
    ,
    bounceOutRight: ()=>bounceOutRight
    ,
    bounceOutUp: ()=>bounceOutUp
    ,
    easings: ()=>easings
    ,
    fadeIn: ()=>fadeIn
    ,
    fadeInBottomLeft: ()=>fadeInBottomLeft
    ,
    fadeInBottomRight: ()=>fadeInBottomRight
    ,
    fadeInDown: ()=>fadeInDown
    ,
    fadeInDownBig: ()=>fadeInDownBig
    ,
    fadeInLeft: ()=>fadeInLeft
    ,
    fadeInLeftBig: ()=>fadeInLeftBig
    ,
    fadeInRight: ()=>fadeInRight
    ,
    fadeInRightBig: ()=>fadeInRightBig
    ,
    fadeInTopLeft: ()=>fadeInTopLeft
    ,
    fadeInTopRight: ()=>fadeInTopRight
    ,
    fadeInUp: ()=>fadeInUp
    ,
    fadeInUpBig: ()=>fadeInUpBig
    ,
    fadeOut: ()=>fadeOut
    ,
    fadeOutBottomLeft: ()=>fadeOutBottomLeft
    ,
    fadeOutBottomRight: ()=>fadeOutBottomRight
    ,
    fadeOutDown: ()=>fadeOutDown
    ,
    fadeOutDownBig: ()=>fadeOutDownBig
    ,
    fadeOutLeft: ()=>fadeOutLeft
    ,
    fadeOutLeftBig: ()=>fadeOutLeftBig
    ,
    fadeOutRight: ()=>fadeOutRight
    ,
    fadeOutRightBig: ()=>fadeOutRightBig
    ,
    fadeOutTopLeft: ()=>fadeOutTopLeft
    ,
    fadeOutTopRight: ()=>fadeOutTopRight
    ,
    fadeOutUp: ()=>fadeOutUp
    ,
    fadeOutUpBig: ()=>fadeOutUpBig
    ,
    flash: ()=>flash
    ,
    flip: ()=>flip
    ,
    flipInX: ()=>flipInX
    ,
    flipInY: ()=>flipInY
    ,
    flipOutX: ()=>flipOutX
    ,
    flipOutY: ()=>flipOutY
    ,
    headShake: ()=>headShake
    ,
    heartBeat: ()=>heartBeat
    ,
    hinge: ()=>hinge
    ,
    jackInTheBox: ()=>jackInTheBox
    ,
    jello: ()=>jello
    ,
    lightSpeedInLeft: ()=>lightSpeedInLeft
    ,
    lightSpeedInRight: ()=>lightSpeedInRight
    ,
    lightSpeedOutLeft: ()=>lightSpeedOutLeft
    ,
    lightSpeedOutRight: ()=>lightSpeedOutRight
    ,
    pulse: ()=>pulse
    ,
    rollIn: ()=>rollIn
    ,
    rollOut: ()=>rollOut
    ,
    rotateIn: ()=>rotateIn
    ,
    rotateInDownLeft: ()=>rotateInDownLeft
    ,
    rotateInDownRight: ()=>rotateInDownRight
    ,
    rotateInUpLeft: ()=>rotateInUpLeft
    ,
    rotateInUpRight: ()=>rotateInUpRight
    ,
    rotateOut: ()=>rotateOut
    ,
    rotateOutDownLeft: ()=>rotateOutDownLeft
    ,
    rotateOutDownRight: ()=>rotateOutDownRight
    ,
    rotateOutUpLeft: ()=>rotateOutUpLeft
    ,
    rotateOutUpRight: ()=>rotateOutUpRight
    ,
    rubberBand: ()=>rubberBand
    ,
    shake: ()=>shake
    ,
    shakeX: ()=>shakeX
    ,
    shakeY: ()=>shakeY
    ,
    slideInDown: ()=>slideInDown
    ,
    slideInLeft: ()=>slideInLeft
    ,
    slideInRight: ()=>slideInRight
    ,
    slideInUp: ()=>slideInUp
    ,
    slideOutDown: ()=>slideOutDown
    ,
    slideOutLeft: ()=>slideOutLeft
    ,
    slideOutRight: ()=>slideOutRight
    ,
    slideOutUp: ()=>slideOutUp
    ,
    swing: ()=>swing
    ,
    tada: ()=>tada
    ,
    wobble: ()=>wobble
    ,
    zoomIn: ()=>zoomIn
    ,
    zoomInDown: ()=>zoomInDown
    ,
    zoomInLeft: ()=>zoomInLeft
    ,
    zoomInRight: ()=>zoomInRight
    ,
    zoomInUp: ()=>zoomInUp
    ,
    zoomOut: ()=>zoomOut
    ,
    zoomOutDown: ()=>zoomOutDown
    ,
    zoomOutLeft: ()=>zoomOutLeft
    ,
    zoomOutRight: ()=>zoomOutRight
    ,
    zoomOutUp: ()=>zoomOutUp
});
// node_modules/@shoelace-style/animations/dist/attention_seekers/bounce.js
var bounce = [
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.2,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.4,
        easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        transform: "translate3d(0, -30px, 0) scaleY(1.1)"
    },
    {
        offset: 0.43,
        easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        transform: "translate3d(0, -30px, 0) scaleY(1.1)"
    },
    {
        offset: 0.53,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.7,
        easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        transform: "translate3d(0, -15px, 0) scaleY(1.05)"
    },
    {
        offset: 0.8,
        "transition-timing-function": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        transform: "translate3d(0, 0, 0) scaleY(0.95)"
    },
    {
        offset: 0.9,
        transform: "translate3d(0, -4px, 0) scaleY(1.02)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/flash.js
var flash = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 0.25,
        opacity: "0"
    },
    {
        offset: 0.5,
        opacity: "1"
    },
    {
        offset: 0.75,
        opacity: "0"
    },
    {
        offset: 1,
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/headShake.js
var headShake = [
    {
        offset: 0,
        transform: "translateX(0)"
    },
    {
        offset: 0.065,
        transform: "translateX(-6px) rotateY(-9deg)"
    },
    {
        offset: 0.185,
        transform: "translateX(5px) rotateY(7deg)"
    },
    {
        offset: 0.315,
        transform: "translateX(-3px) rotateY(-5deg)"
    },
    {
        offset: 0.435,
        transform: "translateX(2px) rotateY(3deg)"
    },
    {
        offset: 0.5,
        transform: "translateX(0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/heartBeat.js
var heartBeat = [
    {
        offset: 0,
        transform: "scale(1)"
    },
    {
        offset: 0.14,
        transform: "scale(1.3)"
    },
    {
        offset: 0.28,
        transform: "scale(1)"
    },
    {
        offset: 0.42,
        transform: "scale(1.3)"
    },
    {
        offset: 0.7,
        transform: "scale(1)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/jello.js
var jello = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.111,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.222,
        transform: "skewX(-12.5deg) skewY(-12.5deg)"
    },
    {
        offset: 0.33299999999999996,
        transform: "skewX(6.25deg) skewY(6.25deg)"
    },
    {
        offset: 0.444,
        transform: "skewX(-3.125deg) skewY(-3.125deg)"
    },
    {
        offset: 0.555,
        transform: "skewX(1.5625deg) skewY(1.5625deg)"
    },
    {
        offset: 0.6659999999999999,
        transform: "skewX(-0.78125deg) skewY(-0.78125deg)"
    },
    {
        offset: 0.777,
        transform: "skewX(0.390625deg) skewY(0.390625deg)"
    },
    {
        offset: 0.888,
        transform: "skewX(-0.1953125deg) skewY(-0.1953125deg)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/pulse.js
var pulse = [
    {
        offset: 0,
        transform: "scale3d(1, 1, 1)"
    },
    {
        offset: 0.5,
        transform: "scale3d(1.05, 1.05, 1.05)"
    },
    {
        offset: 1,
        transform: "scale3d(1, 1, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/rubberBand.js
var rubberBand = [
    {
        offset: 0,
        transform: "scale3d(1, 1, 1)"
    },
    {
        offset: 0.3,
        transform: "scale3d(1.25, 0.75, 1)"
    },
    {
        offset: 0.4,
        transform: "scale3d(0.75, 1.25, 1)"
    },
    {
        offset: 0.5,
        transform: "scale3d(1.15, 0.85, 1)"
    },
    {
        offset: 0.65,
        transform: "scale3d(0.95, 1.05, 1)"
    },
    {
        offset: 0.75,
        transform: "scale3d(1.05, 0.95, 1)"
    },
    {
        offset: 1,
        transform: "scale3d(1, 1, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/shake.js
var shake = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.1,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.2,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.3,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.4,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.5,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.6,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.7,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.8,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.9,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/shakeX.js
var shakeX = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.1,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.2,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.3,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.4,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.5,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.6,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.7,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 0.8,
        transform: "translate3d(10px, 0, 0)"
    },
    {
        offset: 0.9,
        transform: "translate3d(-10px, 0, 0)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/shakeY.js
var shakeY = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.1,
        transform: "translate3d(0, -10px, 0)"
    },
    {
        offset: 0.2,
        transform: "translate3d(0, 10px, 0)"
    },
    {
        offset: 0.3,
        transform: "translate3d(0, -10px, 0)"
    },
    {
        offset: 0.4,
        transform: "translate3d(0, 10px, 0)"
    },
    {
        offset: 0.5,
        transform: "translate3d(0, -10px, 0)"
    },
    {
        offset: 0.6,
        transform: "translate3d(0, 10px, 0)"
    },
    {
        offset: 0.7,
        transform: "translate3d(0, -10px, 0)"
    },
    {
        offset: 0.8,
        transform: "translate3d(0, 10px, 0)"
    },
    {
        offset: 0.9,
        transform: "translate3d(0, -10px, 0)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/swing.js
var swing = [
    {
        offset: 0.2,
        transform: "rotate3d(0, 0, 1, 15deg)"
    },
    {
        offset: 0.4,
        transform: "rotate3d(0, 0, 1, -10deg)"
    },
    {
        offset: 0.6,
        transform: "rotate3d(0, 0, 1, 5deg)"
    },
    {
        offset: 0.8,
        transform: "rotate3d(0, 0, 1, -5deg)"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, 0deg)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/tada.js
var tada = [
    {
        offset: 0,
        transform: "scale3d(1, 1, 1)"
    },
    {
        offset: 0.1,
        transform: "scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.2,
        transform: "scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.3,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)"
    },
    {
        offset: 0.4,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.5,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)"
    },
    {
        offset: 0.6,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.7,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)"
    },
    {
        offset: 0.8,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.9,
        transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)"
    },
    {
        offset: 1,
        transform: "scale3d(1, 1, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/attention_seekers/wobble.js
var wobble = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 0.15,
        transform: "translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg)"
    },
    {
        offset: 0.3,
        transform: "translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg)"
    },
    {
        offset: 0.45,
        transform: "translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg)"
    },
    {
        offset: 0.6,
        transform: "translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg)"
    },
    {
        offset: 0.75,
        transform: "translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/back_entrances/backInDown.js
var backInDown = [
    {
        offset: 0,
        transform: "translateY(-1200px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 0.8,
        transform: "translateY(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "scale(1)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/back_entrances/backInLeft.js
var backInLeft = [
    {
        offset: 0,
        transform: "translateX(-2000px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 0.8,
        transform: "translateX(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "scale(1)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/back_entrances/backInRight.js
var backInRight = [
    {
        offset: 0,
        transform: "translateX(2000px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 0.8,
        transform: "translateX(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "scale(1)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/back_entrances/backInUp.js
var backInUp = [
    {
        offset: 0,
        transform: "translateY(1200px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 0.8,
        transform: "translateY(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "scale(1)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/back_exits/backOutDown.js
var backOutDown = [
    {
        offset: 0,
        transform: "scale(1)",
        opacity: "1"
    },
    {
        offset: 0.2,
        transform: "translateY(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "translateY(700px) scale(0.7)",
        opacity: "0.7"
    }
];
// node_modules/@shoelace-style/animations/dist/back_exits/backOutLeft.js
var backOutLeft = [
    {
        offset: 0,
        transform: "scale(1)",
        opacity: "1"
    },
    {
        offset: 0.2,
        transform: "translateX(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "translateX(-2000px) scale(0.7)",
        opacity: "0.7"
    }
];
// node_modules/@shoelace-style/animations/dist/back_exits/backOutRight.js
var backOutRight = [
    {
        offset: 0,
        transform: "scale(1)",
        opacity: "1"
    },
    {
        offset: 0.2,
        transform: "translateX(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "translateX(2000px) scale(0.7)",
        opacity: "0.7"
    }
];
// node_modules/@shoelace-style/animations/dist/back_exits/backOutUp.js
var backOutUp = [
    {
        offset: 0,
        transform: "scale(1)",
        opacity: "1"
    },
    {
        offset: 0.2,
        transform: "translateY(0px) scale(0.7)",
        opacity: "0.7"
    },
    {
        offset: 1,
        transform: "translateY(-700px) scale(0.7)",
        opacity: "0.7"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceIn.js
var bounceIn = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.3, 0.3, 0.3)"
    },
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.2,
        transform: "scale3d(1.1, 1.1, 1.1)"
    },
    {
        offset: 0.2,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.4,
        transform: "scale3d(0.9, 0.9, 0.9)"
    },
    {
        offset: 0.4,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "scale3d(1.03, 1.03, 1.03)"
    },
    {
        offset: 0.6,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.8,
        transform: "scale3d(0.97, 0.97, 0.97)"
    },
    {
        offset: 0.8,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "scale3d(1, 1, 1)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInDown.js
var bounceInDown = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, -3000px, 0) scaleY(3)"
    },
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "translate3d(0, 25px, 0) scaleY(0.9)"
    },
    {
        offset: 0.6,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.75,
        transform: "translate3d(0, -10px, 0) scaleY(0.95)"
    },
    {
        offset: 0.75,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.9,
        transform: "translate3d(0, 5px, 0) scaleY(0.985)"
    },
    {
        offset: 0.9,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInLeft.js
var bounceInLeft = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-3000px, 0, 0) scaleX(3)"
    },
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "translate3d(25px, 0, 0) scaleX(1)"
    },
    {
        offset: 0.6,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.75,
        transform: "translate3d(-10px, 0, 0) scaleX(0.98)"
    },
    {
        offset: 0.75,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.9,
        transform: "translate3d(5px, 0, 0) scaleX(0.995)"
    },
    {
        offset: 0.9,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInRight.js
var bounceInRight = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(3000px, 0, 0) scaleX(3)"
    },
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "translate3d(-25px, 0, 0) scaleX(1)"
    },
    {
        offset: 0.6,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.75,
        transform: "translate3d(10px, 0, 0) scaleX(0.98)"
    },
    {
        offset: 0.75,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.9,
        transform: "translate3d(-5px, 0, 0) scaleX(0.995)"
    },
    {
        offset: 0.9,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInUp.js
var bounceInUp = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, 3000px, 0) scaleY(5)"
    },
    {
        offset: 0,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "translate3d(0, -20px, 0) scaleY(0.9)"
    },
    {
        offset: 0.6,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.75,
        transform: "translate3d(0, 10px, 0) scaleY(0.95)"
    },
    {
        offset: 0.75,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 0.9,
        transform: "translate3d(0, -5px, 0) scaleY(0.985)"
    },
    {
        offset: 0.9,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        easing: "cubic-bezier(0.215, 0.61, 0.355, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOut.js
var bounceOut = [
    {
        offset: 0.2,
        transform: "scale3d(0.9, 0.9, 0.9)"
    },
    {
        offset: 0.5,
        opacity: "1",
        transform: "scale3d(1.1, 1.1, 1.1)"
    },
    {
        offset: 0.55,
        opacity: "1",
        transform: "scale3d(1.1, 1.1, 1.1)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "scale3d(0.3, 0.3, 0.3)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutDown.js
var bounceOutDown = [
    {
        offset: 0.2,
        transform: "translate3d(0, 10px, 0) scaleY(0.985)"
    },
    {
        offset: 0.4,
        opacity: "1",
        transform: "translate3d(0, -20px, 0) scaleY(0.9)"
    },
    {
        offset: 0.45,
        opacity: "1",
        transform: "translate3d(0, -20px, 0) scaleY(0.9)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, 2000px, 0) scaleY(3)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutLeft.js
var bounceOutLeft = [
    {
        offset: 0.2,
        opacity: "1",
        transform: "translate3d(20px, 0, 0) scaleX(0.9)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(-2000px, 0, 0) scaleX(2)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutRight.js
var bounceOutRight = [
    {
        offset: 0.2,
        opacity: "1",
        transform: "translate3d(-20px, 0, 0) scaleX(0.9)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(2000px, 0, 0) scaleX(2)"
    }
];
// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutUp.js
var bounceOutUp = [
    {
        offset: 0.2,
        transform: "translate3d(0, -10px, 0) scaleY(0.985)"
    },
    {
        offset: 0.4,
        opacity: "1",
        transform: "translate3d(0, 20px, 0) scaleY(0.9)"
    },
    {
        offset: 0.45,
        opacity: "1",
        transform: "translate3d(0, 20px, 0) scaleY(0.9)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, -2000px, 0) scaleY(3)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeIn.js
var fadeIn = [
    {
        offset: 0,
        opacity: "0"
    },
    {
        offset: 1,
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInBottomLeft.js
var fadeInBottomLeft = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-100%, 100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInBottomRight.js
var fadeInBottomRight = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(100%, 100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInDown.js
var fadeInDown = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, -100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInDownBig.js
var fadeInDownBig = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, -2000px, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInLeft.js
var fadeInLeft = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-100%, 0, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInLeftBig.js
var fadeInLeftBig = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-2000px, 0, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInRight.js
var fadeInRight = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(100%, 0, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInRightBig.js
var fadeInRightBig = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(2000px, 0, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInTopLeft.js
var fadeInTopLeft = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-100%, -100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInTopRight.js
var fadeInTopRight = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(100%, -100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInUp.js
var fadeInUp = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, 100%, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInUpBig.js
var fadeInUpBig = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(0, 2000px, 0)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOut.js
var fadeOut = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutBottomLeft.js
var fadeOutBottomLeft = [
    {
        offset: 0,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(-100%, 100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutBottomRight.js
var fadeOutBottomRight = [
    {
        offset: 0,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(100%, 100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutDown.js
var fadeOutDown = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, 100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutDownBig.js
var fadeOutDownBig = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, 2000px, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutLeft.js
var fadeOutLeft = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(-100%, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutLeftBig.js
var fadeOutLeftBig = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(-2000px, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutRight.js
var fadeOutRight = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(100%, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutRightBig.js
var fadeOutRightBig = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(2000px, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutTopLeft.js
var fadeOutTopLeft = [
    {
        offset: 0,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(-100%, -100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutTopRight.js
var fadeOutTopRight = [
    {
        offset: 0,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(100%, -100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutUp.js
var fadeOutUp = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, -100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutUpBig.js
var fadeOutUpBig = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(0, -2000px, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/flippers/flip.js
var flip = [
    {
        offset: 0,
        transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg)",
        easing: "ease-out"
    },
    {
        offset: 0.4,
        transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -190deg)",
        easing: "ease-out"
    },
    {
        offset: 0.5,
        transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -170deg)",
        easing: "ease-in"
    },
    {
        offset: 0.8,
        transform: "perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)\n      rotate3d(0, 1, 0, 0deg)",
        easing: "ease-in"
    },
    {
        offset: 1,
        transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg)",
        easing: "ease-in"
    }
];
// node_modules/@shoelace-style/animations/dist/flippers/flipInX.js
var flipInX = [
    {
        offset: 0,
        transform: "perspective(400px) rotate3d(1, 0, 0, 90deg)",
        easing: "ease-in",
        opacity: "0"
    },
    {
        offset: 0.4,
        transform: "perspective(400px) rotate3d(1, 0, 0, -20deg)",
        easing: "ease-in"
    },
    {
        offset: 0.6,
        transform: "perspective(400px) rotate3d(1, 0, 0, 10deg)",
        opacity: "1"
    },
    {
        offset: 0.8,
        transform: "perspective(400px) rotate3d(1, 0, 0, -5deg)"
    },
    {
        offset: 1,
        transform: "perspective(400px)"
    }
];
// node_modules/@shoelace-style/animations/dist/flippers/flipInY.js
var flipInY = [
    {
        offset: 0,
        transform: "perspective(400px) rotate3d(0, 1, 0, 90deg)",
        easing: "ease-in",
        opacity: "0"
    },
    {
        offset: 0.4,
        transform: "perspective(400px) rotate3d(0, 1, 0, -20deg)",
        easing: "ease-in"
    },
    {
        offset: 0.6,
        transform: "perspective(400px) rotate3d(0, 1, 0, 10deg)",
        opacity: "1"
    },
    {
        offset: 0.8,
        transform: "perspective(400px) rotate3d(0, 1, 0, -5deg)"
    },
    {
        offset: 1,
        transform: "perspective(400px)"
    }
];
// node_modules/@shoelace-style/animations/dist/flippers/flipOutX.js
var flipOutX = [
    {
        offset: 0,
        transform: "perspective(400px)"
    },
    {
        offset: 0.3,
        transform: "perspective(400px) rotate3d(1, 0, 0, -20deg)",
        opacity: "1"
    },
    {
        offset: 1,
        transform: "perspective(400px) rotate3d(1, 0, 0, 90deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/flippers/flipOutY.js
var flipOutY = [
    {
        offset: 0,
        transform: "perspective(400px)"
    },
    {
        offset: 0.3,
        transform: "perspective(400px) rotate3d(0, 1, 0, -15deg)",
        opacity: "1"
    },
    {
        offset: 1,
        transform: "perspective(400px) rotate3d(0, 1, 0, 90deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedInLeft.js
var lightSpeedInLeft = [
    {
        offset: 0,
        transform: "translate3d(-100%, 0, 0) skewX(30deg)",
        opacity: "0"
    },
    {
        offset: 0.6,
        transform: "skewX(-20deg)",
        opacity: "1"
    },
    {
        offset: 0.8,
        transform: "skewX(5deg)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedInRight.js
var lightSpeedInRight = [
    {
        offset: 0,
        transform: "translate3d(100%, 0, 0) skewX(-30deg)",
        opacity: "0"
    },
    {
        offset: 0.6,
        transform: "skewX(20deg)",
        opacity: "1"
    },
    {
        offset: 0.8,
        transform: "skewX(-5deg)"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedOutLeft.js
var lightSpeedOutLeft = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "translate3d(-100%, 0, 0) skewX(-30deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedOutRight.js
var lightSpeedOutRight = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "translate3d(100%, 0, 0) skewX(30deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateIn.js
var rotateIn = [
    {
        offset: 0,
        transform: "rotate3d(0, 0, 1, -200deg)",
        opacity: "0"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInDownLeft.js
var rotateInDownLeft = [
    {
        offset: 0,
        transform: "rotate3d(0, 0, 1, -45deg)",
        opacity: "0"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInDownRight.js
var rotateInDownRight = [
    {
        offset: 0,
        transform: "rotate3d(0, 0, 1, 45deg)",
        opacity: "0"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInUpLeft.js
var rotateInUpLeft = [
    {
        offset: 0,
        transform: "rotate3d(0, 0, 1, 45deg)",
        opacity: "0"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInUpRight.js
var rotateInUpRight = [
    {
        offset: 0,
        transform: "rotate3d(0, 0, 1, -90deg)",
        opacity: "0"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)",
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOut.js
var rotateOut = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, 200deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutDownLeft.js
var rotateOutDownLeft = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, 45deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutDownRight.js
var rotateOutDownRight = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, -45deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutUpLeft.js
var rotateOutUpLeft = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, -45deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutUpRight.js
var rotateOutUpRight = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        transform: "rotate3d(0, 0, 1, 90deg)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInDown.js
var slideInDown = [
    {
        offset: 0,
        transform: "translate3d(0, -100%, 0)",
        visibility: "visible"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInLeft.js
var slideInLeft = [
    {
        offset: 0,
        transform: "translate3d(-100%, 0, 0)",
        visibility: "visible"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInRight.js
var slideInRight = [
    {
        offset: 0,
        transform: "translate3d(100%, 0, 0)",
        visibility: "visible"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInUp.js
var slideInUp = [
    {
        offset: 0,
        transform: "translate3d(0, 100%, 0)",
        visibility: "visible"
    },
    {
        offset: 1,
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutDown.js
var slideOutDown = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        visibility: "hidden",
        transform: "translate3d(0, 100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutLeft.js
var slideOutLeft = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        visibility: "hidden",
        transform: "translate3d(-100%, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutRight.js
var slideOutRight = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        visibility: "hidden",
        transform: "translate3d(100%, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutUp.js
var slideOutUp = [
    {
        offset: 0,
        transform: "translate3d(0, 0, 0)"
    },
    {
        offset: 1,
        visibility: "hidden",
        transform: "translate3d(0, -100%, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/specials/hinge.js
var hinge = [
    {
        offset: 0,
        easing: "ease-in-out"
    },
    {
        offset: 0.2,
        transform: "rotate3d(0, 0, 1, 80deg)",
        easing: "ease-in-out"
    },
    {
        offset: 0.4,
        transform: "rotate3d(0, 0, 1, 60deg)",
        easing: "ease-in-out",
        opacity: "1"
    },
    {
        offset: 0.6,
        transform: "rotate3d(0, 0, 1, 80deg)",
        easing: "ease-in-out"
    },
    {
        offset: 0.8,
        transform: "rotate3d(0, 0, 1, 60deg)",
        easing: "ease-in-out",
        opacity: "1"
    },
    {
        offset: 1,
        transform: "translate3d(0, 700px, 0)",
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/specials/jackInTheBox.js
var jackInTheBox = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale(0.1) rotate(30deg)",
        "transform-origin": "center bottom"
    },
    {
        offset: 0.5,
        transform: "rotate(-10deg)"
    },
    {
        offset: 0.7,
        transform: "rotate(3deg)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "scale(1)"
    }
];
// node_modules/@shoelace-style/animations/dist/specials/rollIn.js
var rollIn = [
    {
        offset: 0,
        opacity: "0",
        transform: "translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg)"
    },
    {
        offset: 1,
        opacity: "1",
        transform: "translate3d(0, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/specials/rollOut.js
var rollOut = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomIn.js
var zoomIn = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.3, 0.3, 0.3)"
    },
    {
        offset: 0.5,
        opacity: "1"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInDown.js
var zoomInDown = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInLeft.js
var zoomInLeft = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInRight.js
var zoomInRight = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInUp.js
var zoomInUp = [
    {
        offset: 0,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 0.6,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOut.js
var zoomOut = [
    {
        offset: 0,
        opacity: "1"
    },
    {
        offset: 0.5,
        opacity: "0",
        transform: "scale3d(0.3, 0.3, 0.3)"
    },
    {
        offset: 1,
        opacity: "0"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutDown.js
var zoomOutDown = [
    {
        offset: 0.4,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutLeft.js
var zoomOutLeft = [
    {
        offset: 0.4,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "scale(0.1) translate3d(-2000px, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutRight.js
var zoomOutRight = [
    {
        offset: 0.4,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "scale(0.1) translate3d(2000px, 0, 0)"
    }
];
// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutUp.js
var zoomOutUp = [
    {
        offset: 0.4,
        opacity: "1",
        transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)",
        easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    },
    {
        offset: 1,
        opacity: "0",
        transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0)",
        easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
    }
];
// node_modules/@shoelace-style/animations/dist/easings/easings.js
var easings = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    easeInSine: "cubic-bezier(0.47, 0, 0.745, 0.715)",
    easeOutSine: "cubic-bezier(0.39, 0.575, 0.565, 1)",
    easeInOutSine: "cubic-bezier(0.445, 0.05, 0.55, 0.95)",
    easeInQuad: "cubic-bezier(0.55, 0.085, 0.68, 0.53)",
    easeOutQuad: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
    easeInOutQuad: "cubic-bezier(0.455, 0.03, 0.515, 0.955)",
    easeInCubic: "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
    easeOutCubic: "cubic-bezier(0.215, 0.61, 0.355, 1)",
    easeInOutCubic: "cubic-bezier(0.645, 0.045, 0.355, 1)",
    easeInQuart: "cubic-bezier(0.895, 0.03, 0.685, 0.22)",
    easeOutQuart: "cubic-bezier(0.165, 0.84, 0.44, 1)",
    easeInOutQuart: "cubic-bezier(0.77, 0, 0.175, 1)",
    easeInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
    easeOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
    easeInOutQuint: "cubic-bezier(0.86, 0, 0.07, 1)",
    easeInExpo: "cubic-bezier(0.95, 0.05, 0.795, 0.035)",
    easeOutExpo: "cubic-bezier(0.19, 1, 0.22, 1)",
    easeInOutExpo: "cubic-bezier(1, 0, 0, 1)",
    easeInCirc: "cubic-bezier(0.6, 0.04, 0.98, 0.335)",
    easeOutCirc: "cubic-bezier(0.075, 0.82, 0.165, 1)",
    easeInOutCirc: "cubic-bezier(0.785, 0.135, 0.15, 0.86)",
    easeInBack: "cubic-bezier(0.6, -0.28, 0.735, 0.045)",
    easeOutBack: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
    easeInOutBack: "cubic-bezier(0.68, -0.55, 0.265, 1.55)"
};
// src/components/animation/animations.ts
function getAnimationNames() {
    return Object.entries(dist_exports).filter(([name])=>name !== "easings"
    ).map(([name])=>name
    );
}
function getEasingNames() {
    return Object.entries(easings).map(([name])=>name
    );
}

},{"./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PNgQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlAlert", ()=>SlAlert
);
var _chunk6JY65IM5Js = require("./chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("./chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkOTIAUNPCJs = require("./chunk.OTIAUNPC.js");
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/alert/alert.ts
var toastStack = Object.assign(document.createElement("div"), {
    className: "sl-toast-stack"
});
var SlAlert = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.open = false;
        this.closable = false;
        this.variant = "primary";
        this.duration = Infinity;
    }
    firstUpdated() {
        this.base.hidden = !this.open;
    }
    async show() {
        if (this.open) return;
        this.open = true;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-show");
    }
    async hide() {
        if (!this.open) return;
        this.open = false;
        return _chunkI4TE3TJVJs.waitForEvent(this, "sl-after-hide");
    }
    async toast() {
        return new Promise((resolve)=>{
            if (!toastStack.parentElement) document.body.append(toastStack);
            toastStack.appendChild(this);
            requestAnimationFrame(()=>{
                this.clientWidth;
                this.show();
            });
            this.addEventListener("sl-after-hide", ()=>{
                toastStack.removeChild(this);
                resolve();
                if (!toastStack.querySelector("sl-alert")) toastStack.remove();
            }, {
                once: true
            });
        });
    }
    restartAutoHide() {
        clearTimeout(this.autoHideTimeout);
        if (this.open && this.duration < Infinity) this.autoHideTimeout = setTimeout(()=>this.hide()
        , this.duration);
    }
    handleCloseClick() {
        this.hide();
    }
    handleMouseMove() {
        this.restartAutoHide();
    }
    async handleOpenChange() {
        if (this.open) {
            _chunkI4TE3TJVJs.emit(this, "sl-show");
            if (this.duration < Infinity) this.restartAutoHide();
            await _chunk6JY65IM5Js.stopAnimations(this.base);
            this.base.hidden = false;
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "alert.show");
            await _chunk6JY65IM5Js.animateTo(this.base, keyframes, options);
            _chunkI4TE3TJVJs.emit(this, "sl-after-show");
        } else {
            _chunkI4TE3TJVJs.emit(this, "sl-hide");
            clearTimeout(this.autoHideTimeout);
            await _chunk6JY65IM5Js.stopAnimations(this.base);
            const { keyframes , options  } = _chunkUTEQRIIYJs.getAnimation(this, "alert.hide");
            await _chunk6JY65IM5Js.animateTo(this.base, keyframes, options);
            this.base.hidden = true;
            _chunkI4TE3TJVJs.emit(this, "sl-after-hide");
        }
    }
    handleDurationChange() {
        this.restartAutoHide();
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div
        part="base"
        class=${_chunkW2WMQSCEJs.o({
            alert: true,
            "alert--open": this.open,
            "alert--closable": this.closable,
            "alert--primary": this.variant === "primary",
            "alert--success": this.variant === "success",
            "alert--neutral": this.variant === "neutral",
            "alert--warning": this.variant === "warning",
            "alert--danger": this.variant === "danger"
        })}
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        aria-hidden=${this.open ? "false" : "true"}
        @mousemove=${this.handleMouseMove}
      >
        <span part="icon" class="alert__icon">
          <slot name="icon"></slot>
        </span>

        <span part="message" class="alert__message">
          <slot></slot>
        </span>

        ${this.closable ? _chunk2VBMOEKGJs.$`
              <span class="alert__close">
                <sl-icon-button
                  exportparts="base:close-button"
                  name="x"
                  library="system"
                  @click=${this.handleCloseClick}
                ></sl-icon-button>
              </span>
            ` : ""}
      </div>
    `;
    }
};
SlAlert.styles = _chunkOTIAUNPCJs.alert_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i('[part="base"]')
], SlAlert.prototype, "base", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlAlert.prototype, "open", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlAlert.prototype, "closable", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        reflect: true
    })
], SlAlert.prototype, "variant", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Number
    })
], SlAlert.prototype, "duration", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("open", {
        waitUntilFirstUpdate: true
    })
], SlAlert.prototype, "handleOpenChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("duration")
], SlAlert.prototype, "handleDurationChange", 1);
SlAlert = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-alert")
], SlAlert);
_chunkUTEQRIIYJs.setDefaultAnimation("alert.show", {
    keyframes: [
        {
            opacity: 0,
            transform: "scale(0.8)"
        },
        {
            opacity: 1,
            transform: "scale(1)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});
_chunkUTEQRIIYJs.setDefaultAnimation("alert.hide", {
    keyframes: [
        {
            opacity: 1,
            transform: "scale(1)"
        },
        {
            opacity: 0,
            transform: "scale(0.8)"
        }
    ],
    options: {
        duration: 250,
        easing: "ease"
    }
});

},{"./chunk.6JY65IM5.js":"d40Fl","./chunk.UTEQRIIY.js":"h4h4P","./chunk.W2WMQSCE.js":"9o2tn","./chunk.OTIAUNPC.js":"gM4yc","./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gM4yc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alert_styles_default", ()=>alert_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/alert/alert.styles.ts
var alert_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: contents;

    /* For better DX, we'll reset the margin here so the base part can inherit it */
    margin: 0;
  }

  .alert {
    position: relative;
    display: flex;
    align-items: stretch;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-top-width: calc(var(--sl-panel-border-width) * 3);
    border-radius: var(--sl-border-radius-medium);
    box-shadow: var(--box-shadow);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-normal);
    line-height: 1.6;
    color: var(--sl-color-neutral-700);
    margin: inherit;
  }

  .alert__icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
  }

  .alert__icon ::slotted(*) {
    margin-left: var(--sl-spacing-large);
  }

  .alert--primary {
    border-top-color: var(--sl-color-primary-600);
  }

  .alert--primary .alert__icon {
    color: var(--sl-color-primary-600);
  }

  .alert--success {
    border-top-color: var(--sl-color-success-600);
  }

  .alert--success .alert__icon {
    color: var(--sl-color-success-600);
  }

  .alert--neutral {
    border-top-color: var(--sl-color-neutral-600);
  }

  .alert--neutral .alert__icon {
    color: var(--sl-color-neutral-600);
  }

  .alert--warning {
    border-top-color: var(--sl-color-warning-600);
  }

  .alert--warning .alert__icon {
    color: var(--sl-color-warning-600);
  }

  .alert--danger {
    border-top-color: var(--sl-color-danger-600);
  }

  .alert--danger .alert__icon {
    color: var(--sl-color-danger-600);
  }

  .alert__message {
    flex: 1 1 auto;
    padding: var(--sl-spacing-large);
    overflow: hidden;
  }

  .alert__close {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
    padding-right: var(--sl-spacing-medium);
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Tw6u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlIconButton", ()=>SlIconButton
);
var _chunkWCAFNYXWJs = require("./chunk.WCAFNYXW.js");
var _chunkW2WMQSCEJs = require("./chunk.W2WMQSCE.js");
var _chunkKJOCH52QJs = require("./chunk.KJOCH52Q.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/icon-button/icon-button.ts
var SlIconButton = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.label = "";
        this.disabled = false;
    }
    render() {
        const isLink = this.href ? true : false;
        const interior = _chunk2VBMOEKGJs.$`
      <sl-icon
        name=${_chunkKJOCH52QJs.l(this.name)}
        library=${_chunkKJOCH52QJs.l(this.library)}
        src=${_chunkKJOCH52QJs.l(this.src)}
        aria-hidden="true"
      ></sl-icon>
    `;
        return isLink ? _chunk2VBMOEKGJs.$`
          <a
            part="base"
            class="icon-button"
            href=${_chunkKJOCH52QJs.l(this.href)}
            target=${_chunkKJOCH52QJs.l(this.target)}
            download=${_chunkKJOCH52QJs.l(this.download)}
            rel=${_chunkKJOCH52QJs.l(this.target ? "noreferrer noopener" : void 0)}
            role="button"
            aria-disabled=${this.disabled ? "true" : "false"}
            aria-label="${this.label}"
            tabindex=${this.disabled ? "-1" : "0"}
          >
            ${interior}
          </a>
        ` : _chunk2VBMOEKGJs.$`
          <button
            part="base"
            class=${_chunkW2WMQSCEJs.o({
            "icon-button": true,
            "icon-button--disabled": this.disabled
        })}
            ?disabled=${this.disabled}
            type="button"
            aria-label=${this.label}
          >
            ${interior}
          </button>
        `;
    }
};
SlIconButton.styles = _chunkWCAFNYXWJs.icon_button_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i("button")
], SlIconButton.prototype, "button", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "name", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "library", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "src", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "href", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "target", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "download", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlIconButton.prototype, "label", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlIconButton.prototype, "disabled", 2);
SlIconButton = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-icon-button")
], SlIconButton);

},{"./chunk.WCAFNYXW.js":"9Qo42","./chunk.W2WMQSCE.js":"9o2tn","./chunk.KJOCH52Q.js":"e6TXF","./chunk.5PPINAFI.js":"a2lYY","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Qo42":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "icon_button_styles_default", ()=>icon_button_styles_default
);
var _chunkAN2XMPAVJs = require("./chunk.AN2XMPAV.js");
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/icon-button/icon-button.styles.ts
var icon_button_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    display: inline-block;
  }

  .icon-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-medium) color;
    -webkit-appearance: none;
  }

  .icon-button:hover:not(.icon-button--disabled),
  .icon-button:focus:not(.icon-button--disabled) {
    color: var(--sl-color-primary-600);
  }

  .icon-button:active:not(.icon-button--disabled) {
    color: var(--sl-color-primary-700);
  }

  .icon-button:focus {
    outline: none;
  }

  .icon-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .icon-button${_chunkAN2XMPAVJs.focusVisibleSelector} {
    box-shadow: var(--sl-focus-ring);
  }
`;

},{"./chunk.AN2XMPAV.js":"2bW2A","./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9aVv6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlAnimatedImage", ()=>SlAnimatedImage
);
var _chunkBD26TKS4Js = require("./chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("./chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("./chunk.5PPINAFI.js");
var _chunkXXINH6FVJs = require("./chunk.XXINH6FV.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("./chunk.4M3HOXYQ.js");
// src/components/animated-image/animated-image.ts
var SlAnimatedImage = class extends _chunk2VBMOEKGJs.s {
    constructor(){
        super(...arguments);
        this.isLoaded = false;
    }
    handleClick() {
        this.play = !this.play;
    }
    handleLoad() {
        const canvas = document.createElement("canvas");
        const { width , height  } = this.animatedImage;
        canvas.width = width;
        canvas.height = height;
        canvas.getContext("2d").drawImage(this.animatedImage, 0, 0, width, height);
        this.frozenFrame = canvas.toDataURL("image/gif");
        if (!this.isLoaded) {
            _chunkI4TE3TJVJs.emit(this, "sl-load");
            this.isLoaded = true;
        }
    }
    handleError() {
        _chunkI4TE3TJVJs.emit(this, "sl-error");
    }
    async handlePlayChange() {
        if (this.play) {
            this.animatedImage.src = "";
            this.animatedImage.src = this.src;
        }
    }
    handleSrcChange() {
        this.isLoaded = false;
    }
    render() {
        return _chunk2VBMOEKGJs.$`
      <div class="animated-image">
        <img
          class="animated-image__animated"
          src=${this.src}
          alt=${this.alt}
          crossorigin="anonymous"
          aria-hidden=${this.play ? "false" : "true"}
          @click=${this.handleClick}
          @load=${this.handleLoad}
          @error=${this.handleError}
        />

        ${this.isLoaded ? _chunk2VBMOEKGJs.$`
              <img
                class="animated-image__frozen"
                src=${this.frozenFrame}
                alt=${this.alt}
                aria-hidden=${this.play ? "true" : "false"}
                @click=${this.handleClick}
              />

              <div part="control-box" class="animated-image__control-box">
                ${this.play ? _chunk2VBMOEKGJs.$`<sl-icon part="pause-icon" name="pause-fill" library="system"></sl-icon>` : _chunk2VBMOEKGJs.$`<sl-icon part="play-icon" name="play-fill" library="system"></sl-icon>`}
              </div>
            ` : ""}
      </div>
    `;
    }
};
SlAnimatedImage.styles = _chunkXXINH6FVJs.animated_image_styles_default;
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlAnimatedImage.prototype, "frozenFrame", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.t()
], SlAnimatedImage.prototype, "isLoaded", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.i(".animated-image__animated")
], SlAnimatedImage.prototype, "animatedImage", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimatedImage.prototype, "src", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e()
], SlAnimatedImage.prototype, "alt", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.e({
        type: Boolean,
        reflect: true
    })
], SlAnimatedImage.prototype, "play", 2);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("play")
], SlAnimatedImage.prototype, "handlePlayChange", 1);
_chunk4M3HOXYQJs.__decorateClass([
    _chunkBD26TKS4Js.watch("src")
], SlAnimatedImage.prototype, "handleSrcChange", 1);
SlAnimatedImage = _chunk4M3HOXYQJs.__decorateClass([
    _chunk5PPINAFIJs.n("sl-animated-image")
], SlAnimatedImage);

},{"./chunk.BD26TKS4.js":"1j2NX","./chunk.I4TE3TJV.js":"i4CGq","./chunk.5PPINAFI.js":"a2lYY","./chunk.XXINH6FV.js":"kuIR9","./chunk.2VBMOEKG.js":"jJ4XN","./chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kuIR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animated_image_styles_default", ()=>animated_image_styles_default
);
var _chunkFGQFMRZUJs = require("./chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("./chunk.2VBMOEKG.js");
// src/components/animated-image/animated-image.styles.ts
var animated_image_styles_default = _chunk2VBMOEKGJs.r`
  ${_chunkFGQFMRZUJs.component_styles_default}

  :host {
    --control-box-size: 3rem;
    --icon-size: calc(var(--control-box-size) * 0.625);
    display: inline-flex;
    position: relative;
    cursor: pointer;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
  }

  img[aria-hidden='true'] {
    display: none;
  }

  .animated-image__control-box {
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(50% - var(--control-box-size) / 2);
    right: calc(50% - var(--control-box-size) / 2);
    width: var(--control-box-size);
    height: var(--control-box-size);
    font-size: var(--icon-size);
    background: none;
    border: solid 2px currentColor;
    background-color: rgb(0 0 0 /50%);
    border-radius: var(--sl-border-radius-circle);
    color: white;
    pointer-events: none;
    transition: var(--sl-transition-fast) opacity;
  }

  :host([play]:hover) .animated-image__control-box {
    opacity: 1;
    transform: scale(1);
  }

  :host([play]:not(:hover)) .animated-image__control-box {
    opacity: 0;
  }
`;

},{"./chunk.FGQFMRZU.js":"9cs7U","./chunk.2VBMOEKG.js":"jJ4XN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eEuu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_chunk5PGDTRSWJs.SlDrawer
);
var _chunk5PGDTRSWJs = require("../../chunks/chunk.5PGDTRSW.js");
var _chunkZXQWYC2KJs = require("../../chunks/chunk.ZXQWYC2K.js");
var _chunkSXNB3LL3Js = require("../../chunks/chunk.SXNB3LL3.js");
var _chunkDTSUHNT6Js = require("../../chunks/chunk.DTSUHNT6.js");
var _chunkST4GEPNZJs = require("../../chunks/chunk.ST4GEPNZ.js");
var _chunk5TL5QPK4Js = require("../../chunks/chunk.5TL5QPK4.js");
var _chunkQSLHMB3EJs = require("../../chunks/chunk.QSLHMB3E.js");
var _chunkWCAFNYXWJs = require("../../chunks/chunk.WCAFNYXW.js");
var _chunk6JY65IM5Js = require("../../chunks/chunk.6JY65IM5.js");
var _chunkUTEQRIIYJs = require("../../chunks/chunk.UTEQRIIY.js");
var _chunkW2WMQSCEJs = require("../../chunks/chunk.W2WMQSCE.js");
var _chunkAN2XMPAVJs = require("../../chunks/chunk.AN2XMPAV.js");
var _chunkIBSPWXHKJs = require("../../chunks/chunk.IBSPWXHK.js");
var _chunkL4IDTG64Js = require("../../chunks/chunk.L4IDTG64.js");
var _chunkC7PPQWMAJs = require("../../chunks/chunk.C7PPQWMA.js");
var _chunkNFF2HMITJs = require("../../chunks/chunk.NFF2HMIT.js");
var _chunkHEOUBJ7TJs = require("../../chunks/chunk.HEOUBJ7T.js");
var _chunkUJSH3WGMJs = require("../../chunks/chunk.UJSH3WGM.js");
var _chunk4KUWHA33Js = require("../../chunks/chunk.4KUWHA33.js");
var _chunkKJOCH52QJs = require("../../chunks/chunk.KJOCH52Q.js");
var _chunk2JQPDYNAJs = require("../../chunks/chunk.2JQPDYNA.js");
var _chunkBD26TKS4Js = require("../../chunks/chunk.BD26TKS4.js");
var _chunkI4TE3TJVJs = require("../../chunks/chunk.I4TE3TJV.js");
var _chunk5PPINAFIJs = require("../../chunks/chunk.5PPINAFI.js");
var _chunkFGQFMRZUJs = require("../../chunks/chunk.FGQFMRZU.js");
var _chunk2VBMOEKGJs = require("../../chunks/chunk.2VBMOEKG.js");
var _chunk4M3HOXYQJs = require("../../chunks/chunk.4M3HOXYQ.js");

},{"../../chunks/chunk.5PGDTRSW.js":"i9chM","../../chunks/chunk.ZXQWYC2K.js":"luWMM","../../chunks/chunk.SXNB3LL3.js":"cN7v8","../../chunks/chunk.DTSUHNT6.js":"a7RTw","../../chunks/chunk.ST4GEPNZ.js":"ao9ex","../../chunks/chunk.5TL5QPK4.js":"akO45","../../chunks/chunk.QSLHMB3E.js":"2Tw6u","../../chunks/chunk.WCAFNYXW.js":"9Qo42","../../chunks/chunk.6JY65IM5.js":"d40Fl","../../chunks/chunk.UTEQRIIY.js":"h4h4P","../../chunks/chunk.W2WMQSCE.js":"9o2tn","../../chunks/chunk.AN2XMPAV.js":"2bW2A","../../chunks/chunk.IBSPWXHK.js":"bRaa7","../../chunks/chunk.L4IDTG64.js":"5bB1j","../../chunks/chunk.C7PPQWMA.js":"szhSB","../../chunks/chunk.NFF2HMIT.js":"fX0do","../../chunks/chunk.HEOUBJ7T.js":"3YVet","../../chunks/chunk.UJSH3WGM.js":"7vHmo","../../chunks/chunk.4KUWHA33.js":"69rgo","../../chunks/chunk.KJOCH52Q.js":"e6TXF","../../chunks/chunk.2JQPDYNA.js":"4Ri6Y","../../chunks/chunk.BD26TKS4.js":"1j2NX","../../chunks/chunk.I4TE3TJV.js":"i4CGq","../../chunks/chunk.5PPINAFI.js":"a2lYY","../../chunks/chunk.FGQFMRZU.js":"9cs7U","../../chunks/chunk.2VBMOEKG.js":"jJ4XN","../../chunks/chunk.4M3HOXYQ.js":"BRuiO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["fcvSp","gLLPy"], "gLLPy", "parcelRequire6566")

//# sourceMappingURL=index.4d6bcbeb.js.map
